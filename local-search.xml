<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>12306 火车票余票查询脚本开发</title>
    <link href="/2024/10/08/12306%E4%BD%99%E7%A5%A8%E6%9F%A5%E8%AF%A2/"/>
    <url>/2024/10/08/12306%E4%BD%99%E7%A5%A8%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="12306-余票查询开发初衷"><a href="#12306-余票查询开发初衷" class="headerlink" title="12306 余票查询开发初衷"></a>12306 余票查询开发初衷</h1><p>可能很多同学有疑惑都2024年了，怎么还需要自己开发这个余票查询功能呢？毕竟当前市面太多自动化抢票工具了，只需要填写基本信息就可以完成从抢票到下单等一系列操作，确实，现在有很多抢票软件做的都很完美，但是有一个痛点目前是我遇到的，那就是</p><p>1.我想查例如 北京—&gt; 石家庄的票，在这样的大型节假日的时候，我们都会选择抢票，但是抢票软件都是选择你关注的的，虽然抢票软件可以自动抢新开列车，但是如果新开的列车不是你所期望的时间，这时间把钱付了，你还要退票，那么就要面临手续费！</p><p>2.另一方面，我想看当前那些有余票的，我就需要每次打开软件去查询，没有一个很方便的直接告诉我，哪列车当前有票！会感觉很麻烦，如果有一个程序可以帮我自动查询然后告诉我，那么就很完美了！</p><p>那么我开发的这个脚本就可以完美的解决上述的两个问题，但是目前仅限于查询余票，其余还是做不到的！后续功能可以慢慢加上！</p><h2 id="12306-网站接口剖析"><a href="#12306-网站接口剖析" class="headerlink" title="12306 网站接口剖析"></a>12306 网站接口剖析</h2><p>如果我们想查询余票，各位同学肯定会想到的时候通过接口查询，那么我们首先观察12306 网站在查询的时候都用了那些接口呢？假如我们这时候查询 北京—&gt; 石家庄 2024年10月9题的火车票，通过查询NetWork面板我们发现一共请求了2个接口！</p><img src="/2024/10/08/12306%E4%BD%99%E7%A5%A8%E6%9F%A5%E8%AF%A2/12306_1.png" class=""><p>那么这两个接口具体是干嘛的呢？ 下面我们就先剖析第一个接口</p><p>url_1: <a href="https://kyfw.12306.cn/otn/leftTicket/queryG?leftTicketDTO.train_date=2024-10-09&leftTicketDTO.from_station=BJP&leftTicketDTO.to_station=SJP&purpose_codes=ADULT">https://kyfw.12306.cn/otn/leftTicket/queryG?leftTicketDTO.train_date=2024-10-09&amp;leftTicketDTO.from_station=BJP&amp;leftTicketDTO.to_station=SJP&amp;purpose_codes=ADULT</a></p><p>这个url_1 实现了我们的查询功能就是查询北京—&gt;石家庄 10月09日的票，可以看返回体：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;httpstatus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;IN8i2mjU4pcjjt%2FuzxOnHM4uHCelK7W%2FFIJqW4sNvITAIkDPEQXWDCZRPUOlCQDyzvC2TBDcOaw8%0AHDSJMjOYT%2FZUGmDFoxGjVSeCZ0m3vuq11L0d5I8BhBL%2FcWpvvt%2FQzFHg57AgDF%2B24iCwm1rNRfvx%0A8WqPrdaBsIa7ffyQ9%2FNMxitJVEF9AAv0kc8VjDK0wqGAqS%2F6QlXILrQTUeh830ahknr0%2F017eIrI%0A67tFo0WX2HUhszbtLo7mEk%2FFWu%2BovNguW%2BOG7%2BB%2Bh1GBf61lRTktO03u0XOz3Di3NY%2FUKARr7vE5%0AnqcGhjzJ9uFZrXc2Q2gMq04L2uz43U0jxNqtkb9ZmnXO%2BeYC|预订|25000K772836|K7725|QTP|HDP|FTP|SJP|05:10|08:44|03:34|Y|Jz1NB7nb1uVJBAoXtjLOZGJ20tRCNaJVqDZwRJdiCitslCNE|20241008|3|P4|05|10|1|0|||||||有||有|有|||||1030W0|131|1|0||100415002130087500211004153540|0|||||1|0#0#0#0#z#0#3#z||7|CHN,CHN|||N#N#|330087531009553200925||202409250800|&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;4y1ZRp%2BUDU05TDqqGv5db0B8Ihr2U1k%2FUeqFOAFBuD7D4figNevZqpZ6BhdLoptjhZm0o1VkTITk%0A3ls1ZBfEW%2BM3gjtMX5jVAt7kltUotA8BR7mIkjeKOO1p0%2F6xN13lF5egt%2BVI3l5OH2HCdNox%2BJR0%0AXYaq%2BW%2BIJfFMsylSFQ4VzXzuZT2LZIgB4vJi2L5xnxBbUMWNMVC%2BE2uLm8%2BYUSLVjtA23UYLJCvZ%0AotZroMKl5%2FWYzSTg5t%2BsDf0IWJflfP9oUFRJQ71joO5iAhRO7K2ztONUGpXeegX8iLvFAgGyEy9h%0Af3bbljnIxuSs8earw%2FBRl4QpP5%2F9vcCPe7%2BgkeRHKIA%3D|预订|24000G67010K|G6701|BXP|HPP|BXP|SJP|05:34|06:52|01:18|Y|gM8t0dYOT81RRsMTXqzAZBNqGbCT0vYlvM9nnLI%2F6hDnhC7c|20241009|3|P2|01|03|1|0|||||||||||有|有|9||90M0O0|9MO|1|0||9040700009M016300021O010200021|0|||||1|0#1#0#0#z#0#z#z||7|CHN,CHN|||N#N#||90076M0066O0066|202409250800|&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;aJBRnhEtmXAILBbtHPZE5sGXxKlGgBMT4oHXCbUtcPuZ3qg3wWoFgPftibMhjuGeeMyWLj%2FOMpA4%0A1S0xBnV93r8DZd%2BjeZ4ctKY8mrxeTZqQS2hC%2FQdik20TK%2FDIeoXiTcCkZvD6gVUqMgIDBkb21q1J%0Alo5s%2BHidvNoHsOGvFqN4LHScUsfRvT8bWgW0gjuHs%2F%2FD2LRYdoWI4huvq1ymE112foQZCBFBaMTG%0AerGlG%2BMeFF6Yuk8nfv0jFZ90L3M9LmjZ3juZOklCSAl1bTGx5R31iszI%2BmrAd1NPGazE7VglF5Rz%0A0dxDkY27GSnazC6iVP40G4koVDk8EhXfl81rLTHtopE%3D|预订|24000G67030M|G6703|BXP|SJP|BXP|SJP|06:09|07:38|01:29|Y|3xnb0KoZxbzyVOsX6Abi3Bt1wPSt82%2FVpCTzaT73xMwj4JKw|20241009|3|P3|01|04|1|0|||||||||||有|有|有||90M0O0|9MO|1|0||9040700021M013600021O008500021|0|||||1|0#0#0#0#z#0#z#z||7|CHN,CHN|||N#N#||90076M0056O0055|202409250800|&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;Ogwl8J7aObJfs%2F3CMJhpSdQGFSiYlTW3BFiMMI6XfFv9oGNvbzSdPewztg4FaP7YVypFXeKH4IVI%0AjZs0qTz2jKFKllmW2I3Vb9VQMW6WYOcNk1lX3rJF7vnglUOsQQPQnXeYWPlasqgPchyVoX0lcab3%0AUJJ8p4PRgz1%2BDV11X%2FxqrgBMajeH3oceMve6xFuZPx0hv1ULSLmqzs4soBc4aAqXG1NhnyUn8Cle%0A%2BfIbM%2FGoWvBxny3boSaGHqG0RtOqkSz57MCHny4lhKzj0unAJk9PHWuEKD9pBcZKzMco2FQAZa81%0ABn2yKz%2Fj%2Ff5pL0P93yXy5RrXg9soKhdEzYp40T0DTL8%3D|预订|240000G55920|G559|BXP|JGF|BXP|SJP|06:15|07:26|01:11|Y|IItRSsrNtZYpYkCJw54WZ92Lec8RbTDQ%2BJpF4yOQO%2Bv1U21q|20241009|3|P4|01|02|1|0|||||||||||有|5|无||90M0O0|9MO|0|1||9040700000M020600005O012900021|0|||||1|0#0#0#0#z#0#z#z||7|CHN,CHN|||N#N#||90076M0084O0084|202409250800|&quot;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;flag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sametlc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Y&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;map&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;VVP&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;石家庄北&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;IFP&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;北京朝阳&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;FTP&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;北京丰台&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;SJP&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;石家庄&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;BJP&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;北京&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;QIP&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;清河&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;BXP&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;北京西&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;GIP&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;高邑&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;messages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>上述的返回体中我截取了result中的部分数据，因为返回太多了我们只需要对一个观察就可以找到具体的规律，此时我们看到</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">&quot;IN8i2mjU4pcjjt%2FuzxOnHM4uHCelK7W%2FFIJqW4sNvITAIkDPEQXWDCZRPUOlCQDyzvC2TBDcOaw8%0AHDSJMjOYT%2FZUGmDFoxGjVSeCZ0m3vuq11L0d5I8BhBL%2FcWpvvt%2FQzFHg57AgDF%2B24iCwm1rNRfvx%0A8WqPrdaBsIa7ffyQ9%2FNMxitJVEF9AAv0kc8VjDK0wqGAqS%2F6QlXILrQTUeh830ahknr0%2F017eIrI%0A67tFo0WX2HUhszbtLo7mEk%2FFWu%2BovNguW%2BOG7%2BB%2Bh1GBf61lRTktO03u0XOz3Di3NY%2FUKARr7vE5%0AnqcGhjzJ9uFZrXc2Q2gMq04L2uz43U0jxNqtkb9ZmnXO%2BeYC|预订|25000K772836|K7725|QTP|HDP|FTP|SJP|05:10|08:44|03:34|Y|Jz1NB7nb1uVJBAoXtjLOZGJ20tRCNaJVqDZwRJdiCitslCNE|20241008|3|P4|05|10|1|0|||||||有||有|有|||||1030W0|131|1|0||100415002130087500211004153540|0|||||1|0#0#0#0#z#0#3#z||7|CHN,CHN|||N#N#|330087531009553200925||202409250800|&quot;<br></code></pre></td></tr></table></figure><p>首先是一堆乱码，后面我们看到有中文的预定，然后我们继续观察看到有 K7725 这个火车编号的 信息，然后后面后有部分时间信息，以及后续的票务信息：|||||||有||有|有|||||, 那么有人要问了这些<code>|</code>表示什么呢？先不管，这里我们认为是票务的信息，那么我们发现也就这些是我们能看懂的，那么我们怎么利用现有信息来实现余票查询呢？别着急后续继续解释。</p><p>url_2:<a href="https://kyfw.12306.cn/lcquery/queryG?train_date=2024-10-09&from_station_telecode=BJP&to_station_telecode=SJP&result_index=0&can_query=Y&isShowWZ=Y&sort_type=2&purpose_codes=00&is_loop_transfer=S&channel=E&_json_att=">https://kyfw.12306.cn/lcquery/queryG?train_date=2024-10-09&amp;from_station_telecode=BJP&amp;to_station_telecode=SJP&amp;result_index=0&amp;can_query=Y&amp;isShowWZ=Y&amp;sort_type=2&amp;purpose_codes=00&amp;is_loop_transfer=S&amp;channel=E&amp;_json_att=</a></p><p>url_2 是查询中转的接口，也就是查询北京—&gt;石家庄 10月09日的可以乘坐哪些中转的车，一起看返回体：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;flag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;result_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;can_query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;N&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;middleList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;all_lishi&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3小时52分钟&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;all_lishi_minutes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">232</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;arrive_date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-10-09&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;arrive_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;12:14&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;end_station_code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;SJP&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;end_station_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;石家庄&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;first_train_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;24000G780703&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;from_station_code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;VNP&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;from_station_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;北京南&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;fullList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;arrive_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;08:43&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;bed_level_info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;controlled_train_flag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;country_flag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CHN,CHN&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;day_difference&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;dw_flag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;5#1#0#S#z#0#z#z&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;end_station_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;廊坊&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;end_station_telecode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;LJP&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;from_station_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;北京南&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;from_station_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;01&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;from_station_telecode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;VNP&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;gg_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;gr_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;is_support_card&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;lishi&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;00:21&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;local_arrive_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;local_start_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;qt_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;rw_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;rz_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;seat_discount_info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;90075M0080O0076&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;seat_types&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;9MO&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;srrb_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;start_station_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;北京南&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;start_station_telecode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;VNP&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;start_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;08:22&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;start_train_date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;20241009&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;station_train_code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;G7807&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;swz_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;to_station_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;廊坊&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;to_station_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;02&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;to_station_telecode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;LJP&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;train_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;24000G780703&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;train_seat_feature&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;trms_train_flag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;tz_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;wz_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;yb_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;yp_info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;9008700002M004200018O002500021&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;yw_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;yz_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;ze_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;有&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;zy_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;18&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;isHeatTrain&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;N&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;isOutStation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;lCWaitTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;lishi_flag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;middle_date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-10-09&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;middle_station_code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;LJP&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;middle_station_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;廊坊&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;same_station&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;same_train&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;N&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">386</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;score_str&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;276+100+10=386##100#100&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;scretstr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;MjAyNC0xMC0wOSMwMCNHNzgwNyMwMDoyMSMwODoyMiMyNDAwMEc3ODA3MDMjVk5QI0xKUCMwODo0MyPljJfkuqzljZcj5buK5Z2KIzAxIzAyI2RSWkVHSk9HdTRZdDlVNE0vVkhGaHdRckk5TXpaNGlaYkpYaFJHS1hlNi9RMXo5ZiNQMyMxNCMxMjMwIzMjMzEjMDM1NyMwMSMwMzU4IzAjVk5QI0xKUCMxNzI4MzY4MzQwMjcwIzE3MjcyMzg2MDAwMDAjNSwxLDAsUyx6LDAseix6IyMjQ0hOLENITiM6OjoyMDI0LTEwLTA5IzAwI0c3ODA1IzAyOjQyIzA5OjMyIzJkMDAwRzc4MDUwMyNMSlAjU0pQIzEyOjE0I%2BW7iuWdiiPnn7PlrrbluoQjMDEjMDYjQ1pxYm94dlFlM1Z4Y3ZoYzd4TFlWNnNFN3BjTmNkS2VMSUQ5eXJUWldGTjhxK1k4I1A0IzE0IzE2MDAjMyMwMSMwMzU4IzAxIzAzNDkjMCNMSlAjSFBQIzE3MjgzNjgzNDAyNzAjMTcyNzI1MTIwMDAwMCM1LDEsMCxTLHosMCx6LHojIyNDSE4sQ0hOIzo6Om51bGwjMDo6OjI3RDdGMjg5ODcxODdFNUM3RkJBMEUyMjRDNjkxOTUzOTNCMUY1N0FENThDOUQwMUQ3RkNCN0ZEOjo6MDo6Olk6OjpZ&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;second_train_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2d000G780503&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;start_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;08:22&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;train_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;train_date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-10-09&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;use_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;wait_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;49分钟&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;wait_time_minutes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">49</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;errorMsg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这里返回的信息也依旧截取了部分返回信息，那么可以看到这个返回体更加清晰，描述了中转车量的信息，那么由于我们这里暂时不考虑中转，首先就关心这个接口了！</p><h2 id="针对url-1-接口的返回体解析"><a href="#针对url-1-接口的返回体解析" class="headerlink" title="针对url_1 接口的返回体解析"></a>针对url_1 接口的返回体解析</h2><p>那么从上面我们看到了返回信息里面包含了乘车的编号信息，票务信息，那么就可以实现查询了，首先我们观察第一个也是上面遗留的问题：<code>|||||||有||有|有|||||</code>, 这些 <code>|</code> 表示什么意思？下面我来解释一下，通过观察 我们对比该车次的返回在12306页面的表达看</p><img src="/2024/10/08/12306%E4%BD%99%E7%A5%A8%E6%9F%A5%E8%AF%A2/12306_2.png" class=""><p>观察上述信息发现，硬卧 二等卧、 硬座、 无座 均是有，而其他类型的例如 一等座、二等座 二等包座等 都是 <code>--</code>，那么现在很明显了，<code>|</code> 表示的是无，有票以及票有数据，则是显示 有或者具体数据，那么此时我们已经解刨这个接口完毕了，找到了我们想要的信息，那么接下来的难点就是如何从这些返回体中取出想要的数据！</p><h3 id="编写返回体提取票务信息逻辑"><a href="#编写返回体提取票务信息逻辑" class="headerlink" title="编写返回体提取票务信息逻辑"></a>编写返回体提取票务信息逻辑</h3><p>首先观察返回信息：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">&quot;IN8i2mjU4pcjjt%2FuzxOnHM4uHCelK7W%2FFIJqW4sNvITAIkDPEQXWDCZRPUOlCQDyzvC2TBDcOaw8%0AHDSJMjOYT%2FZUGmDFoxGjVSeCZ0m3vuq11L0d5I8BhBL%2FcWpvvt%2FQzFHg57AgDF%2B24iCwm1rNRfvx%0A8WqPrdaBsIa7ffyQ9%2FNMxitJVEF9AAv0kc8VjDK0wqGAqS%2F6QlXILrQTUeh830ahknr0%2F017eIrI%0A67tFo0WX2HUhszbtLo7mEk%2FFWu%2BovNguW%2BOG7%2BB%2Bh1GBf61lRTktO03u0XOz3Di3NY%2FUKARr7vE5%0AnqcGhjzJ9uFZrXc2Q2gMq04L2uz43U0jxNqtkb9ZmnXO%2BeYC|预订|25000K772836|K7725|QTP|HDP|FTP|SJP|05:10|08:44|03:34|Y|Jz1NB7nb1uVJBAoXtjLOZGJ20tRCNaJVqDZwRJdiCitslCNE|20241008|3|P4|05|10|1|0|||||||有||有|有|||||1030W0|131|1|0||100415002130087500211004153540|0|||||1|0#0#0#0#z#0#3#z||7|CHN,CHN|||N#N#|330087531009553200925||202409250800|&quot;<br></code></pre></td></tr></table></figure><p>我们看到在上面中有一个预定的汉字，那么我就可以先以 <code>预定</code> 进行分割，此时可以获取后面的信息，那么就是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">train_info = train_txt.split(<span class="hljs-string">&quot;预定&quot;</span>)[<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p>那么我们拿到信息如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">|25000K772836|K7725|QTP|HDP|FTP|SJP|05:10|08:44|03:34|Y|Jz1NB7nb1uVJBAoXtjLOZGJ20tRCNaJVqDZwRJdiCitslCNE|20241008|3|P4|05|10|1|0|||||||有||有|有|||||1030W0|131|1|0||100415002130087500211004153540|0|||||1|0#0#0#0#z#0#3#z||7|CHN,CHN|||N#N#|330087531009553200925||202409250800|<br></code></pre></td></tr></table></figure><p>那么我们继续观察发现在上述信息中有一个|Y|,继续观察其他的发现要不就是|Y|要不就是|N|，那么就可以按照这个进行分割。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">train_info = train_txt.split(<span class="hljs-string">&quot;预定&quot;</span>)[<span class="hljs-number">1</span>]split(<span class="hljs-string">&quot;|Y|&quot;</span>)[<span class="hljs-number">0</span>] <br></code></pre></td></tr></table></figure><p>也就得到了</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">|25000K772836|K7725|QTP|HDP|FTP|SJP|05:10|08:44|03:34<br></code></pre></td></tr></table></figure><p>此时拿到了具体的车次信息，那么想要后续的信息就可以取 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">train_info = train_txt.split(<span class="hljs-string">&quot;预定&quot;</span>)[<span class="hljs-number">1</span>]split(<span class="hljs-string">&quot;|Y|&quot;</span>)[<span class="hljs-number">1</span>] <br></code></pre></td></tr></table></figure><p>那么拿到的是：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">Jz1NB7nb1uVJBAoXtjLOZGJ20tRCNaJVqDZwRJdiCitslCNE|20241008|3|P4|05|10|1|0|||||||有||有|有|||||1030W0|131|1|0||100415002130087500211004153540|0|||||1|0#0#0#0#z#0#3#z||7|CHN,CHN|||N#N#|330087531009553200925||202409250800|<br></code></pre></td></tr></table></figure><p>通过观察，在|20241008| 前面的乱码发现基本上长度一致，那么我就可以指定长度取截取</p><p>至此，我们实现了信息的采集和分割，那么我们能实现拿到具体车次，是否有票这些信息。</p><h3 id="判断信息中是否有票"><a href="#判断信息中是否有票" class="headerlink" title="判断信息中是否有票"></a>判断信息中是否有票</h3><p>那么拿到数据之后，我们就要判断是否有票，我们可以根据是否有有以及是否有数字存在即可！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">contains_number_or_you</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-comment"># 检查是否包含数字</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(char.isdigit() <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> s):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># 检查是否包含“有”</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;有&quot;</span> <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># 如果都不包含，则返回False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>函数通过检查是否有数字以及是否有有，返回布尔值。</p><h3 id="组装返回信息"><a href="#组装返回信息" class="headerlink" title="组装返回信息"></a>组装返回信息</h3><p>目前计划是通过邮件将信息返回，那么此时已经可以判断车次，是否有票，我们就需要通过将我们拿到的数据进行重写组装，然后将其转化为一个html格式的表格便于我们查看，具体代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">list_to_html</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;+++++++++++++++++++&quot;</span>)<br>    <span class="hljs-comment"># print(data)</span><br>    <span class="hljs-comment"># print(type(data))</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;++++++++++++++++++&quot;</span>)<br>    headers = [<br>        <span class="hljs-string">&quot;列车号&quot;</span>, <span class="hljs-string">&quot;起点站&quot;</span>, <span class="hljs-string">&quot;途经站1&quot;</span>, <span class="hljs-string">&quot;途经站2&quot;</span>, <span class="hljs-string">&quot;终点站&quot;</span>,<br>        <span class="hljs-string">&quot;出发时间&quot;</span>, <span class="hljs-string">&quot;到达时间&quot;</span>, <span class="hljs-string">&quot;耗费时间&quot;</span>, <span class="hljs-string">&quot;暂无&quot;</span>, <span class="hljs-string">&quot;暂无&quot;</span>,<br>        <span class="hljs-string">&quot;暂无&quot;</span>, <span class="hljs-string">&quot;暂无&quot;</span>, <span class="hljs-string">&quot;暂无&quot;</span>, <span class="hljs-string">&quot;座位数目&quot;</span>, <span class="hljs-string">&quot;优选一等座&quot;</span>,<br>        <span class="hljs-string">&quot;座位数目&quot;</span>, <span class="hljs-string">&quot;座位数目&quot;</span>, <span class="hljs-string">&quot;软卧/动卧&quot;</span>, <span class="hljs-string">&quot;座位数目&quot;</span>, <span class="hljs-string">&quot;座位数目&quot;</span>, <span class="hljs-string">&quot;无座&quot;</span>, <span class="hljs-string">&quot;座位数目&quot;</span>, <span class="hljs-string">&quot;硬卧,二等卧&quot;</span>, <span class="hljs-string">&quot;硬座&quot;</span>, <span class="hljs-string">&quot;二等座&quot;</span>, <span class="hljs-string">&quot;一等座&quot;</span>, <span class="hljs-string">&quot;商务座,特等座&quot;</span>, <span class="hljs-string">&quot;座位数目&quot;</span><br>    ]<br><br>    <span class="hljs-comment"># 构造HTML表格的开头部分，包括CSS样式</span><br>    html_table = <span class="hljs-string">&#x27;&#x27;&#x27;  </span><br><span class="hljs-string">    &lt;style&gt;  </span><br><span class="hljs-string">    .table-container &#123;  </span><br><span class="hljs-string">        height: 90vh;  /* 根据视口高度设置，以适应不同屏幕 */  </span><br><span class="hljs-string">        overflow-y: auto; /* 允许垂直滚动 */  </span><br><span class="hljs-string">        display: block; /* 可能需要，取决于布局 */  </span><br><span class="hljs-string">        width: 100%; /* 或固定宽度 */  </span><br><span class="hljs-string">    &#125;  </span><br><span class="hljs-string">    th &#123;  </span><br><span class="hljs-string">        position: sticky;  </span><br><span class="hljs-string">        top: 0;  </span><br><span class="hljs-string">        background-color: #f9f9f9; /* 表头背景色 */  </span><br><span class="hljs-string">    &#125;  </span><br><span class="hljs-string">    table &#123;  </span><br><span class="hljs-string">        width: 100%; /* 确保表格宽度与容器相同 */  </span><br><span class="hljs-string">        border-collapse: collapse; /* 边框合并 */  </span><br><span class="hljs-string">    &#125;  </span><br><span class="hljs-string">    th, td &#123;  </span><br><span class="hljs-string">        border: 1px solid #ddd; /* 边框样式 */  </span><br><span class="hljs-string">        padding: 8px; /* 单元格内边距 */  </span><br><span class="hljs-string">        text-align: left; /* 文本对齐方式 */  </span><br><span class="hljs-string">    &#125;  </span><br><span class="hljs-string">    &lt;/style&gt;  </span><br><span class="hljs-string">    &lt;div class=&quot;table-container&quot;&gt;  </span><br><span class="hljs-string">    &lt;table&gt;  </span><br><span class="hljs-string">    &lt;thead&gt;  </span><br><span class="hljs-string">    &lt;tr&gt;  </span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> header <span class="hljs-keyword">in</span> headers:<br>        html_table += <span class="hljs-string">f&#x27;&lt;th&gt;<span class="hljs-subst">&#123;header&#125;</span>&lt;/th&gt;&#x27;</span><br>    html_table += <span class="hljs-string">&#x27;&#x27;&#x27;  </span><br><span class="hljs-string">    &lt;/tr&gt;  </span><br><span class="hljs-string">    &lt;/thead&gt;  </span><br><span class="hljs-string">    &lt;tbody&gt;  </span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-comment"># 遍历数据，并为每一项添加一行到表格体（tbody）中</span><br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data:<br>        columns = item.split(<span class="hljs-string">&#x27;|&#x27;</span>)<br>        <span class="hljs-comment"># 填充缺失的列</span><br>        columns += [<span class="hljs-string">&#x27;&#x27;</span>] * (<span class="hljs-built_in">len</span>(headers) - <span class="hljs-built_in">len</span>(columns))<br>        html_row = <span class="hljs-string">&#x27;&lt;tr&gt;&#x27;</span> + <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-string">f&#x27;&lt;td&gt;<span class="hljs-subst">&#123;column&#125;</span>&lt;/td&gt;&#x27;</span> <span class="hljs-keyword">for</span> column <span class="hljs-keyword">in</span> columns) + <span class="hljs-string">&#x27;&lt;/tr&gt;\n&#x27;</span><br>        html_table += html_row<br><br>        <span class="hljs-comment"># 添加表格的结尾部分</span><br>    html_table += <span class="hljs-string">&#x27;&#x27;&#x27;  </span><br><span class="hljs-string">    &lt;/tbody&gt;  </span><br><span class="hljs-string">    &lt;/table&gt;  </span><br><span class="hljs-string">    &lt;/div&gt;  </span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-comment"># 返回完整的HTML字符串</span><br>    <span class="hljs-built_in">print</span>(html_table)<br>    <span class="hljs-keyword">return</span> html_table<br></code></pre></td></tr></table></figure><p>上面的函数接收一个list,然后进行转化生成一个html信息。</p><h3 id="邮件发送"><a href="#邮件发送" class="headerlink" title="邮件发送"></a>邮件发送</h3><p>我们拿到html信息后需要第一时间通知给我，那么就要用到邮件通知，下面是邮件通知代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">send_mail</span>(<span class="hljs-params">mail_body, receivers</span>):<br>    <span class="hljs-comment"># 发件人邮箱账号</span><br>    sender = <span class="hljs-string">&#x27;1542418645@qq.com&#x27;</span><br>    <span class="hljs-comment"># 发件人邮箱授权码（不是QQ密码）</span><br>    password = <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment"># 此处填写你的授权码</span><br>    <span class="hljs-comment"># SMTP服务器地址</span><br>    smtp_server = <span class="hljs-string">&#x27;smtp.qq.com&#x27;</span><br>    <span class="hljs-comment"># SMTP服务器端口，对于QQ邮箱，使用SSL的465端口</span><br>    smtp_port = <span class="hljs-number">465</span><br><br>    <span class="hljs-comment"># 邮件内容</span><br>    subject = <span class="hljs-string">&#x27;抢到火车票了！&#x27;</span><br>    <span class="hljs-comment"># HTML邮件正文</span><br>    html_body = mail_body<br><br>    <span class="hljs-comment"># 邮件接收者</span><br>    <span class="hljs-comment"># receiver = &#x27;1542418645@qq.com&#x27;</span><br><br>    <span class="hljs-comment"># 创建邮件对象，指定内容为HTML</span><br>    message = MIMEText(html_body, <span class="hljs-string">&#x27;html&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-comment"># 设置From头部，使用formataddr函数来正确设置完整的From头部信息</span><br>    message[<span class="hljs-string">&#x27;From&#x27;</span>] = formataddr((<span class="hljs-string">&#x27;发件人姓名&#x27;</span>, sender))<br>    <span class="hljs-comment"># 设置To头部，同样使用Header</span><br>    <span class="hljs-comment"># message[&#x27;To&#x27;] = Header(receiver, &#x27;utf-8&#x27;)</span><br>    <span class="hljs-comment"># 设置Subject头部，对于中文主题也使用Header</span><br>    message[<span class="hljs-string">&#x27;Subject&#x27;</span>] = Header(subject, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 创建SMTP SSL连接</span><br>        smtpObj = smtplib.SMTP_SSL(smtp_server, smtp_port)<br>        smtpObj.login(sender, password)  <span class="hljs-comment"># 登录到SMTP服务器</span><br><br>        <span class="hljs-comment"># 如果receivers是单个字符串，则转换为列表</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(receivers, <span class="hljs-built_in">str</span>):<br>            receivers = [receivers]<br><br>        <span class="hljs-comment"># 发送邮件给多个接收者</span><br>        smtpObj.sendmail(sender, receivers, message.as_string())<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;邮件发送成功&quot;</span>)<br>        smtpObj.quit()<br>    <span class="hljs-keyword">except</span> smtplib.SMTPException <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;邮件发送失败:&quot;</span>, e)<br></code></pre></td></tr></table></figure><p>这里我们声明是一个协程方法也就是发送邮件是异步的，我无需等待邮件发送后才执行下一个逻辑。</p><h3 id="一些固定规律的解决"><a href="#一些固定规律的解决" class="headerlink" title="一些固定规律的解决"></a>一些固定规律的解决</h3><p>在继续查看返回体的时候发现里面会有固定的 W M F 的返回信息，此处为</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">Jz1NB7nb1uVJBAoXtjLOZGJ20tRCNaJVqDZwRJdiCitslCNE|20241008|3|P4|05|10|1|0|||||||有||有|有|||||1030W0|131|1|0||100415002130087500211004153540|0|||||1|0#0#0#0#z#0#3#z||7|CHN,CHN|||N#N#|330087531009553200925||202409250800|<br></code></pre></td></tr></table></figure><p>也就是我想去掉 |1030W0| 后面的信息由于后续都是无规律的，但是肯定会有M W F 出现，那么我们可以获取当前位置然后进行分割，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_after_wm</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-comment"># 查找&#x27;W&#x27;或&#x27;M&#x27;首次出现的位置</span><br>    <span class="hljs-comment"># 使用min函数和find方法确保我们找到的是两者中较早出现的一个</span><br>    <span class="hljs-comment"># 如果&#x27;W&#x27;或&#x27;M&#x27;都不存在，find会返回-1，而min(-1, -1)也是-1</span><br>    pos_w = s.find(<span class="hljs-string">&#x27;W&#x27;</span>)<br>    pos_m = s.find(<span class="hljs-string">&#x27;M&#x27;</span>)<br>    pos_f = s.find(<span class="hljs-string">&#x27;F&#x27;</span>)<br><br>    <span class="hljs-keyword">if</span> pos_w != -<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> pos_m != -<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> pos_f != -<span class="hljs-number">1</span>:<br>        pos = <span class="hljs-built_in">min</span>(pos_w, pos_m, pos_f)<br>    <span class="hljs-keyword">elif</span> pos_w != -<span class="hljs-number">1</span>:<br>        pos = pos_w<br>    <span class="hljs-keyword">elif</span> pos_m != -<span class="hljs-number">1</span>:<br>        pos = pos_m<br>    <span class="hljs-keyword">elif</span> pos_f != -<span class="hljs-number">1</span>:<br>        pos = pos_f<br>    <span class="hljs-keyword">else</span>:<br>        pos = -<span class="hljs-number">1</span>  <span class="hljs-comment"># 表示&#x27;W&#x27;和&#x27;M&#x27;都不存在</span><br><br>    <span class="hljs-keyword">return</span> s[:pos]<br></code></pre></td></tr></table></figure><h3 id="整体规划"><a href="#整体规划" class="headerlink" title="整体规划"></a>整体规划</h3><p>到现在我们已经拿到了具体的信息，那么就可以规划我们的具体实现，首先我们可以支持 邮件多人发送，请求12306延迟设置防止IP访问频繁被封，用户关注的火车信息，假如我关注的车次只想他有票的时候才会通知也行支持多个车次的设置，假如我们不想一直接收邮件的发送，那么我们可以设置邮件接收的延迟时间，目前支持设置分钟，小时级别的延迟。</p><p>那么上面就是我们要实现的功能，下面就是已经实现的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_info</span>(<span class="hljs-params">url, address, receivers, sleep_time=<span class="hljs-number">10</span>, user_focus_train=<span class="hljs-literal">None</span>, email_delay_time=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    =========== dreamshao 12306查询余票函数调用指南=========</span><br><span class="hljs-string"></span><br><span class="hljs-string">    支持多线程查询火车票余票，使用教程：</span><br><span class="hljs-string">    登录12306 网站 https://www.12306.cn/index/</span><br><span class="hljs-string">    选择起点，终点，时间 点击查询</span><br><span class="hljs-string">    此时页面跳转到列车详情页面，打开network 面板，再次点击查询抓取查询接口</span><br><span class="hljs-string">    注意： 此时可能会用2个接口请求，一个是火车列表信息， 一个是中转信息</span><br><span class="hljs-string">    我们需要的url 是这样的： https://kyfw.12306.cn/otn/leftTicket/queryG?leftTicketDTO.train_date=2024-09-30&amp;leftTicketDTO.from_station=SJP&amp;leftTicketDTO.to_station=XTP&amp;purpose_codes=ADULT</span><br><span class="hljs-string">    然后将其作为Url 参数传入，然后选择改url对应的COOKIE, 在程序中替换之前的即可！</span><br><span class="hljs-string"></span><br><span class="hljs-string">    =========== dreamshao 12306查询余票函数调用指南=========</span><br><span class="hljs-string">    :param url: 请求url</span><br><span class="hljs-string">    :param address: 火车起点重点： 北京-----&gt; 邯郸</span><br><span class="hljs-string">    :param user_focus_train: 你关注的列车有票才会发送邮件，格式是list [&#x27;G3433&#x27;,&#x27;K333&#x27;]</span><br><span class="hljs-string">    :param sleep_time: 请求接口休眠时间</span><br><span class="hljs-string">    :param email_delay_time 邮件延迟发送时间，就是当前不希望每次都收到通知，只是希望间隔多久通知一次， 目前是 minutes, hours 格式是(1, 0.5) 是 小时, 其余是按照分钟处理</span><br><span class="hljs-string">    :param receivers 邮件接收人 可以传递一个列表例如 [&#x27;123232@qq.com&#x27;,&#x27;3333@qq.com]  多人接收邮件</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> url == <span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">or</span> address == <span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">or</span> receivers == <span class="hljs-string">&quot;&quot;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;please input right url or address or receivers&quot;</span><br>    <span class="hljs-built_in">print</span>(<br>        <span class="hljs-string">f&quot;当前请求地址是<span class="hljs-subst">&#123;url&#125;</span>,请求火车票方向是<span class="hljs-subst">&#123;address&#125;</span>,邮件接收人是<span class="hljs-subst">&#123;receivers&#125;</span>,请求间隔时间是<span class="hljs-subst">&#123;sleep_time&#125;</span>秒,用户关注的火车列表是<span class="hljs-subst">&#123;user_focus_train&#125;</span>,邮件间隔报警时间是<span class="hljs-subst">&#123;email_delay_time&#125;</span>&quot;</span>)<br>    time_info = url.split(<span class="hljs-string">&#x27;train_date=&#x27;</span>)[<span class="hljs-number">1</span>].split(<span class="hljs-string">&quot;&amp;&quot;</span>)[<span class="hljs-number">0</span>]  <span class="hljs-comment"># 出发时间</span><br>    <span class="hljs-keyword">global</span> send_info_type, send_numbers, send_email_all_type, send_all_numbers, email_alert_delay_type, email_alert_delay_time  <span class="hljs-comment"># 关注的火车发送邮件状态</span><br>    send_info_type = <span class="hljs-literal">False</span>  <span class="hljs-comment"># 关注火车列表发送状态</span><br>    send_email_all_type = <span class="hljs-literal">False</span>  <span class="hljs-comment"># 所有火车列表发送状态</span><br>    send_numbers = <span class="hljs-number">0</span><br>    send_all_numbers = <span class="hljs-number">0</span><br>    numbers = <span class="hljs-number">0</span><br>    email_alert = []<br>    email_alert_delay_time = delay_time(email_delay_time)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment"># 获取当前时间</span><br>        now = datetime.now()<br>        <span class="hljs-comment"># 是否有票的标志</span><br>        has_ticket = <span class="hljs-literal">False</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前正在抢<span class="hljs-subst">&#123;address&#125;</span>的火车票&quot;</span>)<br>        payload = &#123;&#125;<br>        headers = &#123;<br>            <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36&#x27;</span>,<br>            <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;JSESSIONID=6571054C8C61F63A5F32C82A1A340BED; guidesStatus=off; _big_fontsize=0; highContrastMode=defaltMode; cursorStatus=off; BIGipServerpool_index=821035530.43286.0000; route=6f50b51faa11b987e576cdb301e545c4; BIGipServerotn=670040586.24610.0000&#x27;</span><br><br>        &#125;<br><br>        time.sleep(sleep_time)<br>        response = requests.request(<span class="hljs-string">&quot;GET&quot;</span>, url, headers=headers, data=payload)<br>        <span class="hljs-keyword">if</span> check_http_code(response.status_code):<br>            re_json = json.loads(response.text)<br>            len_nums = <span class="hljs-built_in">len</span>(re_json[<span class="hljs-string">&#x27;data&#x27;</span>][<span class="hljs-string">&#x27;result&#x27;</span>])<br>            <span class="hljs-comment"># print(re_json[&#x27;data&#x27;][&#x27;result&#x27;])</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> (re_json[<span class="hljs-string">&#x27;data&#x27;</span>][<span class="hljs-string">&#x27;result&#x27;</span>]):<br>                numbers += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">try</span>:<br>                    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;|N|&quot;</span> <span class="hljs-keyword">in</span> i:<br>                        <span class="hljs-comment"># print(i.split(&quot;预订&quot;)[1][14:].split(&quot;|N|&quot;)[0])</span><br>                        train_info = i.split(<span class="hljs-string">&quot;预订&quot;</span>)[<span class="hljs-number">1</span>][<span class="hljs-number">14</span>:].split(<span class="hljs-string">&quot;|N|&quot;</span>)[<span class="hljs-number">0</span>]<br>                        <span class="hljs-built_in">print</span>(train_info)<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-comment"># print(i.split(&quot;预订&quot;)[1][14:].split(&quot;|Y|&quot;)[0])</span><br>                        train_info = i.split(<span class="hljs-string">&quot;预订&quot;</span>)[<span class="hljs-number">1</span>][<span class="hljs-number">14</span>:].split(<span class="hljs-string">&quot;|Y|&quot;</span>)[<span class="hljs-number">0</span>]<br>                        <span class="hljs-built_in">print</span>(train_info)<br>                    info = remove_after_wm(<span class="hljs-built_in">str</span>((i.split(<span class="hljs-string">&quot;预订&quot;</span>)[<span class="hljs-number">1</span>][<span class="hljs-number">14</span>:]).split(<span class="hljs-string">&quot;2024&quot;</span>)[<span class="hljs-number">1</span>]))<br>                    <span class="hljs-comment"># print(info)</span><br>                    <span class="hljs-comment"># print(info[20:][:17])</span><br>                    <span class="hljs-built_in">print</span>(numbers)<br>                    <span class="hljs-built_in">print</span>(len_nums)<br>                    <span class="hljs-keyword">if</span> contains_number_or_you(info[<span class="hljs-number">20</span>:][:<span class="hljs-number">17</span>]):<br>                        <span class="hljs-built_in">print</span>(info)<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;有票啦！&quot;</span>)<br>                        email_info = train_info + <span class="hljs-string">&quot; &quot;</span> + info<br>                        <span class="hljs-keyword">if</span> email_info <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> email_alert:<br>                            email_alert.append(email_info)<br>                    <span class="hljs-keyword">if</span> numbers == len_nums:<br>                        <span class="hljs-comment"># 替换成表格</span><br>                        email_alert_update = list_to_html(email_alert)<br>                        <span class="hljs-comment"># print(email_alert_update)</span><br>                        <span class="hljs-comment"># print(type(email_alert_update))</span><br>                        <span class="hljs-keyword">if</span> user_focus_train:<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===================&quot;</span>)<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;用户开启了筛选火车发送邮件，当前选择的是<span class="hljs-subst">&#123;user_focus_train&#125;</span>&quot;</span>)<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===================&quot;</span>)<br>                            <span class="hljs-keyword">for</span> user_train <span class="hljs-keyword">in</span> user_focus_train:<br>                                <span class="hljs-keyword">for</span> train_single_info <span class="hljs-keyword">in</span> email_alert:<br>                                    <span class="hljs-keyword">if</span> user_train <span class="hljs-keyword">in</span> train_single_info:<br>                                        send_info_type = <span class="hljs-literal">True</span><br>                            <span class="hljs-keyword">if</span> send_info_type <span class="hljs-keyword">and</span> send_numbers == <span class="hljs-number">0</span>:<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===================&quot;</span>)<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;现在正在查看<span class="hljs-subst">&#123;address&#125;</span>,现在时间<span class="hljs-subst">&#123;now&#125;</span>&quot;</span>)<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;用户开启了筛选火车发送邮件，存在相同列车信息，将会发送邮件！&quot;</span>)<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===================&quot;</span>)<br>                                send_numbers = <span class="hljs-number">1</span><br>                                asyncio.run(send_mail(mail_body=<span class="hljs-string">f&quot;抢到了<span class="hljs-subst">&#123;time_info&#125;</span>,<span class="hljs-subst">&#123;address&#125;</span>的票<span class="hljs-subst">&#123;email_alert_update&#125;</span>&quot;</span>,<br>                                                      receivers=receivers))<br>                                email_alert.clear()<br><br>                            <span class="hljs-keyword">elif</span> send_numbers != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> send_info_type <span class="hljs-keyword">and</span> email_alert_delay_time:<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===================&quot;</span>)<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前设置了邮件发送延迟&quot;</span>)<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;现在正在查看<span class="hljs-subst">&#123;address&#125;</span>,现在时间<span class="hljs-subst">&#123;now&#125;</span>,定时清空列表时间<span class="hljs-subst">&#123;email_alert_delay_time&#125;</span>&quot;</span>)<br>                                <span class="hljs-built_in">print</span>(<br>                                    <span class="hljs-string">f&quot;当前用户开启了筛选火车发送邮件，存在相同列车信息, 但是在当前设置的延迟发送邮件中, 下次发送时间是<span class="hljs-subst">&#123;email_alert_delay_time&#125;</span>之后, 所以此次不会发送邮件！&quot;</span>)<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===================&quot;</span>)<br>                                email_alert.clear()<br>                                <span class="hljs-keyword">if</span> compare_time(now, email_alert_delay_time):<br>                                    email_alert.clear()<br>                                    send_numbers = <span class="hljs-number">0</span>  <span class="hljs-comment"># 专注火车列表发送次数归零</span><br>                                    <span class="hljs-comment"># send_all_numbers = 0  # 已经发送所有火车有票的记录</span><br>                                    <span class="hljs-comment"># send_email_all_type = True</span><br>                                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;清空列表,重新开始发送邮件&quot;</span>)<br>                                    asyncio.run(send_mail(mail_body=<span class="hljs-string">f&quot;抢到了<span class="hljs-subst">&#123;time_info&#125;</span>,<span class="hljs-subst">&#123;address&#125;</span>的票<span class="hljs-subst">&#123;email_alert_update&#125;</span>&quot;</span>,<br>                                                          receivers=receivers))<br>                                    email_alert_delay_time = delay_time(email_delay_time)<br>                                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;现在正在查看<span class="hljs-subst">&#123;address&#125;</span>,现在时间<span class="hljs-subst">&#123;now&#125;</span>,定时清空列表时间<span class="hljs-subst">&#123;email_alert_delay_time&#125;</span>&quot;</span>)<br>                            <span class="hljs-keyword">else</span>:<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===================&quot;</span>)<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;现在正在查看<span class="hljs-subst">&#123;address&#125;</span>,现在时间<span class="hljs-subst">&#123;now&#125;</span>&quot;</span>)<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;用户开启了筛选火车发送邮件，不存在相同列车信息，不会发送邮件！&quot;</span>)<br>                                email_alert.clear()<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===================&quot;</span>)<br>                        <span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> send_email_all_type <span class="hljs-keyword">and</span> send_all_numbers == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> email_alert_delay_time:<br>                            <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">                            首次发送全部有票的火车, 且当前存在邮件延迟发送时间设置</span><br><span class="hljs-string">                            &quot;&quot;&quot;</span><br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===================&quot;</span>)<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;首次发送全部有票的火车,当前设置了邮件发送延迟&quot;</span>)<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;现在正在查看<span class="hljs-subst">&#123;address&#125;</span>,现在时间<span class="hljs-subst">&#123;now&#125;</span>,定时清空列表时间<span class="hljs-subst">&#123;email_alert_delay_time&#125;</span>&quot;</span>)<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;====================&quot;</span>)<br>                            send_all_numbers += <span class="hljs-number">1</span><br>                            send_email_all_type = <span class="hljs-literal">True</span><br>                            asyncio.run(send_mail(mail_body=<span class="hljs-string">f&quot;抢到了<span class="hljs-subst">&#123;time_info&#125;</span>,<span class="hljs-subst">&#123;address&#125;</span>的票<span class="hljs-subst">&#123;email_alert_update&#125;</span>&quot;</span>,<br>                                                  receivers=receivers))<br>                            email_alert.clear()<br><br>                        <span class="hljs-keyword">elif</span> send_email_all_type <span class="hljs-keyword">and</span> send_all_numbers == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> email_alert_delay_time:<br>                            <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">                             当前存在邮件延迟发送时间设置</span><br><span class="hljs-string">                            &quot;&quot;&quot;</span><br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===================&quot;</span>)<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前设置了邮件发送延迟&quot;</span>)<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;现在正在查看<span class="hljs-subst">&#123;address&#125;</span>,现在时间<span class="hljs-subst">&#123;now&#125;</span>,定时清空列表时间<span class="hljs-subst">&#123;email_alert_delay_time&#125;</span>&quot;</span>)<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;====================&quot;</span>)<br>                            email_alert.clear()<br>                            <span class="hljs-keyword">if</span> compare_time(now, email_alert_delay_time):<br>                                email_alert.clear()<br>                                <span class="hljs-comment"># # send_numbers = 0  # 专注火车列表发送次数归零</span><br>                                <span class="hljs-comment"># send_all_numbers = 1  # 已经发送所有火车有票的记录</span><br>                                <span class="hljs-comment"># send_email_all_type = T  # 回到首次发送的状态</span><br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;清空列表,重新开始发送邮件&quot;</span>)<br>                                asyncio.run(send_mail(mail_body=<span class="hljs-string">f&quot;抢到了<span class="hljs-subst">&#123;time_info&#125;</span>,<span class="hljs-subst">&#123;address&#125;</span>的票<span class="hljs-subst">&#123;email_alert_update&#125;</span>&quot;</span>,<br>                                                      receivers=receivers))<br>                                email_alert_delay_time = delay_time(email_delay_time)<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;现在正在查看<span class="hljs-subst">&#123;address&#125;</span>,现在时间<span class="hljs-subst">&#123;now&#125;</span>,定时清空列表时间<span class="hljs-subst">&#123;email_alert_delay_time&#125;</span>&quot;</span>)<br><br>                        <span class="hljs-keyword">else</span>:<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===================&quot;</span>)<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;现在正在查看<span class="hljs-subst">&#123;address&#125;</span>,现在时间<span class="hljs-subst">&#123;now&#125;</span>&quot;</span>)<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前未设置延迟发送邮件,将即可发送邮件&quot;</span>)<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===================&quot;</span>)<br>                            asyncio.run(send_mail(mail_body=<span class="hljs-string">f&quot;抢到了<span class="hljs-subst">&#123;time_info&#125;</span>,<span class="hljs-subst">&#123;address&#125;</span>的票<span class="hljs-subst">&#123;email_alert_update&#125;</span>&quot;</span>,<br>                                                  receivers=receivers))<br>                            email_alert.clear()<br><br>                        numbers = <span class="hljs-number">0</span>  <span class="hljs-comment"># 控制整体的数目归零</span><br>                <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                    <span class="hljs-built_in">print</span>(e)<br>                    <span class="hljs-built_in">print</span>(remove_after_wm(<span class="hljs-built_in">str</span>((i.split(<span class="hljs-string">&quot;起售&quot;</span>)[<span class="hljs-number">1</span>][<span class="hljs-number">14</span>:]).split(<span class="hljs-string">&quot;2024&quot;</span>)[<span class="hljs-number">1</span>])))<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;12306接口请求失败, 状态码是<span class="hljs-subst">&#123;response.status_code&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><h3 id="多线程和多进程的选择"><a href="#多线程和多进程的选择" class="headerlink" title="多线程和多进程的选择"></a>多线程和多进程的选择</h3><p>刚开始我选择的是多线程，但是在实践中发现在传递信息的时候会发生  A 线路的信息 流转到了 B 线路中，后来查询资料发现，多线程的内存信息共享的可能会发生数据错乱，但是多进程是内存独立的不共享，此时在实现的时候选择了 进程池来实现！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    train_info 函数传递顺序(url, address, receivers, sleep_time, user_focus_train, email_delay_time)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    query_list = [<br>        (<br>            <span class="hljs-string">&quot;https://kyfw.12306.cn/otn/leftTicket/queryG?leftTicketDTO.train_date=2024-10-07&amp;leftTicketDTO.from_station=SJP&amp;leftTicketDTO.to_station=HDP&amp;purpose_codes=ADULT&quot;</span>,<br>            <span class="hljs-string">&quot;石家庄----&gt;邯郸&quot;</span>, [<span class="hljs-string">&quot;154418645@qq.com&quot;</span>, <span class="hljs-string">&quot;385521294@qq.com&quot;</span>], <span class="hljs-number">10</span>, [<span class="hljs-string">&#x27;K7734&#x27;</span>,<span class="hljs-string">&#x27;G543&#x27;</span>], (<span class="hljs-number">2</span>, <span class="hljs-number">1</span>)),  <span class="hljs-comment"># 到邯郸</span><br>        (<br>            <span class="hljs-string">&quot;https://kyfw.12306.cn/otn/leftTicket/queryG?leftTicketDTO.train_date=2024-10-07&amp;leftTicketDTO.from_station=SJP&amp;leftTicketDTO.to_station=XTP&amp;purpose_codes=ADULT&quot;</span>,<br>            <span class="hljs-string">&quot;石家庄----&gt;邢台&quot;</span>, [<span class="hljs-string">&quot;152418645@qq.com&quot;</span>, <span class="hljs-string">&quot;385521294@qq.com&quot;</span>], <span class="hljs-number">20</span>, [], (<span class="hljs-number">2</span>, <span class="hljs-number">2</span>))  <span class="hljs-comment"># 到邢台</span><br>    ]<br><br>    <span class="hljs-keyword">with</span> ProcessPoolExecutor(max_workers=<span class="hljs-number">2</span>) <span class="hljs-keyword">as</span> executor:<br>        <span class="hljs-comment"># 提交任务，每个任务都接收一个args元组，自动解包为多个参数</span><br>        futures = [executor.submit(train_info, *args) <span class="hljs-keyword">for</span> args <span class="hljs-keyword">in</span> query_list]<br>        <span class="hljs-comment"># 等待所有任务完成</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">for</span> future <span class="hljs-keyword">in</span> as_completed(futures):<br>                <span class="hljs-comment"># 处理可能的异常</span><br>                result = future.result()<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Received result: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;进程出错了<span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>上述代码采用了进程池的方式进行请求，最大设置了2个，可以自由设置，通过submit 将任务提交返回一个futures对象，然后我们需要看是否每个都完成了调用as_completed这个方法即可！</p><h2 id="效果查看"><a href="#效果查看" class="headerlink" title="效果查看"></a>效果查看</h2><p>运行后如下：</p><img src="/2024/10/08/12306%E4%BD%99%E7%A5%A8%E6%9F%A5%E8%AF%A2/12306_3.png" class=""><img src="/2024/10/08/12306%E4%BD%99%E7%A5%A8%E6%9F%A5%E8%AF%A2/12306_4.png" class=""><p>可以发现我们实现了我们上述的所有功能，下面看邮件效果：</p><img src="/2024/10/08/12306%E4%BD%99%E7%A5%A8%E6%9F%A5%E8%AF%A2/12306_5.png" class=""><p>可以看到邮箱收到了我们的邮件以及票务信息！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过编写这个脚本我也学到了很多知识，最大就是利用了进程池来实现，也感受到了多进程和多线程在使用上的差距，那么源码已经共享到github 地址是：<a href="https://github.com/dreamshao/12306">https://github.com/dreamshao/12306</a><br>在使用过程中，如果无法查询可以将接口请求的最新cookie替换一下本地接口请求的cookie，如果有更好的建议或者有疑问可以联系我哦！</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>效能工具</category>
      
      <category>12306 火车票余票查询脚本</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>12306 火车票余票查询脚本开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 并发编程之多线程由浅入深</title>
    <link href="/2024/09/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2024/09/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-并发编程之多线程由浅入深"><a href="#Python-并发编程之多线程由浅入深" class="headerlink" title="Python 并发编程之多线程由浅入深"></a>Python 并发编程之多线程由浅入深</h1><p>在python中我们想要了解并发编程，就要知道在并发编程这里我们包含了两部分一部分是多线程，一部分是多进程。那么你具体能知道它们的区别吗？一起来看看！</p><h2 id="线程与进程的区别"><a href="#线程与进程的区别" class="headerlink" title="线程与进程的区别"></a>线程与进程的区别</h2><p>一个进程是操作系统中运行的一个任务<br>    当前的操作系统基本都支持多进程的并发操作。<br>    进程拥有独立的CPU、内存等资源。</p><p>一个线程是一个进程中运行的一个任务<br>    一个进程中同样可以并发多个任务。<br>    线程之间共享进程的CPU、内存等资源。</p><p>看了上述描述，可能感觉还是蒙蒙的，总结来说： 多个进程中的内存 cpu等资源是独立的不分享的。线程是进程中的一个任务，线程之间的CPU、内存等资源都是共享的。</p><h2 id="代码解释多线程入门"><a href="#代码解释多线程入门" class="headerlink" title="代码解释多线程入门"></a>代码解释多线程入门</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>():<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        <span class="hljs-built_in">print</span>(j)<br><br>task()<br>task()<br><br></code></pre></td></tr></table></figure><p>那么我们上面的代码可以看出很简单，只是简单的创建了一个函数遍历了10，然后被调用2次， 输出结果为两次0-9，可以看出顺序和你调用输出是一致的，那么我想使用多线程改造这个函数怎么来呢？下面继续</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">numbers</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(numbers):<br>        <span class="hljs-built_in">print</span>(j)<br><br>thread1 = Thread(target=task,args=(<span class="hljs-number">10</span>,))<br>thread2 = Thread(target=task,args=(<span class="hljs-number">10</span>,))<br><br>thread1.start()<br>thread2.start()<br><br>thread1.join()<br>thread2.join()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;主线程结束了&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>此时可以看到我们导入了一个包就是从threading里面导入了Thread，这个就是python处理多线程的函数，其中target为目标函数此时传递我们要执行的函数，记住千万不能加()，join方法就是等待改线程结束，然后主线程才可以往下继续执行。args就是我们传入的参数的意思，这里要求的格式必须是元组。要执行对应的多线程直接调用start即可。</p><p>输出结果如下：</p><img src="/2024/09/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B1.png" class=""><p>可以看到一个奇怪的现象就是这个输出结果有点顺序不对了，有的9和其他的数字混在后面了，是因为线程是并行的所以有时候你无法控制哪一个线程先优先输出数据。</p><h2 id="代码解释线程进阶"><a href="#代码解释线程进阶" class="headerlink" title="代码解释线程进阶"></a>代码解释线程进阶</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTask</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, numbers</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <br>        self.setName(name) <span class="hljs-comment"># super 父类定义方法</span><br>        self.numbers = numbers<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.numbers):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.getName()&#125;</span> - <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br>            time.sleep(<span class="hljs-number">0.01</span>)<br><br><br>mythread1=ThreadTask(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-number">10</span>)<br>mythread2=ThreadTask(<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-number">10</span>)<br><br>mythread1.start()<br>mythread2.start()<br><br></code></pre></td></tr></table></figure><p>代码解释：从上述代码我们就可以看出我们这次写的是类而不是函数，那么我们是继承了Thread，然后在定义的<code>__init__</code>方法中我们初始化了父类的方法，其中setName() 用来展示线程的名字，这个是父类中已经有的函数。那么我们下面依旧是一个遍历和我们最初的是一样的。可以看到运行的结果如下：</p><img src="/2024/09/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B2.png" class=""><h2 id="守护线程是什么？"><a href="#守护线程是什么？" class="headerlink" title="守护线程是什么？"></a>守护线程是什么？</h2><p>下面我们来介绍一下什么是守护线程，守护线程就是主线程结束了守护线程也会结束，非守护线程就是主线程必须等非守护线程结束主线程才会结束。</p><h3 id="代码解释守护线程"><a href="#代码解释守护线程" class="headerlink" title="代码解释守护线程"></a>代码解释守护线程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTask</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, numbers</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <br>        self.setName(name) <span class="hljs-comment"># super 父类定义方法</span><br>        self.setDaemon(<span class="hljs-literal">True</span>) <span class="hljs-comment"># 守护线程设置</span><br>        self.numbers = numbers<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.numbers):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.getName()&#125;</span> - <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br>            time.sleep(<span class="hljs-number">0.01</span>)<br><br><br>mythread1=ThreadTask(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-number">10</span>)<br>mythread2=ThreadTask(<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-number">10</span>)<br><br>mythread1.start()<br>mythread2.start()<br></code></pre></td></tr></table></figure><p>代码解释：如果你是函数执行那么你在thread(task&#x3D;mytask,daemon&#x3D;True)的时候直接传入新的参数daemon&#x3D;True即可，就可以实现守护线程，如果是通过继承Thread的方式，那么在初始化的时候调用父类方法setDaemon(True)即可实现守护线程。那么运行程序可以看到如下：</p><img src="/2024/09/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B3.png" class=""><p>可以看到此时只是各自输出了0就结束了，因为此时主线程已经执行完毕，守护线程也会执行结束。</p><p>那么我们也可以增加join等待就可以实现等待守护线程执行完毕后在结束，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTask</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, numbers</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <br>        self.setName(name) <span class="hljs-comment"># super 父类定义方法</span><br>        self.setDaemon(<span class="hljs-literal">True</span>) <span class="hljs-comment"># 守护线程设置</span><br>        self.numbers = numbers<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.numbers):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.getName()&#125;</span> - <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br>            time.sleep(<span class="hljs-number">0.01</span>)<br><br><br>mythread1=ThreadTask(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-number">10</span>)<br>mythread2=ThreadTask(<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-number">10</span>)<br><br>mythread1.start()<br>mythread2.start()<br><br>mythread1.join()<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><img src="/2024/09/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B4.png" class=""><h3 id="守护线程的应用场景"><a href="#守护线程的应用场景" class="headerlink" title="守护线程的应用场景"></a>守护线程的应用场景</h3><p>守护线程一般用在非关键性的线程，如日志、无关紧要的逻辑等都可以在主线程结束后也理解停止运行。</p><h2 id="线程安全队列"><a href="#线程安全队列" class="headerlink" title="线程安全队列"></a>线程安全队列</h2><p>从现在开始我们描述一个新的概念是队列，之所以在这里讲这个，是因为我们的线程是不安全的！因为我们的线程有可能发生多个线程的混乱。那么我们期望我们的是一个完整的有序的，就用到了我们的线程安全队列。</p><p>假如：我们有两个线程一个用来放，一个用来取，如果此时线程先运行了取后面才运行了放，那么就会发生问题，因为取不到，就是不安全的！</p><p>那么在python中的queue中的模块Queue就提供了线程安全队列的功能，我们可以一起来使用！</p><h3 id="队列里面的一些方法"><a href="#队列里面的一些方法" class="headerlink" title="队列里面的一些方法"></a>队列里面的一些方法</h3><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>queue.put(item,block&#x3D;False)</td><td>队列放入元素的时候如果满了则会抛出异常，改为True则会一直等待下去</td></tr><tr><td>queue.put(item,timeout&#x3D;3)</td><td>队列放入元素满了则会等待3秒，超过3秒抛出异常</td></tr><tr><td>queue.get(block&#x3D;False)</td><td>队列获取元素的时候如果为空则会抛出异常，改为Treu则会一直等待下去</td></tr><tr><td>queue.get(timeout&#x3D;3)</td><td>队列获取元素空了则会等待3秒，超过3秒抛出异常</td></tr><tr><td>queue.qsize()</td><td>队列长度</td></tr><tr><td>queue.empty()</td><td>队列是否为空</td></tr><tr><td>queue.full()</td><td>队列是否已经放满了</td></tr></tbody></table><h3 id="队列代码生产者消费者"><a href="#队列代码生产者消费者" class="headerlink" title="队列代码生产者消费者"></a>队列代码生产者消费者</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageProducer</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, numbers, queue</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <br>        self.setName(name)<br>        self.numbers=numbers<br>        self.queue = queue<br>    <br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.numbers):<br>            message = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.getName()&#125;</span> - <span class="hljs-subst">&#123;n&#125;</span>&quot;</span><br>            self.queue.put(message, block=<span class="hljs-literal">True</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageConsumer</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name,  queue</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <br>        self.setName(name)<br>        self.setDaemon=<span class="hljs-literal">True</span><br>        self.queue = queue<br>    <br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            message = self.queue.get(block=<span class="hljs-literal">True</span>)<br>            <span class="hljs-built_in">print</span>( <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.getName()&#125;</span> - <span class="hljs-subst">&#123;message&#125;</span>\n&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br><br>queue = Queue(<span class="hljs-number">3</span>)<br>threads = <span class="hljs-built_in">list</span>()<br>threads.append(MessageProducer(<span class="hljs-string">&quot;PA&quot;</span>,<span class="hljs-number">10</span>,queue))<br>threads.append(MessageProducer(<span class="hljs-string">&quot;PB&quot;</span>,<span class="hljs-number">10</span>,queue))<br>threads.append(MessageProducer(<span class="hljs-string">&quot;PC&quot;</span>,<span class="hljs-number">10</span>,queue))<br><br>threads.append(MessageConsumer(<span class="hljs-string">&quot;CA&quot;</span>,queue))<br>threads.append(MessageConsumer(<span class="hljs-string">&quot;CB&quot;</span>,queue))<br><br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>    t.start()<br>            <br></code></pre></td></tr></table></figure><p>代码解释：在上述代码中我们创建了一个生成消息的生产者，创建了一个消费消息的消费者，其中在生产者中，我们除了之前的代码我们新增了一个queue，也就是一个队列，此时我们也引入了Queue,那么我们在run方法中呢多了一个将消息放入到队列中，其中我们用到了put方法，这个在上面的方法介绍中也写到了。</p><p>然后我们在消费者这里也是声明了一个queue，然后我们声明了我们的线程是守护线程，之所以声明是守护线程因为我们要用while true的方式去数据，一旦主线程结束那么我们的线程也需要结束否则会死循环。这里我们也使用了get方法，在我们的上面也同样介绍了该方法，然后我们打印了消费者的线程名称以及生产者的线程名称和放入的数据！</p><p>那么我们后面声明了一个队列，队列的长度是3，我们写了一个列表将生产者写了3个线程，消费者写了2个进程，这样我们就可以看到两个消费者和生产者之前的争夺关系！运行结果如下：</p><img src="/2024/09/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B5.png" class=""><h2 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h2><p>首先我们来看什么事线程锁以及为何需要线程锁，当多个线程在同一时刻访问相同的数据时可能会产生数据丢失，覆盖，不完整等问题。那么线程锁就是用来解决这个问题的重要手段！</p><h3 id="代码解释线程争夺"><a href="#代码解释线程争夺" class="headerlink" title="代码解释线程争夺"></a>代码解释线程争夺</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> -round <span class="hljs-subst">&#123;i&#125;</span>- stpe 1&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> -round <span class="hljs-subst">&#123;i&#125;</span>- stpe 2&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> -round <span class="hljs-subst">&#123;i&#125;</span>- stpe 3&quot;</span>)<br><br>t1=Thread(target=task,args=(<span class="hljs-string">&quot;A&quot;</span>,))<br>t2=Thread(target=task,args=(<span class="hljs-string">&quot;B&quot;</span>,))<br>t3=Thread(target=task,args=(<span class="hljs-string">&quot;C&quot;</span>,))<br><br>t1.start()<br>t2.start()<br>t3.start()<br></code></pre></td></tr></table></figure><p>代码解释：上述代码中我们声明了一个task函数其中遍历3次打印传入的名字，这里我们声明了3个线程然后调用start运行，结果如下：</p><img src="/2024/09/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B6.png" class=""><p>可以看出本应该是按顺序打印的但是我们还是发现了A B C的顺序不一致的情况，假如是一个需要按照顺序的写操作则会带来致命的麻烦！</p><h3 id="代码解释加锁"><a href="#代码解释加锁" class="headerlink" title="代码解释加锁"></a>代码解释加锁</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread, Lock<br><br><br>lock = Lock()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">global</span> lock<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        lock.acquire()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> -round <span class="hljs-subst">&#123;i&#125;</span>- stpe 1&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> -round <span class="hljs-subst">&#123;i&#125;</span>- stpe 2&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> -round <span class="hljs-subst">&#123;i&#125;</span>- stpe 3&quot;</span>)<br>        lock.release()<br><br>t1=Thread(target=task,args=(<span class="hljs-string">&quot;A&quot;</span>,))<br>t2=Thread(target=task,args=(<span class="hljs-string">&quot;B&quot;</span>,))<br>t3=Thread(target=task,args=(<span class="hljs-string">&quot;C&quot;</span>,))<br><br>t1.start()<br>t2.start()<br>t3.start()<br></code></pre></td></tr></table></figure><p>代码解释：这里我们首先解释Lock(),也是在threading中给我们提供的方法，用来实现获取锁，使得线程可以按照首次运行时候的顺序执行，但是需要注意的是我们这里写了一个acuire() 就是上锁，release()就是释放锁，但是需要注意：当锁释放后，不会按照我们的顺序到第二个去拿锁，因为此时谁会拿到锁是随机的，是操作系统进行分配的，这里依旧是一个随机的顺序！执行结果如下：</p><img src="/2024/09/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B7.png" class=""><h3 id="代码解释手动编写安全队列利用锁"><a href="#代码解释手动编写安全队列利用锁" class="headerlink" title="代码解释手动编写安全队列利用锁"></a>代码解释手动编写安全队列利用锁</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread, Lock, Condition<br><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">safeQueue</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, size</span>):<br>        self.__item_list = <span class="hljs-built_in">list</span>()<br>        self.size = size<br>        sefl.__item_lock = Condition()<br>        <br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">self,item</span>):<br>        <span class="hljs-comment">#self.__item_lock.acquire()</span><br>        <span class="hljs-keyword">with</span> self._item_lock：<br>            <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(self.__item_list) &gt;= self.size:<br>                self.__item_lock.wait() <span class="hljs-comment"># 如果当前满了等待队列空出，因为是随机的叫醒，还需要判断是否满折</span><br>            <br>            self.__item_list.insert(<span class="hljs-number">0</span>, item)<br>            self.__item_lock.notify_all() <span class="hljs-comment"># 当前取出一个后通知所有有所的</span><br>            <span class="hljs-comment"># self.__item_lock.release()</span><br>            <br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-comment"># self.__item_lock.acquire</span><br>        <span class="hljs-keyword">with</span> self._item_lock：<br>            <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(self.__item_list) == <span class="hljs-number">0</span>:<br>                 self.__item_lock.wait() <span class="hljs-comment"># 当前队列为空等待，因为是随机的叫醒，还需要判断是否为空</span><br>            <br>            result = self.__item_list.pop()<br>            self.__item_lock.notify_all() <span class="hljs-comment"># 当前取出一个后通知所有有所的</span><br>            <span class="hljs-comment"># self.__item_lock.release()</span><br>        <br>        <span class="hljs-keyword">return</span> result<br>        <br></code></pre></td></tr></table></figure><p>代码解释：这里我们可以看到我们声明了一个类，这里在初始化的时候声明了一个list，一个size,一把锁注意这里的锁用的是Condtition，不是上面的Lock。这里的Condition()里面有这么几个方法：wait() 如果锁需要等待通知后才会运行， notify_all() 用于通知wait()这里是通知所有的锁，因为如果是notify是只会通知一把锁，也是随机的，这里通知所有的锁是为了避免通知到不是需要的锁。</p><p>那么我们这里依旧是写了一个队列的放入和取出的逻辑，其中在put逻辑中，我们首先是加了一把锁，因为我们进来的时候需要让其他的先等待，然后我们判断当前的队列的长度是否满了，如果满了就wait,此时在get中有一个notify_all的操作就是我们取出了就会通知所有锁可以醒来了，之所以这里使用的是while,是因为我们的锁可能醒来的不是对的，所以要每次都校验一遍！然后放入list中的第一个位置。</p><p>在get逻辑中我们也是先加了一把锁，然后校验list的长度是否为0，如果为0则会执行wait等待，然后我们在Put方法中依旧有一个notify_all的通知，就是我们放入一个元素就通知给get然后也是通知所有的锁，也是进行了while的校验，和上面put锁的机制是一样的！</p><p>在锁这里是支持上下文操作的，所以我们只需要执行 with self._item_lock：在结束的时候会自动执行释放锁的操作！</p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>在了解线程池之前，我们可以来看一下在创建线程的时候我们要付出的代价有多大！</p><p>1.线程的创建和销毁相对比较昂贵</p><p>2.频繁的创建和销毁线程不利于高性能</p><p>线程池是一个可以便于管理和提高性能，也就是一个非常好的管理线程的工具！</p><h3 id="代码解释创建线程池"><a href="#代码解释创建线程池" class="headerlink" title="代码解释创建线程池"></a>代码解释创建线程池</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> -step 1&quot;</span>)<br>    time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> -step 2&quot;</span>)<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> complete&quot;</span><br>    <br><br><span class="hljs-keyword">with</span> ThreadPoolExecutor() <span class="hljs-keyword">as</span> executor:<br>    re1 = executor.submit(task, <span class="hljs-string">&#x27;A&#x27;</span>)<br>    re2 = executor.submit(task, <span class="hljs-string">&#x27;B&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(re1.result()) <span class="hljs-comment"># 等待有结果的时候返回</span><br>    <span class="hljs-built_in">print</span>(re2.result()) <span class="hljs-comment"># 等待有结果的时候返回</span><br>    <br></code></pre></td></tr></table></figure><p>代码解释：首先我们引入了线程池 from concurrent.futures import ThreadPoolExecutor，然后我们创建了一个task函数，可以传递一个name作为打印信息，后面return 回去这个name,因为线程池是支持上下文管理器的，所以我们写了一个上下文管理器来创建线程池，submit()用来提交一个线程，result() 用来获取返回值，reuslt会等待有结果的时候才返回！结果如下</p><img src="/2024/09/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B8.png" class=""><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> -step 1&quot;</span>)<br>    time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> -step 2&quot;</span>)<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> complete&quot;</span><br>    <br><br><span class="hljs-keyword">with</span> ThreadPoolExecutor() <span class="hljs-keyword">as</span> executor:<br>    results = executor.<span class="hljs-built_in">map</span>(task, [<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> results:<br>        <span class="hljs-built_in">print</span>(i)<br>    <br></code></pre></td></tr></table></figure><p>代码解释：这里我们改造了使用map()提交，主要用于我们同一个函数，传递不同的值这样我们就可以很方便不需要每次的submit,只需要这样写就可以达到同样的效果。运行结果如下：</p><img src="/2024/09/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B9.png" class=""><h3 id="代码解释下载图片利用线程池"><a href="#代码解释下载图片利用线程池" class="headerlink" title="代码解释下载图片利用线程池"></a>代码解释下载图片利用线程池</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor<br><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen, Request<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download_img</span>(<span class="hljs-params">url</span>)<br>    headers = &#123;<br>        <span class="hljs-string">&quot;user-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36&quot;</span><br>    &#125;<br>    <br>    site_url = Reuqest(url, headers=headers)<br>    <span class="hljs-keyword">with</span> urlopen(site_url) <span class="hljs-keyword">as</span> web_file:<br>        img_data = web_file.read()<br>    <br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> img_data:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">f&quot;Error: download error from <span class="hljs-subst">&#123;url&#125;</span> &quot;</span>)<br>    <br>    file_name = os.path.basename(url)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_name, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> file:<br>        file.write(img_data)<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Download image successfully, <span class="hljs-subst">&#123;url&#125;</span>&quot;</span><br>    <br><br><span class="hljs-keyword">with</span> ThreadPoolExecutor() <span class="hljs-keyword">as</span> executor:<br>    urls = &#123;<br>        <span class="hljs-string">&quot;demourl&quot;</span>,<br>        <span class="hljs-string">&quot;demourl&quot;</span>,<br>         <span class="hljs-string">&quot;demourl&quot;</span><br>    &#125;<br>    <br>    results = executor.<span class="hljs-built_in">map</span>(download_img, urls)<br>    <span class="hljs-keyword">for</span> res <span class="hljs-keyword">in</span> results:<br>        <span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><p>代码解释：这里我们是写一个下载图片的案例，首先我们引入了urlopen, Request这里不再讲述相关库的介绍，感兴趣可以自行查询，然后我们也是做了对应的请求，然后存储到本地，这里urls 可以使用你们找到的图片网址，然后我们使用线程池来实现下载即可，这里和上述没啥区别，更多的是有了具象化的感觉。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们这次虽然文字众多，但是我们从线程和进程的区分到线程的每一步进阶，到队列，锁，线程池等完全覆盖所有线程相关的重要知识点，希望各位同学都可以把握这些重要的知识点，对我们的工作将会有很大的帮助!</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 并发编程多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chrome调试webview</title>
    <link href="/2024/09/10/chrome%E8%B0%83%E8%AF%95webview/"/>
    <url>/2024/09/10/chrome%E8%B0%83%E8%AF%95webview/</url>
    
    <content type="html"><![CDATA[<h1 id="如何在Chrome上调试WebView"><a href="#如何在Chrome上调试WebView" class="headerlink" title="如何在Chrome上调试WebView"></a>如何在Chrome上调试WebView</h1><p>有时候在测试过程中，我们会遇见在app或者ios上面跳转wap页面的需求，常见在日常的活动页面等。如果要是这些页面出了问题该怎么办呢？例如我们平常的wap页面可以通过调试工具查看console或者debug等来查看问题，那么这样的在手机端怎么来调试呢？下面一起学习吧！</p><h2 id="详细调试过程"><a href="#详细调试过程" class="headerlink" title="详细调试过程"></a>详细调试过程</h2><p>1.这时候我们只需要将手机通过usb线连接到电脑上面，然后打开chrome，输入网址：chrome:&#x2F;&#x2F;inspect&#x2F;#devices  就可以看到：</p><img src="/2024/09/10/chrome%E8%B0%83%E8%AF%95webview/chrome%E8%B0%83%E8%AF%951.png" class=""><p>2.稍等一下，这时候手机会提示是否允许调试，那么你点击允许调试即可！然后就可以看到手机的型号此时连接成功！</p><img src="/2024/09/10/chrome%E8%B0%83%E8%AF%95webview/chrome%E8%B0%83%E8%AF%952.png" class=""><p>3.打开你的app，打开webview此时就可以看到对应的信息！</p><img src="/2024/09/10/chrome%E8%B0%83%E8%AF%95webview/chrome%E8%B0%83%E8%AF%953.png" class=""><p>4.此时点击inspect</p><img src="/2024/09/10/chrome%E8%B0%83%E8%AF%95webview/chrome%E8%B0%83%E8%AF%954.png" class=""><p>此时就看到了和我们平常调试网页一样的界面，那么你就可以按照调试网页的方式来调试webview了！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过这个调试方式我们可以轻松应对在测试中面临的webview的问题定位，方便了我们的工作！</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Chrome调试</category>
      
      <category>Chrome调试webview</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Chrome调试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python reduce函数</title>
    <link href="/2024/09/04/pythonreduce%E5%87%BD%E6%95%B0/"/>
    <url>/2024/09/04/pythonreduce%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-reduce-函数介绍"><a href="#Python-reduce-函数介绍" class="headerlink" title="Python reduce 函数介绍"></a>Python reduce 函数介绍</h1><p>reduce() 函数是 Python 中的一个内置高阶函数，于对序列（如列表、元组等）中的元素进行累积操作。reduce() 函数会对参数序列中元素进行迭代，用指定的函数对两个元素（左参数和右参数）进行某种操作，然后将结果和序列中的下一个元素做同样的操作，直到遍历完序列中的所有元素，最终返回累积的结果。那么下面就进行代码解释</p><h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce  <br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> x + y<br><br>number_list = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>sum_info = reduce(add,number_list)<br><span class="hljs-built_in">print</span>(sum_info) <span class="hljs-comment"># 15</span><br></code></pre></td></tr></table></figure><p>代码解释：我们定义了一个函数，实现了一个简单的加法运算，但是如果我们想传入一个数字list求和呢？就可以像上面我们写的通过reduce将函数和list传入reduce函数，那么就可以实现将其list中的数字进行求和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce  <br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> x + y<br><br>number_list = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>sum_info = reduce(add,number_list)<br><span class="hljs-built_in">print</span>(sum_info) <span class="hljs-comment"># 20</span><br></code></pre></td></tr></table></figure><p>代码解释： 这个就是将加法改成了乘法依然适用！</p><h2 id="代码解释-lambda函数"><a href="#代码解释-lambda函数" class="headerlink" title="代码解释 lambda函数"></a>代码解释 lambda函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce  <br><br>number_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]  <br>sum_info = reduce(<span class="hljs-keyword">lambda</span> x, y: x + y, number_list)  <br><span class="hljs-built_in">print</span>(sum_info)  <span class="hljs-comment"># 输出: 15</span><br></code></pre></td></tr></table></figure><p>代码解释： 虽然我们上面实现了一个加法，但是总体比较臃肿，我们可以借助lambda函数实现一行代码搞定，我们可以看到reduce依旧传入了一个函数和一个list。lambda 函数 lambda x, y: x + y 被用作 reduce() 的第一个参数，它接受两个参数并返回它们的和，numbers 列表作为第二个参数传递给 reduce()，reduce() 函数会依次将列表中的元素相加，最终返回总和。乘法或者其他都一样只需改运算符即可！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1.reduce() 函数在处理大型数据集时可能会比较慢，因为它需要遍历整个序列。</p><p>2.在很多情况下，使用列表推导式、循环或其他内置函数（如 sum()）可能更加直观和高效。</p><p>3.reduce() 函数的主要优势在于其通用性和灵活性，它允许你通过自定义函数来执行几乎任何类型的累积操作。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python reduce函数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python的property属性</title>
    <link href="/2024/09/02/python%E7%9A%84property%E5%B1%9E%E6%80%A7/"/>
    <url>/2024/09/02/python%E7%9A%84property%E5%B1%9E%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="Python的property属性讲解"><a href="#Python的property属性讲解" class="headerlink" title="Python的property属性讲解"></a>Python的property属性讲解</h1><p>当我们在编程类的时候假如我们想做到一些限制，例如这个类型的不允许修改，虽然可以通过函数逻辑处理进行达到目的，但是我们可以通过python自带的property属性做到哦！</p><h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><p>假如我们要写一个关于金额的限制，这里首先限制关于假如我们的密码这里不允许更改，当然只是举例子，现实肯定是可以修改的！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">user_account</span>:<br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">password</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;密码：123456&quot;</span><br><br>xiaoming = user_account()<br><span class="hljs-built_in">print</span>(xiaoming.password)<br></code></pre></td></tr></table></figure><p>代码解释： 运行上述代码 我们定义了一个user_account类，这个类里的一个password方法里面retrun 了一个字符串，假如此时运行程序我们会发现输出了密码：123456，下一步我们进行修改我们的password。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">user_account</span>:<br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">password</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;密码：123456&quot;</span><br><br>xiaoming = user_account()<br><span class="hljs-built_in">print</span>(xiaoming.password)<br>xiaoming.password = <span class="hljs-string">&quot;密码：123456abcd&quot;</span><br><span class="hljs-built_in">print</span>(xiaoming.password)<br></code></pre></td></tr></table></figure><p>代码解释：此时我们想要将 <code>密码：123456</code> 改为 <code>密码：123456abc</code>。但是运行程序后报错了，报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">ERROR!<br>密码：123456<br>Traceback (most recent call last):<br>  File &quot;&lt;main.py&gt;&quot;, line 8, in &lt;module&gt;<br>AttributeError: property &#x27;password&#x27; of &#x27;user_account&#x27; object has no setter<br></code></pre></td></tr></table></figure><p>提示我们无法修改这个内存变量password，那么为什么呢？是因为我们如果使用了@property 属性此时这个变量就变成了只读的，不可以被修改，这样我们就做到了无法修改密码的要求，但是现实是需要修改的，我们又不想随意修改，那么我们可以引进新的概念！</p><h2 id="setter、getter-和-deleter-方法"><a href="#setter、getter-和-deleter-方法" class="headerlink" title="setter、getter 和 deleter 方法"></a>setter、getter 和 deleter 方法</h2><p>那么在这里我们有setter, getter, deleter方法，其中setter 是在@property属性里面可以进行修改， getter是获取， deleter是删除，可能各位同学听起来还是晕晕的，那么我们就直接进入正题代码解惑！</p><h3 id="代码解释-getter"><a href="#代码解释-getter" class="headerlink" title="代码解释 getter"></a>代码解释 getter</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">user_account</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>            self._password = ‘初始密码 <span class="hljs-number">123456</span>’<br>     <br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">password</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;如果您是首次访问系统，初始密码是123456，请您及时修改您的密码，避免被盗！&quot;</span>)<br>        <span class="hljs-keyword">return</span> self._password<br> <br><span class="hljs-meta">    @password.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">password</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前您正在进行修改密码的操作，请注意周围安全！&quot;</span>)<br>        self._password = value<br> <br><span class="hljs-meta">    @password.deleter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">password</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前您正在进行删除密码的操作，请慎重！&quot;</span>)<br>        <span class="hljs-keyword">del</span> self._password<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;del complite&#x27;</span>)<br><br><br>xiaoming = user_account()<br>xiaoming.password  <span class="hljs-comment"># 如果您是首次访问系统，初始密码是123456，请您及时修改您的密码，避免被盗！</span><br><br></code></pre></td></tr></table></figure><p>代码解释： 此处我们声明了一个类，此时写了四个方法，第一个是初始化了我们的密码，第而个是和上面一样的声明了@property属性，第二个是setter， 第三个是deleter 方法。</p><p>此处我们要说的是getter方法，我们下面写的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">xiaoming = user_account()<br>xiaoming.password  <span class="hljs-comment"># getter 方法</span><br></code></pre></td></tr></table></figure><p>就是一个getter方法用来获取我们的密码信息。</p><h3 id="代码解释-setter"><a href="#代码解释-setter" class="headerlink" title="代码解释 setter"></a>代码解释 setter</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">user_account</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>            self._password = ‘初始密码 <span class="hljs-number">123456</span>’<br>     <br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">password</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;如果您是首次访问系统，初始密码是123456，请您及时修改您的密码，避免被盗！&quot;</span>)<br>        <span class="hljs-keyword">return</span> self._password<br> <br><span class="hljs-meta">    @password.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">password</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前您正在进行修改密码的操作，请注意周围安全！&quot;</span>)<br>        self._password = value<br> <br><span class="hljs-meta">    @password.deleter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">password</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前您正在进行删除密码的操作，请慎重！&quot;</span>)<br>        <span class="hljs-keyword">del</span> self._password<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;del complite&#x27;</span>)<br><br><br>xiaoming = user_account()<br>xiaoming.password  <br><br>xiaoming.password = <span class="hljs-string">&quot;123456abc&quot;</span> <span class="hljs-comment"># setter</span><br><span class="hljs-built_in">print</span>(xiaoming.password) <br><br><span class="hljs-comment"># 输出结果</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">当前您正在进行修改密码的操作，请注意周围安全！</span><br><span class="hljs-string">如果您是首次访问系统，初始密码是123456，请您及时修改您的密码，避免被盗！</span><br><span class="hljs-string">123456abc</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br></code></pre></td></tr></table></figure><p>这里我们使用的就是setter方法，可以发现我们在最开始的无法修改密码，到现在可以修改成功了就是我们的setter方法实现的！</p><h3 id="代码解释-deleter"><a href="#代码解释-deleter" class="headerlink" title="代码解释 deleter"></a>代码解释 deleter</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">user_account</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>            self._password = ‘初始密码 <span class="hljs-number">123456</span>’<br>     <br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">password</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;如果您是首次访问系统，初始密码是123456，请您及时修改您的密码，避免被盗！&quot;</span>)<br>        <span class="hljs-keyword">return</span> self._password<br> <br><span class="hljs-meta">    @password.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">password</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前您正在进行修改密码的操作，请注意周围安全！&quot;</span>)<br>        self._password = value<br> <br><span class="hljs-meta">    @password.deleter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">password</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前您正在进行删除密码的操作，请慎重！&quot;</span>)<br>        <span class="hljs-keyword">del</span> self._password<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;删除密码成功！&#x27;</span>)<br><br><br>xiaoming = user_account()<br>xiaoming.password  <span class="hljs-comment"># getter 方法</span><br><br>xiaoming.password = <span class="hljs-string">&quot;123456abc&quot;</span><br><span class="hljs-built_in">print</span>(xiaoming.password) <span class="hljs-comment">#setter 方法</span><br><br><span class="hljs-keyword">del</span> xiaoming.password<br><span class="hljs-built_in">print</span>(xiaoming.password) <span class="hljs-comment"># deleter方法 出错 提示无当前变量信息因为已经删除</span><br><br><span class="hljs-comment"># 输出信息</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">如果您是首次访问系统，初始密码是123456，请您及时修改您的密码，避免被盗！</span><br><span class="hljs-string">当前您正在进行修改密码的操作，请注意周围安全！</span><br><span class="hljs-string">如果您是首次访问系统，初始密码是123456，请您及时修改您的密码，避免被盗！</span><br><span class="hljs-string">123456abc</span><br><span class="hljs-string">当前您正在进行删除密码的操作，请慎重！</span><br><span class="hljs-string">删除密码成功！</span><br><span class="hljs-string">如果您是首次访问系统，初始密码是123456，请您及时修改您的密码，避免被盗！</span><br><span class="hljs-string">ERROR!</span><br><span class="hljs-string">Traceback (most recent call last):</span><br><span class="hljs-string">  File &quot;&lt;main.py&gt;&quot;, line 29, in &lt;module&gt;</span><br><span class="hljs-string">  File &quot;&lt;main.py&gt;&quot;, line 8, in password</span><br><span class="hljs-string">AttributeError: &#x27;user_account&#x27; object has no attribute &#x27;_password&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>那么上面就是deleter 方法，此时我们可以看到我们进行了删除密码的操作，这样的话我们就完成了所有的信息。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>由此可见使用属性的一些好处例如：</p><p>1.封装：属性提供了一种封装数据的方式，隐藏了数据实现的细节，只暴露访问和修改数据的接口。</p><p>2.验证：在设置属性值时，你可以执行验证逻辑，确保数据的有效性。</p><p>3.灵活性：属性的实现可以更改，而不需要更改使用这些属性的代码。</p><p>4.接口一致性：通过使用属性，你可以让类的接口看起来更像是数据访问，而不是方法调用，这对于不熟悉Python的开发者来说可能更直观。</p><p>但是，也是存在一些弊端问题例如：</p><p>1.虽然属性提供了一种强大的方式来控制数据的访问，但过度使用可能会使代码难以理解和维护。</p><p>2.在某些情况下，直接使用公有变量或私有变量加方法访问可能更为简单和直观。</p><p>3.在设计类的接口时，要仔细考虑哪些数据应该暴露为属性，哪些应该保持私有。</p><p>那么，各位同学你掌握了吗？</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 的property属性</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python函数指定必须带形参传递</title>
    <link href="/2024/08/28/python%E6%8C%87%E5%AE%9A%E5%8F%82%E6%95%B0/"/>
    <url>/2024/08/28/python%E6%8C%87%E5%AE%9A%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-函数指定参数必须带形参传递"><a href="#Python-函数指定参数必须带形参传递" class="headerlink" title="Python 函数指定参数必须带形参传递"></a>Python 函数指定参数必须带形参传递</h1><p>可能大家看到这个标题很难理解是什么意思，这里给大家解释一下，就是我们定义函数的时候，会用形参的设置，有时候呢，我们只需要按照顺序传递值就行，不需要在传递的时候指定形参的名字，但是有时候公司要求必须带，但是有的人忘记了怎么办？那么python其实是可以做到不传递就报错的，那么一起来看看怎么实现吧！</p><h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">t,y</span>):<br>    <span class="hljs-keyword">return</span> t,y<br>    <br>result=test(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(result)  <span class="hljs-comment"># (1, 2)</span><br></code></pre></td></tr></table></figure><p>这里呢就是虽然我们设置了形参t, y 但是你传递的时候可以只是按照顺序即可，无需使用test(t&#x3D;1,y&#x3D;2)的方式，那么python如何强制使用呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">*,t,y</span>):<br>    <span class="hljs-keyword">return</span> t,y<br>    <br>result=test(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p>此时你发现，我在函数定义的时候加了一个*,那么python 就会要去你必须在调用函数的时候带上形参要不然就报错，运行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">ERROR!<br>Traceback (most recent call last):<br>  File &quot;&lt;main.py&gt;&quot;, line 4, in &lt;module&gt;<br>TypeError: test() takes 0 positional arguments but 2 were given<br><br></code></pre></td></tr></table></figure><p>那么我们来修改这个，让其正确运行！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">*,t,y</span>):<br>    <span class="hljs-keyword">return</span> t,y<br>    <br>result=test(t=<span class="hljs-number">1</span>,y=<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(result) <span class="hljs-comment"># (1, 2)</span><br></code></pre></td></tr></table></figure><p>那么，这样就可以了！python实现起来就是这么的简单方便！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在我们平常要求中可能会有类似的，如果你知道了这个，就无需在注释中强调编码风格，这样就可以强制其他同事按照这个方式实现！</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 函数指定必须带形参传递</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jmeter之Jdbc请求</title>
    <link href="/2024/08/20/jdbc%E8%AF%B7%E6%B1%82jmeter/"/>
    <url>/2024/08/20/jdbc%E8%AF%B7%E6%B1%82jmeter/</url>
    
    <content type="html"><![CDATA[<h1 id="Jmeter之Jdbc并发请求"><a href="#Jmeter之Jdbc并发请求" class="headerlink" title="Jmeter之Jdbc并发请求"></a>Jmeter之Jdbc并发请求</h1><p>在Jmeter中我们可以使用多种请求协议，其中就包含我们的数据库的压力测试，那么今天就介绍如何通过Jmeter连接mysql进行测试。</p><h2 id="下载jdbc-连接driver"><a href="#下载jdbc-连接driver" class="headerlink" title="下载jdbc 连接driver"></a>下载jdbc 连接driver</h2><p>首先是查看自己mysql的版本，我的是8.0.19，执行命令select version() 即可查看，那么我们就从网上下载我们的driver。</p><p>然后将我们下载好的driver放到jmeter的lib下的ext中。</p><img src="/2024/08/20/jdbc%E8%AF%B7%E6%B1%82jmeter/jdbc.png" class=""><h2 id="添加jdbc配置原件"><a href="#添加jdbc配置原件" class="headerlink" title="添加jdbc配置原件"></a>添加jdbc配置原件</h2><img src="/2024/08/20/jdbc%E8%AF%B7%E6%B1%82jmeter/config.png" class=""><h2 id="添加jdbc请求"><a href="#添加jdbc请求" class="headerlink" title="添加jdbc请求"></a>添加jdbc请求</h2><img src="/2024/08/20/jdbc%E8%AF%B7%E6%B1%82jmeter/request.png" class=""><h2 id="添加结果树"><a href="#添加结果树" class="headerlink" title="添加结果树"></a>添加结果树</h2><img src="/2024/08/20/jdbc%E8%AF%B7%E6%B1%82jmeter/result.png" class=""><p>这时候我们可以看到我们这边请求成功了！</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>一些注意的配置项放在这里</p><p>DatabaseUrl:jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;ui_auto?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&amp;serverTimezone&#x3D;UTC</p><p>Jdbc Driver class: com.mysql.jdbc.Driver</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上述的讲解我相信同学已经会了连接mysql，那么其他的数据库也是一样的道理！</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Jmeter</category>
      
      <category>Jmeter之Jdbc请求</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Jmeter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>招聘</title>
    <link href="/2024/08/17/%E6%8B%9B%E8%81%98/"/>
    <url>/2024/08/17/%E6%8B%9B%E8%81%98/</url>
    
    <content type="html"><![CDATA[<h1 id="本公司招聘测试职位"><a href="#本公司招聘测试职位" class="headerlink" title="本公司招聘测试职位"></a>本公司招聘测试职位</h1><p>职位描述：<br>1、独立完成所负责业务的测试用例设计、测试方案的设计和指定。<br>2、针对复杂模块，深入了解代码逻辑，熟练运用相关工具和方法，承担并能独立完成产品的功能、接口、性能以及其他各种测试。<br>3、参与完整的产品迭代流程，除正常的测试工作外，在需求&#x2F;交互评审以及上线流程中起到质量保障的作用。<br>4、根据产品和项目特点，提出、设计和实施合理的自动化解决方案，提高测试效率。<br>5、独立完成测试任务的计划安排、沟通协调和项目进度汇报。<br>6、经常性的对工作中的问题、知识点进行总结，同时能够了解业界前沿的测试技术，并在实际项目中实践和推广。<br>职位要求：<br>1、2年以上信贷或金融行业APP和H5测试经验。<br>2、熟悉Python语言，可以熟练编写自动化和性能测试脚本。<br>3、精通并且能独立搭建和使用至少一种开源测试工具或框架，如UIAutomator、Appium、JMeter等。<br>4、英语读写能力强，做过海外项目优先。<br>5、有责任心，能承担压力，能够独立解决问题，有创新想法。</p><p>boss 投递地址：<a href="https://www.zhipin.com/job_detail/c3e5dd3ae9ce3c981HNy0t-9EVZY.html?ka=hot-job-2">https://www.zhipin.com/job_detail/c3e5dd3ae9ce3c981HNy0t-9EVZY.html?ka=hot-job-2</a></p>]]></content>
    
    
    <categories>
      
      <category>招聘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>招聘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python上下文管理器</title>
    <link href="/2024/08/15/python%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    <url>/2024/08/15/python%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-上下文管理器"><a href="#Python-上下文管理器" class="headerlink" title="Python 上下文管理器"></a>Python 上下文管理器</h1><p>大家都用过Python中的with语句，使用with语句其实就是一个上下文管理器，那么他主要做了一个在执行某个动作前做了一件事情，做完了这个事情之后又做了另外一件事情。虽然听起来比较难懂，但是大体意思是这样的，那么我们就一起用代码来看看是怎么回事吧！</p><h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">info = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;mydata.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br>info.write(<span class="hljs-string">&quot;hello welcome to my blog&quot;</span>)<br>info.close()<br></code></pre></td></tr></table></figure><p>上面就是实现了一个简单的打开mydata.txt文件，然后写入字符，然后关闭。这样的一个操作过程。</p><p>那么使用with 改造后呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;mydata.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> info:<br>    info.write(<span class="hljs-string">&quot;welocme to my blog&quot;</span>)<br></code></pre></td></tr></table></figure><p>那么当我们使用with上下文管理器的时候，就是这样的了，可能同学会发现咦，怎么没有关闭文件了，这个呢就是上下文管理器的神奇之处，他会在写完数据后自动执行关闭的操作，是不是比我们自己写的要更加简单以及安全！那么执行完毕后就会生成mydata.txt文件。</p><p>那么我们重新来看一个程序！</p><h2 id="上下文管理器内部逻辑"><a href="#上下文管理器内部逻辑" class="headerlink" title="上下文管理器内部逻辑"></a>上下文管理器内部逻辑</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br>start=time.perf_counter()<br>nums = []<br><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>    nums.append(n**<span class="hljs-number">5</span>)<br><br>stop= time.perf_counter()<br><br>cost = stop - start<br><br><span class="hljs-built_in">print</span>(cost)<br><br></code></pre></td></tr></table></figure><p>那么上面的代码中简单的实现了一个这样的逻辑，就是实现计算n的5次方，然后计算从0到1000，然后加入列表中，开始计时查看中间的时间差。这时候，我们通过写内部真正实际操作的逻辑！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Timer</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.cost = <span class="hljs-number">0</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__enter__</span>(<span class="hljs-params">self</span>):<br>        self.start=time.perf_counter()<br>        <span class="hljs-keyword">return</span> self<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__exit__</span>(<span class="hljs-params">self, exc_type, exc_val, exc_tb</span>):<br>        self.stop = time.perf_counter()<br>        self.cost = self.stop - self.start<br>     <br>        <br><br><span class="hljs-keyword">with</span> Timer() <span class="hljs-keyword">as</span> timer:<br>    nums = []<br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>        nums.append(n**<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(timer.cost)<br></code></pre></td></tr></table></figure><p>那么这时候可以看出来，我们写了一个with的上下文管理器，当执行的时候首先进去Timer这个类里面，需要注意的是，这时候首先执行的是 <code>__enter__</code> 这个方法，然后当我们整个with结束的时候执行的是 <code>__exit__</code> 这个方法，此时在<code>__exit__</code>中我们做了记录结束的时间并且做了两者相减的时间差的值，这样我们就可以在打印timer.cost的时候获取时间差。</p><p>需要注意的是在<code>__enter__</code> 这个里面有一个return self。是因为我们在执行with Timer() as timer的时候 timer 并不是真正的拿到Timer(), 其实是拿到的是<code>__enter__</code>这里的返回信息，也就是self.start 此时需要用retrun 将其返回记录的！</p><h2 id="代码内的总结"><a href="#代码内的总结" class="headerlink" title="代码内的总结"></a>代码内的总结</h2><p>一个上下文管理器需要实现如下的方法：</p><p><code>__enter__</code> 安装上下文，可以返回对象</p><p><code>__exit__</code> 清楚释放对象</p><h2 id="上下文应用场景"><a href="#上下文应用场景" class="headerlink" title="上下文应用场景"></a>上下文应用场景</h2><p>Python 的上下文管理器是一个强大的特性，它允许你以非常优雅和简洁的方式管理资源，比如文件操作、数据库连接、网络套接字等。使用上下文管理器可以确保即使在发生异常的情况下，资源也能被正确地清理和释放。上下文管理器通常与 <code>with</code> 语句一起使用。</p><p>以下是上下文管理器的一些典型应用场景：</p><h3 id="1-文件操作"><a href="#1-文件操作" class="headerlink" title="1. 文件操作"></a>1. 文件操作</h3><p>文件操作是上下文管理器最常见的应用场景之一。使用 <code>with</code> 语句可以自动管理文件的打开和关闭，即使在读写文件时发生异常，文件也会被正确关闭。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;example.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    content = file.read()<br><span class="hljs-comment"># 文件在这里已经被自动关闭</span><br></code></pre></td></tr></table></figure><h3 id="2-线程锁（Threading-Locks）"><a href="#2-线程锁（Threading-Locks）" class="headerlink" title="2. 线程锁（Threading Locks）"></a>2. 线程锁（Threading Locks）</h3><p>在多线程编程中，为了防止数据竞争，可能需要使用锁来同步对共享资源的访问。Python 的 <code>threading</code> 模块提供了锁（Lock 和 RLock），这些锁可以作为上下文管理器使用，以确保锁在使用后能被正确释放。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Lock<br><br>lock = Lock()<br><span class="hljs-keyword">with</span> lock:<br>    <span class="hljs-comment"># 执行临界区代码</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-comment"># 锁在这里被自动释放</span><br></code></pre></td></tr></table></figure><h3 id="3-数据库连接"><a href="#3-数据库连接" class="headerlink" title="3. 数据库连接"></a>3. 数据库连接</h3><p>在处理数据库时，正确管理数据库连接非常重要。虽然标准的数据库连接库（如 SQLite, PostgreSQL 的 psycopg2 等）不直接提供上下文管理器接口，但你可以通过定义自己的上下文管理器类或使用第三方库（如 SQLAlchemy）来管理数据库连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 假设 db_connect 是获取数据库连接的函数</span><br><span class="hljs-keyword">with</span> db_connect() <span class="hljs-keyword">as</span> conn:<br>    <span class="hljs-comment"># 执行数据库操作</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-comment"># 连接在这里被自动关闭或回滚</span><br></code></pre></td></tr></table></figure><h3 id="4-网络套接字"><a href="#4-网络套接字" class="headerlink" title="4. 网络套接字"></a>4. 网络套接字</h3><p>网络编程中，套接字（Sockets）的创建、使用和关闭也可以利用上下文管理器来管理，以确保即使在发生异常时，套接字也能被正确关闭。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SocketContext</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, host, port</span>):<br>        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>        self.sock.connect((host, port))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__enter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.sock<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__exit__</span>(<span class="hljs-params">self, exc_type, exc_val, exc_tb</span>):<br>        self.sock.close()<br><br><span class="hljs-keyword">with</span> SocketContext(<span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-number">12345</span>) <span class="hljs-keyword">as</span> sock:<br>    <span class="hljs-comment"># 发送和接收数据</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-comment"># 套接字在这里被自动关闭</span><br></code></pre></td></tr></table></figure><h3 id="5-临时目录和文件"><a href="#5-临时目录和文件" class="headerlink" title="5. 临时目录和文件"></a>5. 临时目录和文件</h3><p>在处理需要临时文件或目录的场景时，可以使用像 <code>tempfile</code> 这样的库来创建它们，并通过自定义上下文管理器来确保在不再需要时它们被正确删除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tempfile<br><span class="hljs-keyword">import</span> shutil<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TempDir</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.temp_dir = tempfile.mkdtemp()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__enter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.temp_dir<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__exit__</span>(<span class="hljs-params">self, exc_type, exc_val, exc_tb</span>):<br>        shutil.rmtree(self.temp_dir)<br><br><span class="hljs-keyword">with</span> TempDir() <span class="hljs-keyword">as</span> tempdir:<br>    <span class="hljs-comment"># 使用临时目录</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-comment"># 临时目录在这里被自动删除</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上下文管理器应用广泛涉及到前后状态改变的都可以使用，也就是，任何需要确保资源在使用后被正确释放或清理的场景，都可以利用上下文管理器来实现。所以你掌握了其中的原理了吗？</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 上下文管理器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jmeter 逻辑控制器之交替控制器</title>
    <link href="/2024/08/12/jmeter%E4%BA%A4%E6%9B%BF%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
    <url>/2024/08/12/jmeter%E4%BA%A4%E6%9B%BF%E6%8E%A7%E5%88%B6%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Jmeter-逻辑控制器之交替控制器"><a href="#Jmeter-逻辑控制器之交替控制器" class="headerlink" title="Jmeter 逻辑控制器之交替控制器"></a>Jmeter 逻辑控制器之交替控制器</h1><p>大家知道在Jmeter中我们在添加了HTTP请求后，我们有时候都要添加逻辑控制器，也就是需要添加一些对于请求的逻辑控制，那么今天我们介绍的是交替控制器</p><h2 id="什么是交替控制器"><a href="#什么是交替控制器" class="headerlink" title="什么是交替控制器"></a>什么是交替控制器</h2><p>交替控制器顾名思义就是在请求的时候可以进行交替的请求，那么从文字上面很难实现理解，直接来实际操作展示！</p><h2 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h2><h3 id="首先我们要添加一个线程组"><a href="#首先我们要添加一个线程组" class="headerlink" title="首先我们要添加一个线程组"></a>首先我们要添加一个线程组</h3><img src="/2024/08/12/jmeter%E4%BA%A4%E6%9B%BF%E6%8E%A7%E5%88%B6%E5%99%A8/jmeter1.png" class=""><p>这里设置的线程组中的线程数：1，Ramp-up 秒：0， 循环次数：3， 也就是启动三个线程。</p><h3 id="添加HTTP请求"><a href="#添加HTTP请求" class="headerlink" title="添加HTTP请求"></a>添加HTTP请求</h3><img src="/2024/08/12/jmeter%E4%BA%A4%E6%9B%BF%E6%8E%A7%E5%88%B6%E5%99%A8/jmeter2.png" class=""><h3 id="添加交替控制器"><a href="#添加交替控制器" class="headerlink" title="添加交替控制器"></a>添加交替控制器</h3><img src="/2024/08/12/jmeter%E4%BA%A4%E6%9B%BF%E6%8E%A7%E5%88%B6%E5%99%A8/jmeter3.png" class=""><img src="/2024/08/12/jmeter%E4%BA%A4%E6%9B%BF%E6%8E%A7%E5%88%B6%E5%99%A8/jmeter4.png" class=""><p>此时添加了交替控制器，那么我们将需要交替请求的请求添加到交替控制器中。</p><h3 id="添加交替请求"><a href="#添加交替请求" class="headerlink" title="添加交替请求"></a>添加交替请求</h3><img src="/2024/08/12/jmeter%E4%BA%A4%E6%9B%BF%E6%8E%A7%E5%88%B6%E5%99%A8/jmeter6.png" class=""><img src="/2024/08/12/jmeter%E4%BA%A4%E6%9B%BF%E6%8E%A7%E5%88%B6%E5%99%A8/jmeter7.png" class=""><p>这里添加了3个请求，百度地图， 百度贴吧， 百度图片。</p><h3 id="添加额外请求"><a href="#添加额外请求" class="headerlink" title="添加额外请求"></a>添加额外请求</h3><img src="/2024/08/12/jmeter%E4%BA%A4%E6%9B%BF%E6%8E%A7%E5%88%B6%E5%99%A8/jmeter8.png" class=""><p>这里添加了百度视频的请求</p><p>6.添加查看结果树</p><img src="/2024/08/12/jmeter%E4%BA%A4%E6%9B%BF%E6%8E%A7%E5%88%B6%E5%99%A8/jmeter9.png" class=""><h3 id="此时运行查看结果"><a href="#此时运行查看结果" class="headerlink" title="此时运行查看结果"></a>此时运行查看结果</h3><img src="/2024/08/12/jmeter%E4%BA%A4%E6%9B%BF%E6%8E%A7%E5%88%B6%E5%99%A8/jemter5.png" class=""><p>可以看到这里的交替控制器发生了效果，形成了：</p><p>百度-&gt;百度图片-&gt;百度视频</p><p>百度-&gt;百度地图-&gt;百度视频</p><p>百度-&gt;百度贴吧-&gt;百度视频</p><p>每次的请求都按照上述的请求顺序进行交替的请求，这下我想就应该明白了交替控制器的具体逻辑了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我们要善于使用Jmeter逻辑请求中的各个控制器，其中这个交替控制器就是实现了交替请求的效果！</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Jmeter</category>
      
      <category>Jmeter 交替控制器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Jmeter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 装饰器</title>
    <link href="/2024/08/07/python%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <url>/2024/08/07/python%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-装饰器"><a href="#Python-装饰器" class="headerlink" title="Python 装饰器"></a>Python 装饰器</h1><p>装饰器是什么东西呢？想必大家也多少了解过了一点，它就是实现了我们在不修改原有函数的基础上，给函数或方法增加新的功能，其实装饰器本身也是一个函数，她接收一个函数作为参数并返回一个新的函数，这个新的函数通常包含原函数的调用，并包含一额外新增的功能。</p><p>那么在了解装饰器之前呢，你需要了解一个东西叫做闭包，只有了解了它你才能更加了解装饰器。那么可以看我之前写的关于闭包的文章。</p><p>链接：<a href="https://8888666.top/2024/08/05/python%E9%97%AD%E5%8C%85/">https://8888666.top/2024/08/05/python%E9%97%AD%E5%8C%85/</a></p><h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><h3 id="使用类定义函数装饰器未带参数"><a href="#使用类定义函数装饰器未带参数" class="headerlink" title="使用类定义函数装饰器未带参数"></a>使用类定义函数装饰器未带参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBlogDecorator</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, function</span>):<br>        self.function = function<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The blog name is yunshao&quot;</span>)<br>        result_info = self.function(*args, **kwargs)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The blog is download, now you can see!&quot;</span>)<br>        <span class="hljs-keyword">return</span> result_info<br>        <br><br><span class="hljs-meta">@MyBlogDecorator</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">open_blog</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;welcome to my blog&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;oh,is very nice blog&quot;</span><br><br><span class="hljs-built_in">print</span>(open_blog())<br></code></pre></td></tr></table></figure><p>代码解释： 上述代码就是简单实现了一个装饰器。</p><p>1.首先我定义一个函数，这个函数用来模拟我们打开我的网站的一个对话，整个函数就是打印了一串文字，retrun 了一串文字。</p><p>2.然后我定义了一个装饰器MyBlogDecorator，在装饰器中首先在<code>__init__</code>方法中我们定义的function 此时传入的并不是一个变量，而是一个函数，这就是装饰器的灵魂所在。</p><p>3.那么我们还定义了魔法函数<code>__call__</code> 在运行类MyBlogDecorator，会自动调用我们的 <code>__call__</code> 方法，那么在<code>__call__</code> 方法中我们设置了可以传入参数设置，也就是假设你的open_blog 函数需要传变量，那么这里也是可以完美支持，只不过我们的案例中没写而已。</p><p>4.在里面我们也是首先打印了一串文字，然后此时调用了我们的self.function(*args, **kwargs)这里其实就是将open_blog() 函数进行了调用，然后程序会执行open_blog，然后输出”welcome to my blog”, 此时result_info 进行接收return 返回的值，然后打印“The blog is download, now you can see!”，最后程序输出return的值oh,is very nice blog。</p><p>完整的输出信息:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">The blog name is yunshao<br>welcome to my blog<br>The blog is download, now you can see!<br>oh,is very nice blog<br></code></pre></td></tr></table></figure><p>相信大家在此刻也就对装饰器了解更加彻底了！</p><h3 id="使用类定义函数装饰器带参数"><a href="#使用类定义函数装饰器带参数" class="headerlink" title="使用类定义函数装饰器带参数"></a>使用类定义函数装饰器带参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBlogDecorator</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        self.name = name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, function</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">warp</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;hello <span class="hljs-subst">&#123;self.name&#125;</span>&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The blog name is yunshao&quot;</span>)<br>            result_info = function(*args, **kwargs)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The blog is download, now you can see!&quot;</span>)<br>            <span class="hljs-keyword">return</span> result_info<br>        <span class="hljs-keyword">return</span> warp<br>        <br><br><span class="hljs-meta">@MyBlogDecorator(<span class="hljs-params"><span class="hljs-string">&quot;xiaoming&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">example_test</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;welcome to my blog&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;oh,is very nice blog&quot;</span><br><br><span class="hljs-built_in">print</span>(example_test())<br></code></pre></td></tr></table></figure><p>代码解释： 那么如果你看了上述的代码解释，我这里就不会在详细的讲解每一步了，这里我主要来讲不一样的地方。</p><p>1.首先我们这里发生变化的地方是我们的装饰器增加了参数，也就是name，我们通过MyBlogDecorator进行了传递name是 xiaoming 的参数，但是要注意的是此时我们接收的name就是在<code>__init__</code> 方法里，和上述不一样的是我们这里不能接收函数了。</p><p>2.我们需要写一个函数的装饰器进行接收，也就是在<code>__call__</code> 里面进行接收fucntion ,然后通过内部的函数 wrap 进行调用，此时我们需要注意在进入<code>__call__</code>中我们首先执行的是return warp 让warp函数执行，然后我们里面的和我们上述讲的程序执行就是一样的了。</p><p>代码输出结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">hello xiaoming<br>The blog name is yunshao<br>welcome to my blog<br>The blog is download, now you can see!<br>oh,is very nice blog<br></code></pre></td></tr></table></figure><h3 id="给类添加装饰器"><a href="#给类添加装饰器" class="headerlink" title="给类添加装饰器"></a>给类添加装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">cls_MyBlogDecorator</span>(<span class="hljs-params">cls</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The blog name is yunshao&quot;</span>)<br>    <span class="hljs-keyword">return</span> cls<br>    <br><br><span class="hljs-meta">@cls_MyBlogDecorator</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Open_blog</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;welcome to my blog&quot;</span>)<br><br>Open_blog()<br></code></pre></td></tr></table></figure><p>代码解释：上述代码定义了一个类Open_blog, 然后类里面打印了一串文字，我们定义了一个装饰器cls_MyBlogDecorator，此时装饰器实现了将Open_blog传入到了cls_MyBlogDecorator中, 也就是cls，然后打印了一串文字，return了 cls 也就调用了Open_blog 这个类 输出了 welcome to my blog</p><p>程序输出结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">welcome to my blog<br>The blog name is yunshao<br></code></pre></td></tr></table></figure><p>那么，如果我重复调用Open_blog() 这个类会发生什么呢？大部分同学应该会说，那肯定输出上面的两串文字 两次，那么现实真的是吗？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">cls_MyBlogDecorator</span>(<span class="hljs-params">cls</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The blog name is yunshao&quot;</span>)<br>    <span class="hljs-keyword">return</span> cls<br>    <br><br><span class="hljs-meta">@cls_MyBlogDecorator</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Open_blog</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;welcome to my blog&quot;</span>)<br><br>Open_blog()<br>Open_blog()<br></code></pre></td></tr></table></figure><p>程序输出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">welcome to my blog<br>The blog name is yunshao<br></code></pre></td></tr></table></figure><p>哈哈，大家发现了没有，此时我们调用两次也没有执行输出两次，是因为我们的装饰器已经装饰完到内存了，你虽然调用了两次，但是每次调用的还是那个装饰器装饰到内存的那个，所以会只是输出一次，那么怎么让他输出两次呢？ 可以这样来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">cls_MyBlogDecorator</span>(<span class="hljs-params">cls</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The blog name is yunshao&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;the blog is download&quot;</span>)<br>        result_object = cls()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;wow the blog is very nice!&quot;</span>)<br>        <span class="hljs-keyword">return</span> result_object<br>    <span class="hljs-keyword">return</span> inner<br>    <br><br><span class="hljs-meta">@cls_MyBlogDecorator</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Open_blog</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;welcome to my blog&quot;</span>)<br><br>open1 = Open_blog()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===================&quot;</span>)<br>open2 = Open_blog()<br></code></pre></td></tr></table></figure><p>代码解释： 此时我们进行了改进在之前的函数中新增了inner函数，此时逻辑变为当我们每次调用的Open_blog 这个类的时候实际我们在调用inner这个函数，函数里面呢将类进行了实例化，此时我们return 底部的也变为了inner，也就是每次调用都会执行inner()这个函数。</p><p>程序输出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">welcome to my blog<br>The blog name is yunshao<br>the blog is download<br>wow the blog is very nice!<br>===================<br>the blog is download<br>wow the blog is very nice!<br></code></pre></td></tr></table></figure><p>这样你就会发现我们每调用一次都会调用一次inner里面的！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>python 中的装饰器是一种了非常灵活的方式来增强函数的功能，而不需要修改函数本身的代码。它们是函数式编程在 Python 中的一种优雅体现，能够极大地提高代码的可读性和可维护性。在众多的设计模式中也用的非常多，例如我们的日志记录、性能测试、事务处理、权限校验等，以及我们在使用Pytest 框架的时候我们会用到很多框架提供给我们的装饰器，非常强大且使用方便！</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 装饰器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
      <tag>装饰器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 闭包</title>
    <link href="/2024/08/05/python%E9%97%AD%E5%8C%85/"/>
    <url>/2024/08/05/python%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-闭包"><a href="#Python-闭包" class="headerlink" title="Python 闭包"></a>Python 闭包</h1><p>大家接触过python肯定都知道闭包这个东西，但是有些人看过也就忘记了，感觉对他的用处也不是很明朗，只是知道有这个东西，那么今天就随着我一起学习这个闭包吧！</p><h2 id="闭包介绍"><a href="#闭包介绍" class="headerlink" title="闭包介绍"></a>闭包介绍</h2><p>简单来说： 内部函数对外部函数作用域内变量的引用（非全局变量），则称内部函数为闭包。乍一听好像也是丈二和尚摸不着头脑，那么就让我们看代码来进一步了解吧！</p><h2 id="代码介绍"><a href="#代码介绍" class="headerlink" title="代码介绍"></a>代码介绍</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>():<br>    message = <span class="hljs-string">&quot;welcome to python&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;message&#125;</span>&quot;</span>)<br>    inner()<br><br>outer()<br><br></code></pre></td></tr></table></figure><p>那么各位同学可以猜想一下,运行结束后，输出什么呢？ 我想各位都猜对了，那就是 welcome to python, 其实这个就是一个闭包， 我们的inner是内部程序，这时候我们用到了外部的outer的变量也就是message，这样我们就成为一个闭包。应该比较容易理解吧！那么下一步我会进行一个程序变形，那么你能看出下一步输出什么吗？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>():<br>    message = <span class="hljs-string">&quot;welcome to python&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;message&#125;</span>&quot;</span>)<br>    message = <span class="hljs-string">&quot;wow python is amazing!&quot;</span><br>    <span class="hljs-keyword">return</span> inner<br><br>f = outer()<br>f()<br></code></pre></td></tr></table></figure><p>那么我们现在改完后，各位同学还能猜出输出什么吗？哈哈，可能部分同学认为输出的依旧是“welcome to python”,理由可能如下：</p><p>我们运行outer的时候实际上返回了inner函数，此时inner执行的时候直接就会输出 outer里面的message，所以输出的是 welcome to python。 那么事实真的如此吗？我们来运行看看！</p><img src="/2024/08/05/python%E9%97%AD%E5%8C%85/%E9%97%AD%E5%8C%851.png" class=""><p>可惜，可能和部分同学想的不一样了，那么为什么会输出wow python is amazing 呢？下面我来讲解一下：</p><h2 id="闭包的原理"><a href="#闭包的原理" class="headerlink" title="闭包的原理"></a>闭包的原理</h2><p>其实，我们在执行上述程序的时候，先运行的outer，此时实际上python悄默默的的做了一件事情，那就是将Message存了起来，等到inner运行的时候从里面拿出来，那么同学说我怎么看不到呢？下面使用debug模式我们来看一下！</p><img src="/2024/08/05/python%E9%97%AD%E5%8C%85/%E9%97%AD%E5%8C%852.png" class=""><p>大家可以看到我debug的时候查看一个内部函数，f.<code>__closure__</code> 这个是什么呢？ 其实这个就是闭包函数，closure 翻译成闭包就是中文的意思，那么此时做了什么事情呢？ 实际上 <code>__closure__ </code>是一个元组类型的，实际上是进行了一个复制操作将wow python is amazing 复制了一份放在了元祖中，所以在使用的时候实际上是从这个地方去出来的数据，为了证实我们可以进一步来看！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>():<br>    message = <span class="hljs-string">&quot;welcome to python&quot;</span><br>    name = <span class="hljs-string">&quot;xiao ming &quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span>+<span class="hljs-subst">&#123;message&#125;</span>&quot;</span>)<br><br>    <span class="hljs-comment"># message = &quot;wow python is amazing!&quot;</span><br>    <span class="hljs-keyword">return</span> inner<br><br><br>f = outer()<br>f()<br><br></code></pre></td></tr></table></figure><p>运行结果：</p><img src="/2024/08/05/python%E9%97%AD%E5%8C%85/%E9%97%AD%E5%8C%853.png" class=""><p>我们可以看出确实将信息存储在了<code>__closure__</code> 中，如果你理解了上述的，你也就明白了闭包为什么是内部函数使用外部函数的变量信息。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>说了这么多，那么闭包的应用场景有哪些呢？ 那就一起来看吧！</p><h3 id="1-数据封装和隐私保护"><a href="#1-数据封装和隐私保护" class="headerlink" title="1. 数据封装和隐私保护"></a>1. 数据封装和隐私保护</h3><p>闭包可以用来封装数据，使得数据只通过特定的函数接口进行访问和修改，从而保护数据的隐私性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-built_in">print</span>(text)<br>    <span class="hljs-keyword">return</span> inner<br><br><span class="hljs-comment"># 使用闭包</span><br>my_printer = outer(<span class="hljs-string">&quot;Hello, World!&quot;</span>)<br>my_printer()  <span class="hljs-comment"># 输出: Hello, World!</span><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>text</code> 变量被封装在 <code>outer</code> 函数的作用域中，只有通过 <code>inner</code> 函数才能访问。</p><h3 id="2-装饰器"><a href="#2-装饰器" class="headerlink" title="2. 装饰器"></a>2. 装饰器</h3><p>Python 中的装饰器是一种常用的闭包应用场景。装饰器允许你在不修改原有函数代码的情况下，给函数增加新的功能。</p><p>关于装饰器可以看这我这篇更加详细的介绍：<a href="https://8888666.top/2024/08/07/python%E8%A3%85%E9%A5%B0%E5%99%A8/">https://8888666.top/2024/08/07/python%E8%A3%85%E9%A5%B0%E5%99%A8/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_decorator</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something is happening before the function is called.&quot;</span>)<br>        func()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something is happening after the function is called.&quot;</span>)<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@my_decorator</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello!&quot;</span>)<br><br>say_hello()<br><span class="hljs-comment"># 输出:</span><br><span class="hljs-comment"># Something is happening before the function is called.</span><br><span class="hljs-comment"># Hello!</span><br><span class="hljs-comment"># Something is happening after the function is called.</span><br></code></pre></td></tr></table></figure><h3 id="3-工厂函数"><a href="#3-工厂函数" class="headerlink" title="3. 工厂函数"></a>3. 工厂函数</h3><p>工厂函数是返回函数的函数，这些返回的函数可以捕获并操作创建它们时的环境。这常用于生成具有特定行为或状态的函数实例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_multiplier_of</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">multiplier</span>(<span class="hljs-params">x</span>):<br>        <span class="hljs-keyword">return</span> x * n<br>    <span class="hljs-keyword">return</span> multiplier<br><br>times_two = make_multiplier_of(<span class="hljs-number">2</span>)<br>times_three = make_multiplier_of(<span class="hljs-number">3</span>)<br><br><span class="hljs-built_in">print</span>(times_two(<span class="hljs-number">10</span>))  <span class="hljs-comment"># 输出: 20</span><br><span class="hljs-built_in">print</span>(times_three(<span class="hljs-number">10</span>))  <span class="hljs-comment"># 输出: 30</span><br></code></pre></td></tr></table></figure><h3 id="4-回调函数"><a href="#4-回调函数" class="headerlink" title="4. 回调函数"></a>4. 回调函数</h3><p>在某些异步编程或事件驱动编程场景中，回调函数经常被用作闭包。它们允许在将来某个时间点调用一个函数，同时保持对当前环境或数据的引用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">perform_action</span>(<span class="hljs-params">action, value</span>):<br>    result = action(value)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The result is <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_ten</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x + <span class="hljs-number">10</span><br><br>perform_action(add_ten, <span class="hljs-number">5</span>)  <span class="hljs-comment"># 闭包的概念在这里不是直接体现，但回调函数常与闭包结合使用</span><br><br><span class="hljs-comment"># 假设在异步或事件驱动环境中，回调函数作为闭包传递，以保持对外部环境的引用</span><br></code></pre></td></tr></table></figure><h3 id="5-缓存机制"><a href="#5-缓存机制" class="headerlink" title="5. 缓存机制"></a>5. 缓存机制</h3><p>闭包可以用来实现缓存机制，尤其是当函数计算代价较高且其结果可以重用时。通过缓存函数的返回值，可以显著提高程序的性能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">memoize</span>(<span class="hljs-params">func</span>):<br>    cache = &#123;&#125;<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>(<span class="hljs-params">*args</span>):<br>        <span class="hljs-keyword">if</span> args <span class="hljs-keyword">in</span> cache:<br>            <span class="hljs-keyword">return</span> cache[args]<br>        result = func(*args)<br>        cache[args] = result<br>        <span class="hljs-keyword">return</span> result<br>    <span class="hljs-keyword">return</span> inner<br><br><span class="hljs-meta">@memoize</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fibonacci</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> n<br>    <span class="hljs-keyword">return</span> fibonacci(n-<span class="hljs-number">1</span>) + fibonacci(n-<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 调用 fibonacci 多次，可以看到缓存的效果</span><br></code></pre></td></tr></table></figure><p>这些只是闭包在 Python 中应用的几个例子，实际上闭包的应用场景非常广泛，几乎可以在任何需要封装数据或函数逻辑的场景中使用。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 闭包</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
      <tag>闭包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 单例模式</title>
    <link href="/2024/08/02/python%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/08/02/python%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-单例模式"><a href="#Python-单例模式" class="headerlink" title="Python 单例模式"></a>Python 单例模式</h1><p>在众多设计模式中，单例模式对于在测试开发过程中应用的还是比较广泛的，例如log, driver实例等。都需要使用到我们的单例模式</p><h2 id="什么是单例模式？"><a href="#什么是单例模式？" class="headerlink" title="什么是单例模式？"></a>什么是单例模式？</h2><p>用我自己的理解的话语来说：“单例模式就是如果一个地方都需要用到这个东西（对象），那么我们只需要创建一次就可以实现维护全局状态的使用”。就是我声明了在用的时候只需还是最初的那个即可，无需再次创建！</p><h2 id="应用常见场景"><a href="#应用常见场景" class="headerlink" title="应用常见场景"></a>应用常见场景</h2><p>单例模式一般用于对于共享资源的并发访问， 例如：数据库的连接， 日志的生成， 全局的工具对于测试而言就是我们的driver实例化。</p><h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">  因为单例模式在全局内只有一个实例，因此可以节省比较多的内存空间。</span><br><span class="hljs-string">全局只有一个接入点，可以更好地进行数据同步控制，避免多重占用。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">  函数装饰器实现</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sinleton</span>(<span class="hljs-params">cls</span>):<br>    <span class="hljs-comment"># 创建一个字典用来保存被装饰类的实例对象</span><br>    _instance = &#123;&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_singleton</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-comment"># 判断这个类有没有创建过对象， 没有就新创建一个， 有的话则返回之前创建的</span><br>        <span class="hljs-keyword">if</span> cls <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> _instance:<br>            _instance[cls] = cls(*args, **kwargs)<br>        <span class="hljs-keyword">return</span> _instance[cls]<br><br>    <span class="hljs-keyword">return</span> _singleton<br><br><br><span class="hljs-meta">@sinleton</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, a=<span class="hljs-number">0</span></span>):<br>        self.a = a<br><br><br>a1 = A(<span class="hljs-number">1</span>)<br>a2 = A(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a1), <span class="hljs-built_in">id</span>(a2)) <span class="hljs-comment"># 135962997305040 135962997305040</span><br></code></pre></td></tr></table></figure><p>可以看出上述的id 是一致的也就是我们实现了单例模式。</p><p>下面以初始化driver为例来展示实际应用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SeleniumSingleton</span>:<br>    _instance = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        <span class="hljs-keyword">if</span> cls._instance <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            cls._instance = <span class="hljs-built_in">super</span>().__new__(cls)<br>            options = webdriver.ChromeOptions()<br>            options.add_argument(<span class="hljs-string">&#x27;--disable-blink-features=AutomationControlled&#x27;</span>)<br>            cls._instance._driver = webdriver.Chrome(options=options)<br>        <span class="hljs-keyword">return</span> cls._instance<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getattr__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">getattr</span>(self._driver, name)<br></code></pre></td></tr></table></figure><p>上述代码解释：</p><p>_instance &#x3D; None：这是一个类属性，用于存储唯一的实例。它初始值为 None，表示还没有创建实例。</p><p><strong>new</strong>(cls, *args, **kwargs)：这是 Python 类中的一个特殊方法，用于创建类的实例。这个方法被重写，确保只创建一次实例。</p><p>如果 _instance 为 None，说明还没有创建实例，则创建一个新的 SeleniumSingleton 实例并赋给 _instance。<br>然后，创建 webdriver.Chrome 实例，并将其保存到 _instance._driver 属性中。<br>最后，返回 _instance。<br><strong>getattr</strong>(self, name)：这个方法用于处理属性访问。当使用 SeleniumSingleton 实例访问属性时，它会调用这个方法。</p><p>它从 self._driver 属性中获取对应属性，并返回给调用者。</p><p>代码的用途:</p><p>这段代码通过单例模式，确保只创建一次 Selenium WebDriver 实例。这样，在不同的地方使用 Selenium WebDriver 时，都可以访问同一个实例，避免重复创建，提高代码效率。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>单例模式在程序编写中有广泛的应用，大家可以把我这个设计模式，做到更加高效的开发！</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 设计模式</category>
      
      <category>Python 单例模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>真的是人善被人欺吗？</title>
    <link href="/2024/07/29/%E8%84%BE%E6%B0%94/"/>
    <url>/2024/07/29/%E8%84%BE%E6%B0%94/</url>
    
    <content type="html"><![CDATA[<h1 id="人善真的被人欺？"><a href="#人善真的被人欺？" class="headerlink" title="人善真的被人欺？"></a>人善真的被人欺？</h1><p>其实我们大家早就听说过人善被人欺，可能大家也经历过，最近我也经历了一次，那么就听我细细到来吧！</p><p>事情起因是这样的，由于租的房子漏水了，然后联系了房屋中介，中介就联系了物业，中介说：“物业在吃饭，一会来”。我就开始等待，等了40分钟还是没有人来，这时候我又打过去，中介说：“物业不来了”，然后我就说怎么会这样，刚刚还说来的，然后此时媳妇，开始抢过手机说：</p><p>“我在你这租的房子你为什么不管？”。</p><p>物业说：“我一直在打电话，打了1个小时了”。</p><p>媳妇说：“我管你打几个小时，人来了吗？你解决问题了吗？”。</p><p>物业说：“你什么意思？我一直在打呀！”。</p><p>媳妇说：“我在你这租的房子，你就得解决问题，半天了也叫不来物业”。</p><p>物业说：“我给你手机号你自己叫行不”</p><p>媳妇说：“那我租你的房子交的钱是干嘛的？”</p><p>然后媳妇就挂了。</p><p>也是一会物业就发消息说：“物业一会就到了！”</p><p>也是等了大概10分钟，物业来了！</p><p>整个事情背后，媳妇说：“你还是心太软，你怎么就不厉害点！，他就是没做好，你应该理直气壮的质问他！”。</p><p>其实我也想那时候我觉得大家都不容易就比较心平气和说了，后来想想也确实，你不狠点这世界也没人会可伶你，所以就说：“如果，你占理！还是要语气上占上风！”。</p><p>所以人善被人欺，或许是真的，但是也是建立在我们有理的时候，还是也不能太可怜别人，因为他不一定可怜你！</p><img src="/2024/07/29/%E8%84%BE%E6%B0%94/11.jpg" class="">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
      <category>2024年随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>随笔</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python JsonPath介绍</title>
    <link href="/2024/07/24/jsonpath/"/>
    <url>/2024/07/24/jsonpath/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-JsonPath介绍"><a href="#Python-JsonPath介绍" class="headerlink" title="Python JsonPath介绍"></a>Python JsonPath介绍</h1><p>JsonPath 是一种用于JSON数据的查询语言，类似于我们使用Xpath在xml一样，都是提供了一种简洁强大的语法来浏览和从复杂的JSON数据结构中提取数据，总之，有了它我们可以更加方便快捷、高效的提取JSON数据。</p><h2 id="JsonPath-语法"><a href="#JsonPath-语法" class="headerlink" title="JsonPath 语法"></a>JsonPath 语法</h2><p>首先可以来看一个表格，也是从互联网上收集过来的，对于两者有很好的对比描述</p><table><thead><tr><th>XPath</th><th>JsonPath</th><th>说明</th></tr></thead><tbody><tr><td>&#x2F;</td><td>$</td><td>文档根元素</td></tr><tr><td>.</td><td>@</td><td>当前元素</td></tr><tr><td>&#x2F;</td><td>.或[]</td><td>匹配下级元素</td></tr><tr><td>..</td><td>N&#x2F;A</td><td>匹配上级元素，JsonPath不支持此操作符</td></tr><tr><td>&#x2F;&#x2F;</td><td>..</td><td>递归匹配所有子元素</td></tr><tr><td>*</td><td>*</td><td>通配符，匹配下级元素</td></tr><tr><td>@</td><td>N&#x2F;A</td><td>匹配属性，JsonPath不支持此操作符</td></tr><tr><td>[]</td><td>[]</td><td>下标运算符，根据索引获取元素，XPath索引从1开始，JsonPath索引从0开始</td></tr><tr><td></td><td></td><td>[,]</td></tr><tr><td>N&#x2F;A</td><td>[start:end:step]</td><td>数据切片操作，XPath不支持</td></tr><tr><td>[]</td><td>?()</td><td>过滤表达式</td></tr><tr><td>N&#x2F;A</td><td>()</td><td>脚本表达式，使用底层脚本引擎，XPath不支持</td></tr><tr><td>()</td><td>N&#x2F;A</td><td>分组，JsonPath不支持</td></tr></tbody></table><p>那么我们可以看到xpath 拥有的功能 JsonPath 基本都可以实现， 只不过他们的具体语法不一样，那么下面我们来具体描述一下！</p><h2 id="JsonPath-实例"><a href="#JsonPath-实例" class="headerlink" title="JsonPath 实例"></a>JsonPath 实例</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bizCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10000</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;innerMsg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;eventsByTournament&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;topLeagues&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;liveCount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;totalCount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;userFavorite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;events&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                        <span class="hljs-punctuation">&#123;</span><br>                            <span class="hljs-attr">&quot;hasTips&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;hasVideo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;eventId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:match:51595857&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;markets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCompetitorLogo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.matchplay.com/static/competitor/5962.png&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCompetitorLogo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.matchplay.com/static/competitor/126304.png&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCompetitor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Lincoln Red Imps&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCompetitor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Qarabag FK&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCompetitorId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:competitor:126304&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCompetitorId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:competitor:5962&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;startTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1721750400000</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;ap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;aet&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeResult&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayResult&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;halfScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0:1&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeScoreWholeMatch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayScoreWholeMatch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCurrentPeriodScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCurrentPeriodScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeScoreInCurrentSection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayScoreInCurrentSection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;currentServer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;matchStatus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;FT&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;remainTimeOfCurrentPeriod&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;eventTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;remainTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;userSubscribed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>                        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-punctuation">&#123;</span><br>                            <span class="hljs-attr">&quot;hasTips&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;hasVideo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;eventId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:match:51595849&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;markets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCompetitorLogo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.matchplay.com/static/competitor/2218.png&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCompetitorLogo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.matchplay.com/static/competitor/3177.png&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCompetitor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Shamrock Rovers&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCompetitor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Sparta Prague&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCompetitorId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:competitor:3177&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCompetitorId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:competitor:2218&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;startTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1721761200000</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;ap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;aet&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeResult&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayResult&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;halfScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0:1&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeScoreWholeMatch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayScoreWholeMatch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCurrentPeriodScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCurrentPeriodScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeScoreInCurrentSection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayScoreInCurrentSection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;currentServer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;matchStatus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;FT&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;remainTimeOfCurrentPeriod&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;eventTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;remainTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;userSubscribed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>                        <span class="hljs-punctuation">&#125;</span><br>                    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;hasVideo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;categoryLogo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.matchplay.com/static/manage-sport/ac294391-25db-4ca7-a516-4d5c1da9f696.png&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;International Clubs&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;categoryId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:category:393&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;sportId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:sport:1&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;tournamentId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:tournament:7&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;tournament&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;UEFA Champions League&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;liveCount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;totalCount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;userFavorite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;events&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                        <span class="hljs-punctuation">&#123;</span><br>                            <span class="hljs-attr">&quot;hasTips&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;hasVideo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;eventId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:match:46655705&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;markets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCompetitorLogo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.matchplay.com/static/competitor/3216.png&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCompetitorLogo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.matchplay.com/static/competitor/191648.png&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCompetitor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Deportivo Riestra&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCompetitor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Argentinos Juniors&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCompetitorId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:competitor:191648&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCompetitorId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:competitor:3216&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;startTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1721757600000</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;ap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;aet&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeResult&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayResult&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;halfScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0:0&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeScoreWholeMatch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayScoreWholeMatch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCurrentPeriodScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCurrentPeriodScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeScoreInCurrentSection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayScoreInCurrentSection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;currentServer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;matchStatus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;FT&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;remainTimeOfCurrentPeriod&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;eventTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;remainTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;userSubscribed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>                        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-punctuation">&#123;</span><br>                            <span class="hljs-attr">&quot;hasTips&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;hasVideo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;eventId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:match:46655717&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;markets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCompetitorLogo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.matchplay.com/static/competitor/3201.png&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCompetitorLogo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.matchplay.com/static/competitor/3205.png&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCompetitor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Gimnasia Y Esgrima La Plata&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCompetitor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CA San Lorenzo de Almagro&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCompetitorId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:competitor:3205&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCompetitorId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:competitor:3201&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;startTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1721771100000</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;ap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;aet&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeResult&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayResult&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;halfScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0:1&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeScoreWholeMatch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayScoreWholeMatch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCurrentPeriodScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCurrentPeriodScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeScoreInCurrentSection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayScoreInCurrentSection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;currentServer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;matchStatus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;FT&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;remainTimeOfCurrentPeriod&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;eventTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;remainTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;userSubscribed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>                        <span class="hljs-punctuation">&#125;</span><br>                    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;hasVideo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;categoryLogo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.matchplay.com/static/manage-sport/ecf033b1-8831-4961-aea1-832b8095f78e.png&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Argentina&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;categoryId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:category:48&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;sportId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:sport:1&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;tournamentId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:tournament:155&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;tournament&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Liga Profesional&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;allLeagues&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;liveCount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;totalCount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;userFavorite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;eventsByGroup&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;hasVideo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;categoryLogo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.matchplay.com/static/manage-sport/ecf033b1-8831-4961-aea1-832b8095f78e.png&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Argentina&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;categoryId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:category:48&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;sportId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:sport:1&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;tournamentId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:tournament:155&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;tournament&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Liga Profesional&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;liveCount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;totalCount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;userFavorite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;eventsByGroup&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;hasVideo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;categoryLogo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.matchplay.com/static/manage-sport/3c89bcbc-c186-4b9c-ab56-0cca81dc7cf2.png&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Australia&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;categoryId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:category:34&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;sportId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:sport:1&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;tournamentId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:tournament:1268&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;tournament&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Queensland NPL&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;eventsByTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>查找出当前bizCode的值：</p><p>我们可以使用： $.bizCode 来去取到，$ 表示根目录 . 下一级 bizCode 对应的key</p><img src="/2024/07/24/jsonpath/jsonpath3.png" class=""><p>查找出当前topLeagues下的所有数据：</p><p>我们可以使用： $..topLeagues 来去取到，$ 表示根目录，.. 表示递归匹配所有子元素，也就是取到所有的topLeagues的信息</p><img src="/2024/07/24/jsonpath/jsonpath1.png" class=""><p>查找出allLeagues里面第一个数据段的sportId</p><p>我们可以使用： $..allLeagues[0][‘sportId’] $ 表示根目录，.. 表示递归匹配所有子元素，也就是取到所有的topLeagues的信息 其中[0] 表示提取列表中的第一个，[‘sportId’]表示对应的字段信息</p><img src="/2024/07/24/jsonpath/jsonpath2.png" class=""><p>大家可以在这个网站上体验在线提取信息：<a href="https://jsonpath.com/">https://jsonpath.com/</a></p><p>我想经过上面的案例你已经掌握了具体取出值的语法，那么在python中怎么应用呢？假如我们写一个接口测试，我们还用上面的举例，比如此时我要断言当前返回的bizCode是否是10000，因为我们可以自己定义业务code，假设10000 是正常的业务码，那么我们怎么应用呢？</p><h2 id="Python中应用-JsonPath"><a href="#Python中应用-JsonPath" class="headerlink" title="Python中应用 JsonPath"></a>Python中应用 JsonPath</h2><p>那么我们想要提取bizCode的话可以这么做， 首先执行安装第三方的包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install jsonpath<br></code></pre></td></tr></table></figure><p>python 代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jsonpath<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">assert_json</span>(<span class="hljs-params">data,key</span>):<br>    data = json.loads(data)<br>    assert_value = jsonpath.jsonpath(data, key)<br>    <span class="hljs-keyword">if</span> assert_value == <span class="hljs-number">10000</span>:<br>        <span class="hljs-keyword">return</span> assert_value<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>assert_json(data=biz_json, key=<span class="hljs-string">&#x27;$.bizCode&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>上面的代码写了一个方法，需要传入一个json和一个jsonpath语法。jsonpath.jsonpath(data,key) 如果函数未找到返回False, 找到则返回对应的值。那么我们在做接口断言的时候我们就可以轻松的实现对应具体的信息进行测试。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>大家可以看出其实这个还是很简单的，只要我们掌握了这些知识，就可以使得我们在工作中的效率大大提升！</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python JsonPath介绍</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 深拷贝浅拷贝</title>
    <link href="/2024/07/22/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <url>/2024/07/22/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-深拷贝浅拷贝"><a href="#Python-深拷贝浅拷贝" class="headerlink" title="Python 深拷贝浅拷贝"></a>Python 深拷贝浅拷贝</h1><p>大家肯定在学习Python基础知识的时候，已经学过这个了。但是我为什么写在这里呢？因为这里涉及到的知识不仅是深拷贝和浅拷贝还有我们的可变数据结构以及不可变数据结构，说到这个可能大家就会有点陌生了，这又是什么呢？有什么联系呢？那么一起来学习吧！</p><h2 id="深拷贝浅拷贝"><a href="#深拷贝浅拷贝" class="headerlink" title="深拷贝浅拷贝"></a>深拷贝浅拷贝</h2><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>在Python 中我们经常会听见深拷贝和浅拷贝的概念，那么什么是浅拷贝呢？ 下面代码来演示！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>b = a<br><span class="hljs-built_in">print</span>(a==b) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b) <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><p>大家可以从上面的代码中看到，声明了一个列表变量名字为a, 然后将 a 赋值给了 b， 这时候我们查看 a&#x3D;&#x3D;b  a is b 可以看出打印出来的都是true, 那么下面我会进行其他的操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>b = a<br><span class="hljs-built_in">print</span>(a==b)<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<br><br>a.append(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(a==b) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b) <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><p>我在上面的操作中是在a的列表中添加了一个4，但是此时我在执行 a&#x3D;&#x3D;b， a is b 结果仍旧是True,那么大家思考为什么呢？明明我将[1,2,3]也就是初始的a 赋值给了 b， 但是此时我并再次赋值给b,为何会还是一样的呢？那么就是我们要说的浅拷贝了。</p><p>浅拷贝：也就是在内存中重新申请一块，然后存储你浅拷贝的那个对象的地址引用。</p><p>也就是期初在你赋值的时候，b里面存放的是a的内存地址的引用，访问b的时候实际访问的还是a的内存地址，a 和 b 都指向同一个内存对象，当我们修改了a的列表内容的时候，访问b的时候也就会访问到我们最新修改的a。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>b = a<br><span class="hljs-built_in">print</span>(a==b)<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b) <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a)) <span class="hljs-comment"># 138984912667136</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(b)) <span class="hljs-comment"># 138984912667136</span><br><br>a.append(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(a==b)<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a)) <span class="hljs-comment"># 138984912667136</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(b)) <span class="hljs-comment"># 138984912667136</span><br></code></pre></td></tr></table></figure><p>那么经过上述的查看a,b的内存地址就可以更加了解了，那么下面总结一下：</p><img src="/2024/07/22/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/%E6%B5%85%E6%8B%B7%E8%B4%9D.png" class=""><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>代码演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br><br>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>b = copy.deepcopy(a)<br><span class="hljs-built_in">print</span>(a==b) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b) <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><p>此时我们引入了python自带的copy函数，使用了其中的deepcopy方法，这个方法就是深拷贝，当我们使用这个方法的时候，就和上面的浅拷贝不一样了，我们可以看到a和b 的值依旧是一样的，但是a is b 是False, 这是为什么呢？ 下面我们加两行代码就知道了！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br><br>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>b = copy.deepcopy(a)<br><span class="hljs-built_in">print</span>(a==b)<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a)) <span class="hljs-comment"># 134937665356864</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(b)) <span class="hljs-comment"># 134937667268096</span><br></code></pre></td></tr></table></figure><p>那么到这里我相信很多同学已经明白了深拷贝与浅拷贝的不同之处了！</p><p>深拷贝：声明的内存中真正的存储被拷贝的值，不在引用源数据的内存地址。</p><p>那么我们在使用深拷贝的时候就是真正的复制了值到了b中，a和b 也就完全独立了互不影响！可以通过下面的代码来看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br><br>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>b = copy.deepcopy(a)<br><span class="hljs-built_in">print</span>(a==b)<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a)) <span class="hljs-comment"># 134937665356864</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(b)) <span class="hljs-comment"># 134937667268096</span><br><br>a.append(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(a==b) <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b) <span class="hljs-comment"># False</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a)) <span class="hljs-comment"># 134937665356864</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(b)) <span class="hljs-comment"># 134937667268096</span><br></code></pre></td></tr></table></figure><p>那么到此我想你已经明白了深拷贝的含义了！那么刚刚我提到的 可变数据结构 和 不可变数据结构 和这个深拷贝和浅拷贝有什么关系呢？那就让我们一起继续学习吧！</p><h2 id="可变数据结构和不可变数据结构"><a href="#可变数据结构和不可变数据结构" class="headerlink" title="可变数据结构和不可变数据结构"></a>可变数据结构和不可变数据结构</h2><h3 id="可变数据结构"><a href="#可变数据结构" class="headerlink" title="可变数据结构"></a>可变数据结构</h3><p>可变数据结构顾名思义就是这个数据结构可以被改变，比如你可以增加，修改，删除元素。</p><p>那么在python 中可变数据结构有以下几种：</p><ul><li><p><strong>列表（list）</strong>：列表是最常用的可变数据结构之一。你可以向列表中添加、删除或更改元素。</p></li><li><p><strong>字典（dict）</strong>：字典存储键值对，其中键必须是唯一的且不可变（通常是字符串或数字），但值可以是任何数据类型，包括可变类型。你可以添加、删除或更改字典中的键值对。</p></li><li><p><strong>集合（set）</strong> 和 <strong>可变集合（mutable set）</strong>：集合是一个无序的不重复元素集。Python中的集合默认就是可变的，你可以向集合中添加或删除元素，但不能直接修改元素（因为集合的元素必须是唯一的，并且通常是不可变的）。</p></li><li><p><strong>列表推导式、字典推导式等</strong> 生成的数据结构类型（根据推导式的内容，可以是列表、字典等），其可变性取决于推导出的数据结构类型。</p></li></ul><p>在刚刚的浅拷贝例子中就可以看到，我们修改了列表中的元素新增了一个，你也可以执行删除，修改等操作。对于字典，集合， 推导式等都可以做到增删更新操作，这里不在介绍基本的python语法，不太了解的可以自己搜索一下！</p><h3 id="不可变的数据结构"><a href="#不可变的数据结构" class="headerlink" title="不可变的数据结构"></a>不可变的数据结构</h3><p>那么不可变的数据结构就是不允许被更改，比如修改，增加，删除等操作。</p><p>那么python中有以下不可变的数据结构：</p><ul><li><p><strong>整数（int）</strong> 和 <strong>浮点数（float）</strong>：这些基本数据类型是不可变的，你不能改变一个整数或浮点数的值。</p></li><li><p><strong>字符串（str）</strong>：字符串在Python中是不可变的。如果你尝试修改字符串中的某个字符，比如通过索引赋值，Python会抛出一个TypeError。相反，你需要创建一个新的字符串。</p></li><li><p><strong>元组（tuple）</strong>：元组也是不可变的。一旦你创建了一个元组，你就不能更改它的元素（尽管如果元组中的元素是可变的，比如列表，你可以修改列表的元素，但元组的结构本身——即元素的顺序和数量——是不可变的）。</p></li></ul><p>以上的数据结构是无法更改内容的，也就是不可变的数据结构，下面代码解释：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;1&#x27;</span><br>b = a<br><span class="hljs-built_in">print</span>(a==b) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b) <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><p>那么，我们以字符类型举例，可见我还是我们赋值给了b，两者也是相同的值，相同的内存地址，那么如果我此时修改a的内容会引发什么呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;1&#x27;</span><br>b = a<br><span class="hljs-built_in">print</span>(a==b)<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<br><br>a = <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-built_in">print</span>(a==b) <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b) <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><p>这时可能有同学就会有疑问了，哎，怎么上面刚刚说完浅拷贝如果改了会都发生变化呀，哈哈，这里其实浅拷贝对应如果是可变的数据结构是可以的，但是如果对应到不可变数据结构就不行了，因为我们的数据结构已经定义了不能被改变，所以这就是为什么要将深拷贝浅拷贝和可变数据结构以及不可变结构放在一起介绍的原因。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;1&#x27;</span><br>b = a<br><span class="hljs-built_in">print</span>(a==b)<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a)) <span class="hljs-comment"># 135575780975872</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(b)) <span class="hljs-comment"># 135575780975872</span><br><br>a = <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-built_in">print</span>(a==b)<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a)) <span class="hljs-comment"># 135575780975928</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(b)) <span class="hljs-comment"># 135575780975872</span><br></code></pre></td></tr></table></figure><p>根据上面的例子你会发现，浅拷贝的意义依然是存在的，我们可以看到b的内存与起初a的是一样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br>a = <span class="hljs-string">&#x27;1&#x27;</span><br>b = copy.deepcopy(a)<br><span class="hljs-built_in">print</span>(a==b)<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a)) <span class="hljs-comment"># 133333075571968</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(b)) <span class="hljs-comment"># 133333075571968</span><br><br>a = <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-built_in">print</span>(a==b)<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a)) <span class="hljs-comment"># 133333075572024</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(b)) <span class="hljs-comment"># 133333075571968</span><br></code></pre></td></tr></table></figure><p>从上面的例子也可以发现，即使我们使用了深拷贝，b 也依旧保存的是 a 的内存地址，当a 发生了变化b 也不会发生变化。</p><p>那么 我再将上面的可变数据结构的例子放在一起对比一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>b = copy.deepcopy(a)<br><span class="hljs-built_in">print</span>(a==b)<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a)) <span class="hljs-comment"># 134937665356864</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(b)) <span class="hljs-comment"># 134937667268096</span><br><br>a.append(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(a==b) <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b) <span class="hljs-comment"># False</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a)) <span class="hljs-comment"># 134937665356864</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(b)) <span class="hljs-comment"># 134937667268096</span><br></code></pre></td></tr></table></figure><p>那么我们可以发现，在可变数据结构中当我们深拷贝a的时候 此时 a,b的内存地址是不一样的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>深拷贝 和 浅拷贝 在面对可变和不可变的数据结构的时候，对应的表现是不一样的，所以我们要掌握可变数据结构和不可变数据结构，在编写程序的时候选择对应的数据结构才能使得我们的程序更加健壮！</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 深拷贝浅拷贝</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你认为的</title>
    <link href="/2024/07/15/%E4%BD%A0%E8%AE%A4%E4%B8%BA%E7%9A%84/"/>
    <url>/2024/07/15/%E4%BD%A0%E8%AE%A4%E4%B8%BA%E7%9A%84/</url>
    
    <content type="html"><![CDATA[<h1 id="你认为的"><a href="#你认为的" class="headerlink" title="你认为的"></a>你认为的</h1><p>最近，突然发现一种不一样的感觉，其实这也不能说最近，应该是一直都有，只是最近的感觉越来越浓烈，也不知道是工作原因还是生活上的原因，就是你认为的不一定是对的，听到的看到的也不一定是真的！</p><p>可能很多朋友会觉得这啥意思，就拿例子来举证，最近的粮油里面添加了矿油，第一开始我听到这个事件的时候，我会觉得怎么可以这样，没有一丝的对食品安全的敬畏之心，对国家部门的失望，也会加入声讨的队伍中，但是后来我又发现了有人从不一样的角度解析了这件事情，说这个油为什么没说最终运往了哪里呢？在化工领域也会存在大豆油的使用，会不会是去了化工类的公司呢？记者是否在制造舆论呢？</p><p>种种分析让我开始又站在了这一面，这时候其实我也矛盾了，开始仔细的想这件事情，为什么我们在没看到是事实的时候总会听信一件事，然后发表自己的言论，当另一种观点出现的时候又被折服，换到工作中，生活中也是一样，老人对你说坏的东西可以吃点好的那部分，然后扔掉！医生告诉你不能吃，我们不好好学习，长大就会没出息，也有人说你看谁谁家孩子都没上学现在都是老板了！</p><p>这样的声音随着我长大会听的越来越多，所以我总结不管在生活中还是工作中，当听到某一件事情的时候如果涉及到了一些负面评论或利益关系，首先不要着急的听取一方的话，然后下决定，要多看多观察多思考，听听不一样的声音，总会让你对事情了解的更彻底，这样再去采取对应的措施去解决，会比你第一开始就扎进去来的好的多！</p><p>随着年龄的增长，我们的见识，思想，处理方式都会发生变化，在面对不一样的事情的时候多多听听不同角度的声音，我想这总是好的，你认为呢？</p><img src="/2024/07/15/%E4%BD%A0%E8%AE%A4%E4%B8%BA%E7%9A%84/you.jpeg" class="">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
      <category>2024年随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>随笔</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python __init__.py 的介绍</title>
    <link href="/2024/07/15/init%E6%96%B9%E6%B3%95/"/>
    <url>/2024/07/15/init%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-init-py-的介绍"><a href="#Python-init-py-的介绍" class="headerlink" title="Python__init__.py 的介绍"></a>Python__init__.py 的介绍</h1><p>大家在平常的时候都会看到__init__.py这个文件，但是大家知道这个__init__.py实际上拥有很多功能，那么你知道那些呢？一起来看看吧！</p><h2 id="什么是-init-py"><a href="#什么是-init-py" class="headerlink" title="什么是__init__.py?"></a>什么是__init__.py?</h2><p>在Python中，<strong>init</strong>.py 通常用来声明这是一个paython package, 但是不是一个普通的文件，有了它Python就可以正确导入和使用该目录下的模块和子文件。</p><h2 id="标识文件夹是Python-Package"><a href="#标识文件夹是Python-Package" class="headerlink" title="标识文件夹是Python Package"></a>标识文件夹是Python Package</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">demo/<br>    --__init__.py<br>    --demo.py<br></code></pre></td></tr></table></figure><h2 id="可以赋予一些初始化想要做的功能"><a href="#可以赋予一些初始化想要做的功能" class="headerlink" title="可以赋予一些初始化想要做的功能"></a>可以赋予一些初始化想要做的功能</h2><p>当我们在写项目的时候，有时候需要log记录，那么我们只需在 __init__的文件中声明即可在程序启动的时候进行初始化，无需在某个文件中再次导入初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># demo/__init__.py</span><br><br><span class="hljs-keyword">from</span> demo.logs <span class="hljs-keyword">import</span> logger<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_logs</span>():<br>    logger().get_loger()<br></code></pre></td></tr></table></figure><p>那么在本目录下我们只需要</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> get_logger()<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">run_case</span>():<br>    logger().info(<span class="hljs-string">&quot;这是一个log&quot;</span>)<br>    <span class="hljs-keyword">pass</span><br>    <br></code></pre></td></tr></table></figure><h2 id="控制import-下导入的模块"><a href="#控制import-下导入的模块" class="headerlink" title="控制import * 下导入的模块"></a>控制import * 下导入的模块</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">demo/<br>    --__init__.py<br>    --demo1.py<br>    --demo2.py<br>    --demo3.py<br></code></pre></td></tr></table></figure><p>假如我们在目录下有个demo4.py 想要使用import *(原则上不推荐这么导入包，最好指定包名)，但是不想导入demo3里面的内容，那么我就可以在__init__.py文件内定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">demo/__init__.py<br>    __all__ = [<span class="hljs-string">&#x27;demo1&#x27;</span>, <span class="hljs-string">&#x27;demo2&#x27;</span>]<br></code></pre></td></tr></table></figure><p>当你执行 import * 的时候只会导入 demo1, demo2 的内容。或者在__init__ 文件下定义需要导入的函数名称，包含子函数的递归等。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在Python中，<strong>init</strong>.py 文件是一个特殊的文件，它存在于Python包的目录中。Python通过__init__.py文件来识别目录是否应该被视为一个Python包（package）。当一个目录包含__init__.py文件时，Python解释器就会将该目录视为一个Python包，允许你通过import语句来导入该目录下的模块或子包。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python __init__.py 的介绍</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Pytest的接口测试框架</title>
    <link href="/2024/07/12/pytest%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <url>/2024/07/12/pytest%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="基于Pytest的接口测试框架"><a href="#基于Pytest的接口测试框架" class="headerlink" title="基于Pytest的接口测试框架"></a>基于Pytest的接口测试框架</h1><p>这是一款基于pytest框架的开源测试框架,功能涵盖请求体保存, allure生成, log生成, 全局变量存储, 全局变量使用, 断言返回体 等多种功能组合</p><p>github地址是：<a href="https://github.com/dreamshao/pytest-autotest-interface">https://github.com/dreamshao/pytest-autotest-interface</a></p><h2 id="详细介绍"><a href="#详细介绍" class="headerlink" title="详细介绍"></a>详细介绍</h2><pre><code class="hljs">框架图：  —接口自动化测试     --allure_report     --allure-results     --BaseRequests       ---__init__.py       ---BaseRequests.py     --Data       ---data.db       ---data.xlsx       ---sqlite 可视化安装包       ---read_data.py     --logs     --RequestObject       ---request_runner.py     --TestCases       -- 测试用例     --Utils       --json_assert.py       --logger.py       --replace_requests.py       --variable_handler.py      --man.py      --requirements.txt</code></pre><h2 id="开始前必须了解的东西"><a href="#开始前必须了解的东西" class="headerlink" title="开始前必须了解的东西"></a>开始前必须了解的东西</h2><h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><p>数据存储用到了sqlite，这个轻量级的数据库，无需额外安装第三方的包，也没有mysql那么大对资源要求低，当然也支持excel，里面也封装好了数据。</p><p>支持运行生成sql 的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data_from_sqlite</span>(<span class="hljs-params">self, sql_command, name, sql_db_path=<span class="hljs-literal">None</span>, query_sql_type=<span class="hljs-literal">False</span></span>):<br>    <span class="hljs-keyword">try</span>:<br>        cur = self.connect_sqlite(name)<br>        <span class="hljs-keyword">if</span> query_sql_type:<br>            <span class="hljs-keyword">if</span> cur:<br>                logger.info(<span class="hljs-string">f&quot;执行查询操作 执行语句是 <span class="hljs-subst">&#123;sql_command&#125;</span>&quot;</span>)<br>                cur[<span class="hljs-number">0</span>].execute(sql_command)<br>                re = cur[<span class="hljs-number">0</span>].fetchall()<br>                <span class="hljs-built_in">print</span>(re)<br>                <span class="hljs-comment"># 关闭Cursor</span><br>                cur[<span class="hljs-number">0</span>].close()<br>                <span class="hljs-comment"># 关闭conn</span><br>                cur[<span class="hljs-number">1</span>].close()<br>                list_of_re = [[item <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> tup] <span class="hljs-keyword">for</span> tup <span class="hljs-keyword">in</span> re]<br>                logger.info(<span class="hljs-string">f&quot;执行查询操作 成功返回的数据是 <span class="hljs-subst">&#123;list_of_re&#125;</span>&quot;</span>)<br>                <span class="hljs-keyword">return</span> list_of_re<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> cur:<br>                logger.info(<span class="hljs-string">f&quot;执行非查询操作 执行语句是 <span class="hljs-subst">&#123;sql_command&#125;</span>&quot;</span>)<br>                cur[<span class="hljs-number">0</span>].execute(sql_command)<br>                cur[<span class="hljs-number">1</span>].commit()<br>                <span class="hljs-comment"># 关闭Cursor</span><br>                cur[<span class="hljs-number">0</span>].close()<br>                <span class="hljs-comment"># 关闭conn</span><br>                cur[<span class="hljs-number">1</span>].close()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        logger.info(<span class="hljs-string">f&quot;创建数据库失败,具体原因是 <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>其中要传入sql_command 是sql语句，name 是 数据库名字，query_sql_type 是要确定是你要查询还是 增删改 数据 查询传递True，其余就是False</p><p>这里也准备了sqlite的可是化安装包，不过是windows，这个网络很多也可以自己下载</p><img src="/2024/07/12/pytest%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/sqlite%E5%8F%AF%E8%A7%86%E5%8C%96.png" class=""><p>数据库的表目前有两个，分别是： requests, variable</p><p>requests: 存储请求信息断言信息等。</p><img src="/2024/07/12/pytest%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/requests%E8%A1%A8.png" class=""><p>variable 存储变量信息。</p><img src="/2024/07/12/pytest%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/variable%E8%A1%A8.png" class=""><h3 id="数据断言及变量获取"><a href="#数据断言及变量获取" class="headerlink" title="数据断言及变量获取"></a>数据断言及变量获取</h3><p>这里都用到了一个东西叫jsonpath，这里不知道的可以自己查询一下，稍后我也会更新关于jsonpath的文章，将连接填写到这里方便查看</p><p>文章已经更新： 关于jsonpath的文章地址：<a href="https://8888666.top/2024/07/24/jsonpath/">https://8888666.top/2024/07/24/jsonpath/</a> </p><p>可以看一下已经存储的jsonpath：</p><img src="/2024/07/12/pytest%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/jsonpath.png" class=""><h3 id="报告及log"><a href="#报告及log" class="headerlink" title="报告及log"></a>报告及log</h3><p>报告生成采用的allure，allure report 目前没有保存旧的报告，可以去掉相关代码，实现旧的报告存储，log日志生成规则按天生成文件夹，按启动时间生成日志</p><p>allure 报告：</p><img src="/2024/07/12/pytest%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/allure%E6%8A%A5%E5%91%8A.png" class=""><img src="/2024/07/12/pytest%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/allure%E6%8A%A5%E5%91%8A2.png" class=""><p>log 日志：</p><img src="/2024/07/12/pytest%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/log.png" class=""><h2 id="具体封装逻辑及操作详解"><a href="#具体封装逻辑及操作详解" class="headerlink" title="具体封装逻辑及操作详解"></a>具体封装逻辑及操作详解</h2><h3 id="基本请求封装"><a href="#基本请求封装" class="headerlink" title="基本请求封装"></a>基本请求封装</h3><p>我们的接口请求一般都是GET, POST, PUT, DELETE这四种较为常见, 目前就是封装了这四种 具体的文件是 BaseRequests 下的 BaseRequests.py文件</p><p>举例 按照 GET 请求讲解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_request</span>(<span class="hljs-params">self, url, params=<span class="hljs-literal">None</span>, headers=<span class="hljs-literal">None</span></span>):<br>       <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">       get 请求</span><br><span class="hljs-string">       :param url: 请求url</span><br><span class="hljs-string">       :param params: 请求入参</span><br><span class="hljs-string">       :param headers: 请求头</span><br><span class="hljs-string">       :return: Boolean</span><br><span class="hljs-string">       &quot;&quot;&quot;</span><br>       <span class="hljs-keyword">try</span>:<br>           logger.info(<span class="hljs-string">f&quot;开始进入get请求, 当前请求url是<span class="hljs-subst">&#123;url&#125;</span>, params是<span class="hljs-subst">&#123;params&#125;</span>, headers是<span class="hljs-subst">&#123;headers&#125;</span>&quot;</span>)<br>           result = requests.get(url=url, params=params, headers=headers)<br>           <span class="hljs-keyword">if</span> result.status_code == <span class="hljs-number">200</span>:<br>               logger.info(<span class="hljs-string">f&#x27;当前请求成功，返回的http_code是 200, 返回结果是 <span class="hljs-subst">&#123;result.text&#125;</span>&#x27;</span>)<br>               <span class="hljs-keyword">return</span> result.text<br>           <span class="hljs-keyword">else</span>:<br>               logger.info(<span class="hljs-string">f&#x27;当前返回出现了问题，返回的http_code是<span class="hljs-subst">&#123;result.status_code&#125;</span>,返回的信息是<span class="hljs-subst">&#123;result.text&#125;</span>&#x27;</span>)<br>               <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>       <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>           logger.info(<span class="hljs-string">f&quot;当前请求出现了问题，请求方式是 GET, 地址是 <span class="hljs-subst">&#123;url&#125;</span>, params是<span class="hljs-subst">&#123;params&#125;</span>, headers是<span class="hljs-subst">&#123;headers&#125;</span>, 出现的问题是 <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>这里首先封装了一个基础请求也就是把我们的requests下的get请求进行了简单封装，判断了返回的httpcode是否是200，返回布尔值。</p><h3 id="更进一步的封装一个get请求"><a href="#更进一步的封装一个get请求" class="headerlink" title="更进一步的封装一个get请求"></a>更进一步的封装一个get请求</h3><p>我的思路是在封装的时候最底层的最少接触业务层代码，所以在 RequestObject 下重新二次封装业务信息的 request_runner.py</p><p>举例 按照 POST 请求讲解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">post_request_runner</span>(<span class="hljs-params">self, <span class="hljs-built_in">id</span>, replace_type=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">     post请求</span><br><span class="hljs-string">    :param id: id: 数据库用例Id</span><br><span class="hljs-string">    :param replace_type: replace_type: 替换类型 1：url 替换 2：data 替换 默认None 不替换</span><br><span class="hljs-string">    :return: 失败 False 成功 dict</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    logger.info(<span class="hljs-string">&quot;当前进入post测试用例中&quot;</span>)<br>    <span class="hljs-keyword">if</span> replace_type == <span class="hljs-number">1</span>:<br>        self.url = Replace_Request(url=self.url).repalce_request_url()<br>    <span class="hljs-keyword">else</span>:<br>        self.data = Replace_Request(data=self.data).replace_request_data()<br>    result = BaseRequests().post_request(url=self.url, headers=json.loads(self.headers), data=self.data)<br>    <span class="hljs-keyword">if</span> result:<br>        result_json = json.loads(result)<br>        DataManger().get_data_from_sqlite(name=<span class="hljs-string">&quot;data&quot;</span>,<br>                                          sql_command=<span class="hljs-string">&quot;UPDATE requests SET response_body = &#x27;&#123;response_body&#125;&#x27; where id = &#123;id&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<br>                                              response_body=json.dumps(result), <span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>),<br>                                          query_sql_type=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">if</span> self.assert_info <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            result = Assert_Json().assert_info(result_json, self.assert_info)<br>            <span class="hljs-keyword">if</span> result:<br>                logger.info(<span class="hljs-string">&quot;测试全部通过&quot;</span>)<br>                <span class="hljs-keyword">return</span> result_json<br>            <span class="hljs-keyword">else</span>:<br>                logger.info(<span class="hljs-string">&quot;测试存在失败&quot;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">else</span>:<br>            logger.info(<span class="hljs-string">&quot;测试全部通过&quot;</span>)<br>            <span class="hljs-keyword">return</span> result_json<br><br>    <span class="hljs-keyword">else</span>:<br>        logger.info(<span class="hljs-string">&quot;当前请求失败&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;失败了！&quot;</span>)<br></code></pre></td></tr></table></figure><p>其中需要传递当前数据库存储的用例id, 以及是否要进行替换，这里说明一下两个参数的作用。</p><p>第一： id 是为了存储当前用例请求返回后存储的值</p><p>第二： replace_type 是为了是否进行替换，在我们流程性请求中我们一般都需要进行整体性的测试，那么我们就需要做到可以拿到上个的某个返回值作为下一个接口的输入值，这<br>      个作用就是这个, 1 是url 进行替换 2 是 data进行替换</p><p>如果需要断言 则是 Assert_Json 这个类 需要传入一个接口返回值， 以及断言的jsponpath</p><p>返回： 成功则是返回接口的返回体，不成功则返回False</p><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><p>我们的测试用例也是只需写部分代码即可完成断言，变量的存储，变量的替换。</p><p>举例：Today 比赛列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@allure.step(<span class="hljs-params"><span class="hljs-string">&quot;Today比赛列表&quot;</span></span>)</span><br><span class="hljs-meta">  @pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&#x27;id, url, method, headers, request_data, params, json, assert_jsonpath, response_body, remarks&#x27;</span>,</span></span><br><span class="hljs-params"><span class="hljs-meta">                           DataManger(<span class="hljs-params"></span>).get_data_from_sqlite(<span class="hljs-params">name=<span class="hljs-string">&quot;data&quot;</span>,sql_command=<span class="hljs-string">&#x27;&#x27;&#x27;select * from requests where id= 2&#x27;&#x27;&#x27;</span>,</span></span></span><br><span class="hljs-params"><span class="hljs-params"><span class="hljs-meta">                                                             query_sql_type=<span class="hljs-literal">True</span></span>)</span>)</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_match_list</span>(<span class="hljs-params">self, <span class="hljs-built_in">id</span>, url, method, headers, request_data, params, json, assert_jsonpath, response_body, remarks</span>):<br>      logger.info(<span class="hljs-string">f&quot;开始测试比赛列表&quot;</span>)<br>      result = Request_Runner(url=url, headers=headers, assert_info=assert_jsonpath).get_request_runner(<span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>)<br>      logger.info(<span class="hljs-string">f&quot;测试结果是 <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>      <span class="hljs-keyword">if</span> result:<br>          Variable_Handler(variable_name=[<span class="hljs-string">&quot;eventid&quot;</span>,<span class="hljs-string">&quot;competitorid&quot;</span>], response_body=result).variable_handler()<br>      <span class="hljs-keyword">assert</span> result <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>这里用了allure报告的setp方法进行标识用例信息，采用了pytest.mark.parametrize的参数化方法，这里是从数据库里面提取数据，当前也支持从excel中提取数据，里面调用了封装的请求方法传递了id,这里还调用了Variable_Handler 这个类， 这里类就是实现存储变量的方法，variable_name 需要传递一个列表，里面是你的变量名称，response_body 是接口返回的值。这样我们就可以将我们需要的变量存储下来。</p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>json_assert.py 是实现 断言的 采用的是 jsonpath 的方法获取对应信息进行对比</p><p>logger.py 是日志的生成</p><p>replace_request.py 是变量的替换，支持url 替换， data 替换</p><p>variable_handler.py 是变量的存储功能</p><h3 id="main-文件"><a href="#main-文件" class="headerlink" title="main 文件"></a>main 文件</h3><p>也就是主文件，用来实现调用pytest以及生成allure报告 </p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-v&#x27;</span>, <span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;--alluredir=allure-results&#x27;</span>, <span class="hljs-string">&#x27;--clean-alluredir&#x27;</span>])<br>    cmd = <span class="hljs-string">&quot;allure generate ./allure-results report --clean&quot;</span><br>    subprocess.run(cmd, shell=<span class="hljs-literal">True</span>)<br>    cmd = <span class="hljs-string">&quot;allure open -h 127.0.0.1 -p 8883 allure-report&quot;</span><br>    subprocess.run(cmd, shell=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h2 id="demo-解析"><a href="#demo-解析" class="headerlink" title="demo 解析"></a>demo 解析</h2><p>当案例中有四个url</p><p>其中包含变量存储 以及 替换的是：remarks 里面的 比赛列表页， 这里存储了两个变量分别是eventid, competitorid。将对应的值保存到variable表中。</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@allure.step(<span class="hljs-params"><span class="hljs-string">&quot;Today比赛列表&quot;</span></span>)</span><br><span class="hljs-meta">  @pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&#x27;id, url, method, headers, request_data, params, json, assert_jsonpath, response_body, remarks&#x27;</span>,</span></span><br><span class="hljs-params"><span class="hljs-meta">                           DataManger(<span class="hljs-params"></span>).get_data_from_sqlite(<span class="hljs-params">name=<span class="hljs-string">&quot;data&quot;</span>,sql_command=<span class="hljs-string">&#x27;&#x27;&#x27;select * from requests where id= 2&#x27;&#x27;&#x27;</span>,</span></span></span><br><span class="hljs-params"><span class="hljs-params"><span class="hljs-meta">                                                             query_sql_type=<span class="hljs-literal">True</span></span>)</span>)</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_match_list</span>(<span class="hljs-params">self, <span class="hljs-built_in">id</span>, url, method, headers, request_data, params, json, assert_jsonpath, response_body, remarks</span>):<br>      logger.info(<span class="hljs-string">f&quot;开始测试比赛列表&quot;</span>)<br>      result = Request_Runner(url=url, headers=headers, assert_info=assert_jsonpath).get_request_runner(<span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>)<br>      logger.info(<span class="hljs-string">f&quot;测试结果是 <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>      <span class="hljs-keyword">if</span> result:<br>          Variable_Handler(variable_name=[<span class="hljs-string">&quot;eventid&quot;</span>,<span class="hljs-string">&quot;competitorid&quot;</span>], response_body=result).variable_handler()<br>      <span class="hljs-keyword">assert</span> result <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>使用变量的是 remarks 是订阅比赛，深度数据 这里分别用到了 url 替换 以及 data 替换。</p><p>代码：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta"> @allure.step(<span class="hljs-params"><span class="hljs-string">&quot;订阅比赛，采用全局变量&quot;</span></span>)</span><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-meta">    <span class="hljs-string">&#x27;id, url, method, headers, request_data, params, json, assert_jsonpath, response_body, remarks&#x27;</span>,</span></span><br><span class="hljs-params"><span class="hljs-meta">    DataManger(<span class="hljs-params"></span>).get_data_from_sqlite(<span class="hljs-params">name=<span class="hljs-string">&quot;data&quot;</span>, sql_command=<span class="hljs-string">&#x27;&#x27;&#x27;select * from requests where id= 4&#x27;&#x27;&#x27;</span>,</span></span></span><br><span class="hljs-params"><span class="hljs-params"><span class="hljs-meta">                                      query_sql_type=<span class="hljs-literal">True</span></span>)</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_match_subscribe_list</span>(<span class="hljs-params">self, <span class="hljs-built_in">id</span>, url, method, headers, request_data, params, json, assert_jsonpath,</span><br><span class="hljs-params">                           response_body,</span><br><span class="hljs-params">                           remarks</span>):<br>    logger.info(<span class="hljs-string">f&quot;订阅比赛信息&quot;</span>)<br>    result = Request_Runner(url=url, headers=headers, data=request_data, assert_info=assert_jsonpath).post_request_runner(<span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>, replace_type=<span class="hljs-number">1</span>)<br>    logger.info(<span class="hljs-string">f&quot;测试结果是 <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>    <span class="hljs-comment"># if result[0] is True:</span><br>    <span class="hljs-comment">#     Variable_Handler(id=2, variable_name=&quot;eventid&quot;).variable_handler()</span><br>    <span class="hljs-keyword">assert</span> result <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">False</span><br><br><span class="hljs-meta">@allure.step(<span class="hljs-params"><span class="hljs-string">&quot;深度数据，采用全局变量&quot;</span></span>)</span><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-meta">    <span class="hljs-string">&#x27;id, url, method, headers, request_data, params, json, assert_jsonpath, response_body, remarks&#x27;</span>,</span></span><br><span class="hljs-params"><span class="hljs-meta">    DataManger(<span class="hljs-params"></span>).get_data_from_sqlite(<span class="hljs-params">name=<span class="hljs-string">&quot;data&quot;</span>, sql_command=<span class="hljs-string">&#x27;&#x27;&#x27;select * from requests where id= 5&#x27;&#x27;&#x27;</span>,</span></span></span><br><span class="hljs-params"><span class="hljs-params"><span class="hljs-meta">                                      query_sql_type=<span class="hljs-literal">True</span></span>)</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_match_subscribe_list</span>(<span class="hljs-params">self, <span class="hljs-built_in">id</span>, url, method, headers, request_data, params, json, assert_jsonpath,</span><br><span class="hljs-params">                              response_body,</span><br><span class="hljs-params">                              remarks</span>):<br>    logger.info(<span class="hljs-string">f&quot;订阅比赛信息&quot;</span>)<br>    result = Request_Runner(url=url, headers=headers, data=request_data,<br>                            assert_info=assert_jsonpath).post_request_runner(<span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>, replace_type=<span class="hljs-number">2</span>)<br>    logger.info(<span class="hljs-string">f&quot;测试结果是 <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">assert</span> result <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>之前我做的是基于Django+vue 的测试开发平台，已经稳定运行了3年+, 最近想要把部分功能用Pytest实现，也就做出了一版，这版肯定有很多不足，欢迎各位大神批评和建议！让我们一起进步努力！</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>接口测试框架</category>
      
      <category>基于Pytest的接口测试框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Pytest</tag>
      
      <tag>接口测试框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个网页集合所有AI访问！</title>
    <link href="/2024/07/04/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    <url>/2024/07/04/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h1 id="AI-生产力工具集合"><a href="#AI-生产力工具集合" class="headerlink" title="AI 生产力工具集合"></a>AI 生产力工具集合</h1><p>在当前AI浪潮下如果你还没使用过AI那你肯定是落伍了，你还在苦于寻找AI网站吗？来这里全部给你做好了！</p><h2 id="ChatGpt-热门"><a href="#ChatGpt-热门" class="headerlink" title="ChatGpt 热门"></a>ChatGpt 热门</h2><p>支持4.0模型和MJ绘画</p><p>超级智能助理 - <a href="https://chaoji.aizhuli.cc/" target="_blank">超级智能助理</a></p><hr><p>国内TOP级AI大模型</p><p>KimiChat - <a href="https://kimi.moonshot.cn/" target="_blank">KimiChat</a></p><hr><p>体验口碑还不错</p><p>讯飞星火 - <a href="https://xinghuo.xfyun.cn/" target="_blank">讯飞星火</a></p><hr><p>清华开源热门大模型</p><p>智谱清言 - <a href="https://chatglm.cn/" target="_blank">智谱清言</a></p><hr><p>阿里出品，国内顶级大模型</p><p>阿里通义千问 - <a href="https://tongyi.aliyun.com/" target="_blank">阿里通义千问</a></p><hr><p>百度出品, 我经常使用</p><p>文心一言 - <a href="https://yiyan.baidu.com/" target="_blank">文心一言</a>></p><hr><p>字节旗下AI大模型</p><p>豆包 - <a href="https://doubao.com" target="_blank">豆包</a></p><h2 id="多种角色AI生产力工具"><a href="#多种角色AI生产力工具" class="headerlink" title="多种角色AI生产力工具"></a>多种角色AI生产力工具</h2><p>官方设计样式，简洁好用</p><p>AI问答复刻版 - <a href="https://m.openaichat.cc/web/" target="_blank">AI问答复刻版</a></p><hr><p>一键生成角色扮演指令</p><p>ChatGPT角色生成器 - <a href="https://role.aicoser.com.cn/zh" target="_blank">ChatGPT角色生成器</a></p><hr><p>一键生成BRTR任务指令模板</p><p>ChatGPT指令生成器 - <a href="https://prompt.aicoser.com.cn/" target="_blank">ChatGPT指令生成器</a></p><hr><p>纯正小红书风，一键轻松创作</p><p>小红书生成器 - <a href="https://ai.xiaohongshu.live/zh" target="_blank">小红书生成器</a></p><hr><p>AI佛祖，在线为你解忧</p><p>AI佛祖 - <a href="https://ask.aifozu.cn/zh" target="_blank">AI佛祖</a></p><hr><p>AI律师，在线咨询法律问题</p><p>AI律所 - <a href="https://ask.ailvsuo.com.cn/zh" target="_blank">AI律所</a></p><hr><p>无脑夸，一定让你开心自信起来！</p><p>AI夸夸 - <a href="https://me.aikuakua.cn/zh" target="_blank">AI夸夸</a></p><hr><p>支持上百种文档报告和流程图</p><p>多墨智能 - <a href="https://duomosmart.com/" target="_blank">多墨智能</a></p><hr><p>通过问答快速制作Excel</p><p>ChatExcel - <a href="https://chatexcel.com/" target="_blank">ChatExcel</a></p><hr><p>通过问答快速制作PPT</p><p>ChatPPT - <a href="https://chatppt.yoo-ai.com/" target="_blank">ChatPPT</a></p><hr><p>一键总结B站视频内容</p><p>BiliGPT - <a href="https://b.jimmylv.cn/" target="_blank">BiliGPT</a></p><h2 id="国内新生势力AI"><a href="#国内新生势力AI" class="headerlink" title="国内新生势力AI"></a>国内新生势力AI</h2><p>非常好用的AI搜索工具</p><p>秘塔AI搜索 - <a href="https://metaso.cn/" target="_blank">秘塔AI搜索</a></p><hr><p>腾讯旗下AI大模型</p><p>腾讯元宝 - <a href="https://yuanbao.tencent.com" target="_blank">腾讯元宝</a></p><hr><p>百川智能旗下AI大模型</p><p>百小应AI - <a href="https://ying.baichuan-ai.com/" target="_blank">百小应AI</a></p><hr><p>零代码生成AI应用，支持模型训练</p><p>Zelinai - <a href="https://www.zelinai.com/" target="_blank">Zelinai</a></p><hr><p>[内测]定制语料训练的机器人，百姓AI出品</p><p>Chato - <a href="https://chato.cn/" target="_blank">Chato</a></p><hr><p>商汤老牌AI</p><p>商汤日日新 - <a href="https://techday.sensetime.com/" target="_blank">商汤日日新</a></p><hr><p>昆仑</p><p>昆仑天工大模型 - <a href="https://tiangong.kunlun.com/" target="_blank">昆仑天工大模型</a></p><hr><p>复旦团队出品</p><p>Moss大模型 - <a href="https://moss.fastnlp.top/" target="_blank">Moss大模型</a></p><hr><p>MiniMax</p><p>MiniMax大模型 - <a href="https://api.minimax.chat/" target="_blank">MiniMax大模型</a></p><hr><p>提供GPT书本翻译服务，付费</p><p>风声雨声 - <a href="https://fsys.app/" target="_blank">风声雨声</a></p><hr><p>可使用AzureGPT服务</p><p>Mbmzone - <a href="https://openai.mbmzone.com/" target="_blank">Mbmzone</a></p><h2 id="海外ChatGpt"><a href="#海外ChatGpt" class="headerlink" title="海外ChatGpt"></a>海外ChatGpt</h2><p>[海外]chatgpt聊天官网</p><p>ChatGPT官网 - <a href="https://chatgpt.com" target="_blank">ChatGPT官网</a></p><hr><p>AI写作助手，chatgpt的强力竞争者</p><p>Notion AI - <a href="https://www.notion.so/product/ai" target="_blank">Notion AI</a></p><hr><p>[海外]和ChatGPT同样强大的AI大模型</p><p>Claude - <a href="https://www.claude.ai" target="_blank">Claude</a></p><hr><p>[海外]平替，集成gpt、claude等十款机器人</p><p>Poe - <a href="https://poe.com/" target="_blank">Poe</a></p><hr><p>[海外]必应搜索用GPT</p><p>Bing Chat - <a href="https://www.bing.com/" target="_blank">Bing Chat</a></p><hr><p>[海外]用户创建AI角色</p><p>Character AI - <a href="https://beta.character.ai/" target="_blank">Character AI</a></p><hr><p>历史人物Ai对话</p><p>Hellohistory - <a href="https://www.hellohistory.ai/" target="_blank">Hellohistory</a></p><hr><p>虚拟人视频口语练习</p><p>CallAnnie - <a href="https://callannie.ai/" target="_blank">CallAnnie</a></p><hr><p>AI人物语音口语练习</p><p>TalkMe - <a href="https://www.talkme.ai/" target="_blank">TalkMe</a></p><hr><p>GitHub的编程AI神器</p><p>GitHub Copilot - <a href="https://github.com/features/preview/copilot-x" target="_blank">GitHub Copilot</a></p><hr><p>支持上传文件创建助手</p><p>Chatbase - <a href="https://www.chatbase.co/" target="_blank">Chatbase</a></p><hr><p>可创建自己的机器人应用</p><p>Dify - <a href="https://dify.ai/" target="_blank">Dify</a></p><hr><p>微软办公软件接入ChatGPT</p><p>微软Copilot - <a href="https://news.microsoft.com/reinventing-productivity/" target="_blank">微软Copilot</a></p><h2 id="ChatGpt学习"><a href="#ChatGpt学习" class="headerlink" title="ChatGpt学习"></a>ChatGpt学习</h2><p>chatgpt指令，中英双语版本</p><p>Shortcut - <a href="https://www.aishort.top/" target="_blank">Shortcut</a></p><hr><p>ChatGPT中文版角色调教指令大全</p><p>ChatGPT调教指令 - <a href="https://ai.weurl.com.cn/chatgpt-role-prompts/" target="_blank">ChatGPT调教指令</a></p><hr><p>科大讯飞官方出品</p><p>讯飞星火指令大全 - <a href="https://xinghuo.xfyun.cn/instruction" target="_blank">讯飞星火指令大全</a></p><hr><p>台风编写的角色指令三板斧</p><p>ChatGPT角色指令调教指南 - <a href="https://mp.weixin.qq.com/s/ItTOCAYCXWzVo1Tp_AGrqw" target="_blank">ChatGPT角色指令调教指南</a></p><hr><p>提供ChatGPT和MJ教程</p><p>Learningprompt wiki - <a href="https://learningprompt.wiki/" target="_blank">Learningprompt wiki</a></p><hr><p>提供ChatGPT/MJ和SD教程</p><p>Learningprompt pro - <a href="https://www.learnprompt.pro/" target="_blank">Learningprompt pro</a></p><h2 id="ChatGpt插件"><a href="#ChatGpt插件" class="headerlink" title="ChatGpt插件"></a>ChatGpt插件</h2><p>ChatGPT角色指令语法模板</p><p>LangGPT - <a href="https://github.com/yzfly/LangGPT/blob/main/README_zh.md" target="_blank">LangGPT</a></p><hr><p>支持Mac和Win，更稳定方便</p><p>ChatGPT客户端 - <a href="https://github.com/lencx/ChatGPT/releases" target="_blank">ChatGPT客户端</a></p><hr><p>可使用API的ChatGPT客户端</p><p>ChatBox - <a href="https://chatboxapp.xyz/" target="_blank">ChatBox</a></p><hr><p>IOSGPT应用支持输入法</p><p>OpenCat - <a href="https://apps.apple.com/cn/app/opencat/id6445999201" target="_blank">OpenCat</a></p><hr><p>ChatGPT分享会话插件</p><p>ShareGPT插件 - <a href="https://sharegpt.com/" target="_blank">ShareGPT插件</a></p><hr><p>官网服务运行状态查询</p><p>ChatGPT Status - <a href="https://status.openai.com/" target="_blank">ChatGPT Status</a></p><h2 id="AI绘画国内"><a href="#AI绘画国内" class="headerlink" title="AI绘画国内"></a>AI绘画国内</h2><p>拥有数千万用户的AI绘画平台</p><p>意间AI绘画 - <a href="http://portal.yjai.art/" target="_blank">意间AI绘画</a></p><hr><p>可选多个绘画模型</p><p>6Pen - <a href="https://6pen.art/" target="_blank">6Pen</a></p><hr><p>百度出品的AI绘画平台</p><p>文心一格 - <a href="https://yige.baidu.com/" target="_blank">文心一格</a></p><hr><p>西湖心辰公司出品</p><p>造梦日记 - <a href="https://zmrj.art/" target="_blank">造梦日记</a></p><hr><p>稿定设计出品</p><p>稿定AI绘画 - <a href="https://www.gaoding.com/ai" target="_blank">稿定AI绘画</a></p><hr><p>万兴出品</p><p>万兴爱画 - <a href="https://aigc.wondershare.cn/" target="_blank">万兴爱画</a></p><hr><p>站酷出品</p><p>站酷梦笔 - <a href="https://www.zcool.com.cn/ailab" target="_blank">站酷梦笔</a></p><h2 id="海外绘画"><a href="#海外绘画" class="headerlink" title="海外绘画"></a>海外绘画</h2><p>Discod旗下AI绘画工具</p><p>Midjourney - <a href="https://www.midjourney.com/" target="_blank">Midjourney</a></p><hr><p>免费开源的AI绘画模型</p><p>Stable Diffusion - <a href="https://stability.ai/" target="_blank">Stable Diffusion</a></p><hr><p>定制角色剧情AI绘画</p><p>Novel AI - <a href="https://novelai.net/" target="_blank">Novel AI</a></p><hr><p>ChatGPT母公司出品的AI绘画模型</p><p>OpenAI DALL-E - <a href="https://openai.com/product/dall-e-2" target="_blank">OpenAI DALL-E</a></p><hr><p>Adobe出品，开放个人申请</p><p>Adobe Firefly - <a href="https://www.adobe.com/sensei/generative-ai/firefly.html" target="_blank">Adobe Firefly</a></p><hr><p>[海外]微软出品，限地区</p><p>Bing AI图像 - <a href="https://bing.com/create" target="_blank">Bing AI图像</a></p><h2 id="AI绘画资源"><a href="#AI绘画资源" class="headerlink" title="AI绘画资源"></a>AI绘画资源</h2><p>多个模型的提示词建议，实图参考</p><p>Aigallery - <a href="https://www.aigallery.top/" target="_blank">Aigallery</a></p><hr><p>可获取海量图库的提示词</p><p>PromptBase - <a href="https://promptbase.com/" target="_blank">PromptBase</a></p><hr><p>根据文稿自动匹配素材，生成字幕和配音</p><p>一帧秒创 - <a href="https://aigc.yizhentv.com/" target="_blank">一帧秒创</a></p><h2 id="AI-视频创造"><a href="#AI-视频创造" class="headerlink" title="AI 视频创造"></a>AI 视频创造</h2><p>腾讯出品的视频剪辑辅助平台</p><p>腾讯智影 - <a href="https://zenvideo.qq.com/" target="_blank">腾讯智影</a></p><hr><p>阿里达摩院出品，英文生成视频更强</p><p>ModelScope - <a href="https://modelscope.cn/studios/damo/text-to-video-synthesis/summary" target="_blank">ModelScope</a></p>]]></content>
    
    
    <categories>
      
      <category>有趣的网站</category>
      
      <category>AI 网站集合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>有趣的网站</tag>
      
      <tag>AI 网站集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android 测试点总结（长期更新）</title>
    <link href="/2024/07/04/android%E6%B5%8B%E8%AF%95%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <url>/2024/07/04/android%E6%B5%8B%E8%AF%95%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-测试点总结"><a href="#Android-测试点总结" class="headerlink" title="Android 测试点总结"></a>Android 测试点总结</h1><p>我们在日常测试Android的时候需要我们注意很多测试点，那么这些也是我慢慢总结的，当然肯定会有落下的，也希望大家可以补充说明，这个帖子是长期更新的帖子不会在新开帖子介绍，欢迎经常来看！</p><h2 id="WebView-的测试"><a href="#WebView-的测试" class="headerlink" title="WebView 的测试"></a>WebView 的测试</h2><p>为什么首先说这个呢？是因为我们现在很多的APP都会有活动的展示，当然WebView不仅仅是活动哈，像一些临时页，改动很频繁的页面等。在测试WebView 我们首先要关注那些点呢？</p><p>1.WebView 在不同机型上的适配情况</p><p>   WebView 在不同的机型上适配情况是我们要关注的，尤其是支持到了小屏手机或者大屏打开的时候，要关注我们主流的要适配的机型，观察页面布局</p><p>   是否正常展示，信息是否遗漏， 按钮是否可以正常点击等！</p><p>2.WebView 呼起Android 内部页面</p><p>  WebView 会含有跳转等，我们要注意若是跳转到APP内部的短链中，需要着重测试一下。</p><p>3.WebView 渲染速度及占用内存</p><p>  WebView 不应该过于复杂，渲染速度应该较快且占用内存小！</p><h2 id="ANR-测试"><a href="#ANR-测试" class="headerlink" title="ANR 测试"></a>ANR 测试</h2><p>  这里可以看我写的ANR 文章里面有很详细的介绍</p><p>  <a href="http://8888666.top/2024/07/03/adroid%E6%B5%8B%E8%AF%95/">http://8888666.top/2024/07/03/adroid%E6%B5%8B%E8%AF%95/</a></p><h2 id="新老版本的测试"><a href="#新老版本的测试" class="headerlink" title="新老版本的测试"></a>新老版本的测试</h2><p>  在测试Andoid的时候尤其要注意新老版本的测试，如果后台发布了新的功能但是只支持新版本，那么就要做版本控制，或者新版本支持老版使用就要看看是否老版能正常使用！</p><h2 id="兼容性测试"><a href="#兼容性测试" class="headerlink" title="兼容性测试"></a>兼容性测试</h2><p>  这个老生常谈的话题，覆盖你主流机型测试</p><h2 id="专项测试"><a href="#专项测试" class="headerlink" title="专项测试"></a>专项测试</h2><p>  耗电，耗流， 性能， 打开速度， 发烧 等等标准且这个和公司有关系，不是强制！</p><h2 id="SDK测试"><a href="#SDK测试" class="headerlink" title="SDK测试"></a>SDK测试</h2><p>  如果app使用了三方的sdk 那么我们也是要关注的，不能因为三方的问题导致我们出现了问题</p><h2 id="弱网测试"><a href="#弱网测试" class="headerlink" title="弱网测试"></a>弱网测试</h2><p>  测试APP在弱网情况下的表现，各个公司有不同的标准！</p>]]></content>
    
    
    <categories>
      
      <category>测试常见问题</category>
      
      <category>Android</category>
      
      <category>Android 测试点总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>测试知识</tag>
      
      <tag>Android 测试知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android ANR是什么？</title>
    <link href="/2024/07/03/adroid%E6%B5%8B%E8%AF%95/"/>
    <url>/2024/07/03/adroid%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-ANR-是什么呢？"><a href="#Android-ANR-是什么呢？" class="headerlink" title="Android ANR 是什么呢？"></a>Android ANR 是什么呢？</h1><p>在日常测试Android我们会经常听到开发讲述一个专业术语ANR，那么ANR是什么呢？又是什么导致的呢？一起来看看吧！</p><h2 id="什么是ANR？"><a href="#什么是ANR？" class="headerlink" title="什么是ANR？"></a>什么是ANR？</h2><p>ANR,(Application Not Responding) 即应用程序无响应，在android应用中，当我们的UI线程被阻塞，就会弹出如下对话框，用户可以选择继续等待或者关闭这个应用程序,这种现象我们称之为ANR.</p><h2 id="ANR的类型"><a href="#ANR的类型" class="headerlink" title="ANR的类型"></a>ANR的类型</h2><p>一共可以分为三种类型：</p><p>1.主线程对输入事件在5秒内没有处理完毕</p><p>   产生这种ANR的前提是要有输入事件，如果用户没有触发任何输入事件，即便是主线程阻塞了，也不会产生ANR，因为InputDispatcher没有分发事件给应用程序，当然也不会检测处理超时和报告ANR了。</p><p>2.主线程在执行BroadcastReceiver的onReceive函数时10秒内没有执行完毕，后台进程是60秒</p><p>   这种情况的ANR系统不会显示对话框提示，仅是输出log而已。</p><p>3.主线程在执行Service的各个生命周期函数时20秒内没有执行完毕,后台进程为200秒</p><p>   同样对这种情况的ANR系统也不会显示对话框提示，仅是输出log。</p><p>总体来说：</p><table><thead><tr><th>Type</th><th>Method call</th><th>Logsample</th><th>time out</th></tr></thead><tbody><tr><td>Input dispatch</td><td>onClick(),onTouch(),onKeydown(),onKeyup()</td><td>Input dispatching timed out</td><td>5</td></tr><tr><td>Broadcast</td><td>onReceive()</td><td>Timeout of broadcast</td><td>FG: 10, BG 60</td></tr><tr><td>Service</td><td>onBind(),onCreate(),onStartCommand(),onUnbind(),onDestroy()</td><td>Timeout executing service</td><td>FG: 20, BG 200</td></tr></tbody></table><h2 id="ANR产生的原因"><a href="#ANR产生的原因" class="headerlink" title="ANR产生的原因"></a>ANR产生的原因</h2><p>1.应用自身进程引起的问题，比如, 在oncreate ，onstart等生命周期中执行耗时操作，ui线程阻塞，挂起，死循环等</p><p>2.其他进程引起的，比如：io操作导致cpu使用过高，导致当前应用进程无法抢占到cpu时间片</p><h3 id="细分的话可以分为以下一些情况："><a href="#细分的话可以分为以下一些情况：" class="headerlink" title="细分的话可以分为以下一些情况："></a>细分的话可以分为以下一些情况：</h3><p>耗时的网络访问</p><p>大量的数据读写</p><p>数据库操作</p><p>硬件操作（比如camera）</p><p>调用thread的join()方法、sleep()方法、wait()方法或者等待线程锁的时候</p><p>service binder的数量达到上限</p><p>system server中发生WatchDog ANR</p><p>service忙导致超时无响应</p><p>其他线程持有锁，导致主线程等待超时</p><p>其它线程终止或崩溃导致主线程一直等待…</p><h2 id="如何避免ANR"><a href="#如何避免ANR" class="headerlink" title="如何避免ANR"></a>如何避免ANR</h2><p>耗时的工作()比如数据库操作，I&#x2F;O，网络操作，采用单独的工作线程处理</p><p>用Handler来处理UIthread和工作thread的交互</p><p>合理使用 Handler 来处理其他线程请求</p><p>合理使用并遵循 Android 生命周期, 避免在 onCreate() and onResume() 做过多的事情</p><p>使用一些架构形成规范来避免内存等问题,例如：MVP、RxJava</p><p>经常使用工具来检查内存问题,例如:MAT、TraceView、AS 自带等工具</p><p>避免加载大图片引起内存不足导致 ANR</p><p>避免内存泄露引起的 ANR</p>]]></content>
    
    
    <categories>
      
      <category>测试常见问题</category>
      
      <category>Android</category>
      
      <category>Android ANR是什么？</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试知识</tag>
      
      <tag>Android 测试知识</tag>
      
      <tag>原创、转载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python url编码</title>
    <link href="/2024/07/03/url%E5%8A%A0%E5%AF%86/"/>
    <url>/2024/07/03/url%E5%8A%A0%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-实现url-编码"><a href="#Python-实现url-编码" class="headerlink" title="Python 实现url 编码"></a>Python 实现url 编码</h1><p>在平常的测试中，我们会遇见在测试某些url 要求传递的是url编码后的信息，那么你可以从本文中学会如何使用url编码。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UrlEncode_infor</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">urlencode_infor</span>(<span class="hljs-params">self,data</span>):<br>        s=data<br>        s_re= urllib.parse.quote(s)<br>        <span class="hljs-keyword">return</span> s_re<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    url_encode=UrlEncode_infor()<br>    s=<span class="hljs-string">&#x27;patron:id:generaltoken:1b9554037ee04463beaeabd81573785e&#x27;</span><br>    url_encode.urlencode_infor(s)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python url编码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
      <tag>yield</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python md5加密</title>
    <link href="/2024/07/03/md5%E5%8A%A0%E5%AF%86/"/>
    <url>/2024/07/03/md5%E5%8A%A0%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-实现md5加密"><a href="#Python-实现md5加密" class="headerlink" title="Python 实现md5加密"></a>Python 实现md5加密</h1><p>平常测试过程中，可能会遇到在测试api的时候需要使用md5加密，在编写测试脚本的时候则需要实现其过程，那么在本文中你可以学会如何使用md5加密。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><span class="hljs-keyword">import</span> os,sys<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Md5_Password</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_md5</span>(<span class="hljs-params">self,need_encode</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;md5加密&#x27;&#x27;&#x27;</span><br>        password_md5 = md5()<br>        password_md5.update(need_encode.encode())<br>        pwd_secret = password_md5.hexdigest()<br>        <span class="hljs-keyword">return</span> pwd_secret<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    md5_infor=Md5_Password()<br>    password=<span class="hljs-string">&#x27;123qwe&#x27;</span><br>    md5_infor.do_md5(password)<br></code></pre></td></tr></table></figure><p>当然 你可以实现盐的加密 那就是在加密的时候加入指定的信息即可。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python md5加密</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
      <tag>yield</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 常见排序算法</title>
    <link href="/2024/07/03/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2024/07/03/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-常见排序算法"><a href="#Python-常见排序算法" class="headerlink" title="Python 常见排序算法"></a>Python 常见排序算法</h1><p>在平常面试中，一般都会遇见让写排序算法的要求，那么基本也就这三种排序算法，大家可以掌握学会！</p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>原理： 相邻连个数进行比较，大的下沉，最后一个元素最大</p><p>复杂度： 时间复杂度O(n^2)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">dlist_sort</span>(<span class="hljs-params">dlist</span>):<br>    <span class="hljs-keyword">if</span> dlist == []:<br>        <span class="hljs-keyword">return</span> []<br>    <span class="hljs-keyword">else</span>:<br>        dlist_lenght = <span class="hljs-built_in">len</span>(dlist)<br>        <span class="hljs-keyword">for</span> i  <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">0</span>, dlist_lenght):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (i+<span class="hljs-number">1</span>, dlist_lenght):<br>                <span class="hljs-keyword">if</span> dlist[i] &gt; dlist[j]:<br>                    dlist[i],dlist[j] = dlist[j],dlist[i]<br>        <span class="hljs-keyword">return</span> dlist<br><br><br><span class="hljs-built_in">print</span>(dlist_sort([<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">53</span>]))<br></code></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>原理： 递归思想， 列表中取出第一个元素作为标准，比第一个小的放左侧，比第一个大的放右侧</p><p>复杂度： 时间复杂度O(nlog2n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">quick_sort</span>(<span class="hljs-params">quick_list</span>):<br>    <span class="hljs-keyword">if</span> quick_list == []:<br>        <span class="hljs-keyword">return</span> []<br>    <span class="hljs-keyword">else</span>:<br>        first = quick_list[<span class="hljs-number">0</span>]<br>        less = quick_sort([l <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> quick_list[<span class="hljs-number">1</span>:] <span class="hljs-keyword">if</span> l &lt; first])<br>        more = quick_sort([i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> quick_list[<span class="hljs-number">1</span>:] <span class="hljs-keyword">if</span> i &gt;= first])<br>    <span class="hljs-keyword">return</span> less + [first] + more<br><br><br><span class="hljs-built_in">print</span>(quick_sort([<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>]))<br></code></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>原理：通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序，即只需用到O(1)的额外空间的排序，因而在从后向前扫描过程中，找到排序位置后，需要将已排序元素逐步向后挪位，为最新元素提供插入空间。</p><p>复杂度：O(n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">insertionSort</span>(<span class="hljs-params">arr</span>): <br>  <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(arr)): <br>  <br>        key = arr[i] <br>  <br>        j = i-<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> j &gt;=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> key &lt; arr[j] : <br>                arr[j+<span class="hljs-number">1</span>] = arr[j] <br>                j -= <span class="hljs-number">1</span><br>        arr[j+<span class="hljs-number">1</span>] = key <br>  <br>  <br>arr = [<span class="hljs-number">12</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>] <br>insertionSort(arr) <br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;排序后的数组:&quot;</span>) <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(arr)): <br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;%d&quot;</span> %arr[i])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>面试题目搜集</category>
      
      <category>Python 算法题目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
      <tag>算法</tag>
      
      <tag>Appium</tag>
      
      <tag>Selenium</tag>
      
      <tag>pytest</tag>
      
      <tag>SQL</tag>
      
      <tag>Redis</tag>
      
      <tag>Nginx</tag>
      
      <tag>用例设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无聊</title>
    <link href="/2024/07/03/%E6%97%A0%E8%81%8A/"/>
    <url>/2024/07/03/%E6%97%A0%E8%81%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="无聊"><a href="#无聊" class="headerlink" title="无聊"></a>无聊</h1><p>有时候会突然觉得无聊</p><p>就是那种感觉什么都没意思</p><p>看看窗外的云，人</p><p>也会思考人的意义</p><p>久而久之</p><p>就形成了规律</p><p>然而</p><p>无聊了这么久</p><p>也未想出抛弃众人都有的之外的意义</p><p>生活依旧如寂静的如死的水面</p><p>偶尔的涟漪</p><p>也未能散出绝美的轮廓</p><img src="/2024/07/03/%E6%97%A0%E8%81%8A/%E6%B6%9F%E6%BC%AA.jpg" class="">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
      <category>2024年随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>随笔</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jmetrer添加验证点</title>
    <link href="/2024/07/03/jmerer%E6%B7%BB%E5%8A%A0%E9%AA%8C%E8%AF%81%E7%82%B9/"/>
    <url>/2024/07/03/jmerer%E6%B7%BB%E5%8A%A0%E9%AA%8C%E8%AF%81%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="Jmetrer添加验证点"><a href="#Jmetrer添加验证点" class="headerlink" title="Jmetrer添加验证点"></a>Jmetrer添加验证点</h1><p>在测试中我们通常都需要有个校验的地方，那么在jmeter中我们可以这样添加验证点</p><h2 id="添加验证点"><a href="#添加验证点" class="headerlink" title="添加验证点"></a>添加验证点</h2><p>选择HTTP请求然后右键选择添加-&gt;断言-&gt;响应断言</p><img src="/2024/07/03/jmerer%E6%B7%BB%E5%8A%A0%E9%AA%8C%E8%AF%81%E7%82%B9/%E9%AA%8C%E8%AF%81%E7%82%B9.png" class=""><p>然后添加断言结果，选择线程组右键-&gt;监听器-&gt;断言结果</p><p>运行后，如果HTTP响应没有包含期待的字符串，那么断言就会失败</p><img src="/2024/07/03/jmerer%E6%B7%BB%E5%8A%A0%E9%AA%8C%E8%AF%81%E7%82%B9/%E9%AA%8C%E8%AF%81%E7%82%B91.png" class="">]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Jmeter</category>
      
      <category>Jmeter 添加验证点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Jmeter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jmeter响应编码异常</title>
    <link href="/2024/07/03/jmerer%E5%93%8D%E5%BA%94%E7%BC%96%E7%A0%81%E5%BC%82%E5%B8%B8/"/>
    <url>/2024/07/03/jmerer%E5%93%8D%E5%BA%94%E7%BC%96%E7%A0%81%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="Jmeter响应编码异常"><a href="#Jmeter响应编码异常" class="headerlink" title="Jmeter响应编码异常"></a>Jmeter响应编码异常</h1><p>当响应数据或响应页面没有设置编码时候，JMeter会按照jmeter.properties文件中的sampleresult.default.encoding设置的格式解析。</p><p>默认为ISO-8859-1,所以解析中文时候肯定会出错，那么我们需要你把编码改为UTF-8.</p><img src="/2024/07/03/jmerer%E5%93%8D%E5%BA%94%E7%BC%96%E7%A0%81%E5%BC%82%E5%B8%B8/%E7%BC%96%E7%A0%81.png" class=""><p>修改完毕后我们需要将”#”去掉，然后重启JMeter</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Jmeter</category>
      
      <category>Jmeter 响应编码异常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Jmeter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jmeter线程组</title>
    <link href="/2024/07/03/jmerer%E7%BA%BF%E7%A8%8B%E7%BB%84/"/>
    <url>/2024/07/03/jmerer%E7%BA%BF%E7%A8%8B%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="Jmeter线程组"><a href="#Jmeter线程组" class="headerlink" title="Jmeter线程组"></a>Jmeter线程组</h1><p>在JMeter中，任何类型的测试都需要先创建线程组，一个线程组可以看做一个测试任务</p><h2 id="添加线程组"><a href="#添加线程组" class="headerlink" title="添加线程组"></a>添加线程组</h2><p>鼠标右键单击“测试计划”在快捷键菜单中单击添加-&gt;Threads(Users)-&gt;线程组</p><p>注意：在JMeter中，任何内容都应该放在线程中！</p><img src="/2024/07/03/jmerer%E7%BA%BF%E7%A8%8B%E7%BB%84/jmeter%E7%BA%BF%E7%A8%8B%E7%BB%84.png" class=""><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>1.线程数：一个线程代表一个虚拟用户</p><p>2.Ramp-Up Period(in seconds)：设置线程的启动时长，单位为S，如果线程数是100，启动时长为5s，那么需要5s启动100个线程，平均每秒启动20个线程</p><p>3.循环次数：每个线程发送的请求次数。如果这个线程中有5个HTTP请求，循环次数为3的话，那么一个线程会发送5*3&#x3D;15个HTTP请求。</p><p>4.如果选择了“永远”复选框，那么所有的线程会无限发送请求，直到手动单击工具栏上的停止按钮。</p><p>如果用来做功能测试&#x2F;接口测试，那么应保持默认设置，线程数设置为1，Ramp-up Period(in seconds)设置为1，循环次数也设置为1</p><h2 id="线程组添加HTTP请求"><a href="#线程组添加HTTP请求" class="headerlink" title="线程组添加HTTP请求"></a>线程组添加HTTP请求</h2><img src="/2024/07/03/jmerer%E7%BA%BF%E7%A8%8B%E7%BB%84/http%E8%AF%B7%E6%B1%82.png" class=""><img src="/2024/07/03/jmerer%E7%BA%BF%E7%A8%8B%E7%BB%84/http%E8%AF%B7%E6%B1%821.png" class="">]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Jmeter</category>
      
      <category>Jmeter 线程组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Jmeter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fiddler弱网测试</title>
    <link href="/2024/07/03/fiddler%E5%BC%B1%E7%BD%91%E6%B5%8B%E8%AF%95/"/>
    <url>/2024/07/03/fiddler%E5%BC%B1%E7%BD%91%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Fiddler弱网测试"><a href="#Fiddler弱网测试" class="headerlink" title="Fiddler弱网测试"></a>Fiddler弱网测试</h1><p>在我们平常测试中有一种测试叫做弱网测试，也就是要模拟信号较差情况下我们网站的加载情况，那么我们可以利用fillder来轻松实现这个模拟！</p><h2 id="弱网场景"><a href="#弱网场景" class="headerlink" title="弱网场景"></a>弱网场景</h2><p>1.网络慢或延迟，导致加载时间长</p><p>2.网络中断，web服务器返回500等状态码</p><p>3.网络延迟，HTTP请求发出后，很久没有响应</p><h2 id="Fillder-实现弱网"><a href="#Fillder-实现弱网" class="headerlink" title="Fillder 实现弱网"></a>Fillder 实现弱网</h2><p>1.启动Fiddler,选择Rules-&gt;Performances-&gt;Simulate Modem Speeds</p><p>2.打开浏览器，访问网站，你会发现打开网页的速度很慢</p><img src="/2024/07/03/fiddler%E5%BC%B1%E7%BD%91%E6%B5%8B%E8%AF%95/%E5%BC%B1%E7%BD%911.png" class=""><h2 id="Fillder-精确控制网速"><a href="#Fillder-精确控制网速" class="headerlink" title="Fillder 精确控制网速"></a>Fillder 精确控制网速</h2><p>有时候我们需要精确控制我们的网速具体的速率就可以使用以下方式：</p><p>1.启动Fiddler,选择Rules-&gt;Performances-&gt;Simulate Modem Speeds</p><p>2.在FiddlerScript中找到如下一段代码</p><img src="/2024/07/03/fiddler%E5%BC%B1%E7%BD%91%E6%B5%8B%E8%AF%95/%E8%84%9A%E6%9C%AC.png" class=""><p>我们可以通过修改对应的数值来控制网速</p><p>3.修改完毕后，原本已经勾选的Simulate Modem Speeds会被取消勾选，再次选中Rules-&gt;Performances-&gt;Simulate Modem Speeds</p><p>4.访问浏览器会更加慢<br> <br>网络取值算法就是 1000&#x2F;下载速速&#x3D;需要延迟的时间(ms)，比如50kbit&#x2F;s需要延迟200ms来接收数据</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Fillder</category>
      
      <category>Fillder 弱网测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Fillder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fiddler前端调试</title>
    <link href="/2024/07/03/fiddler%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95/"/>
    <url>/2024/07/03/fiddler%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Fiddler前端调试"><a href="#Fiddler前端调试" class="headerlink" title="Fiddler前端调试"></a>Fiddler前端调试</h1><p>有时候我们可能需要在服务器上面调试javaScript文件，但是又比较麻烦，此时为了方便可以使用fillder来实现！</p><h2 id="Fiddler-AutoResponder的工作原理"><a href="#Fiddler-AutoResponder的工作原理" class="headerlink" title="Fiddler AutoResponder的工作原理"></a>Fiddler AutoResponder的工作原理</h2><p>使用Fiddler可以替换自动返回的一个伪造的HTTP响应，者跟之前介绍的下断点修改HTTP响应差不多，只不过AutoResponder是自动的，操作更加方便！</p><h3 id="Fiddler在线调试JavaScript文件"><a href="#Fiddler在线调试JavaScript文件" class="headerlink" title="Fiddler在线调试JavaScript文件"></a>Fiddler在线调试JavaScript文件</h3><p>1.首先我们将JS文件保存到本地</p><p>2.然后编辑本地的JavaScript文件，更改需要编辑的代码</p><p>3.启动Fiddler，在浏览器中打开网址，然后使用Fiddler抓住这个JavaScript的HTTP请求</p><p>4.然后将Fiddler中，的这个JS拖拽到AutoResponser中</p><p>5.在RuleEditor中单击“Find a file…”，选择本地JavaScript文件的路径。</p><p>6.选中”Enable rules”，激活规则，选中”Unmatched requests passthrough”放行不匹配的HTTP请求。</p><p>7.单击“Save”按钮</p><p>8.你只需要修改本地机器上的文件，然后刷新浏览器，就可以看到效果了！</p><p>若是不显示CSS&#x2F;JS等文件信息，可以在Filters—Request Headers勾选Show only if URL contains选项</p><p>填写文件类型：</p><p>REGX:(?insx)&#x2F;[^?&#x2F;]<em>.(css|js|json|ico|jpg|png|gif|bmp|wav)(?.</em>)?$</p><p>然后选择Actions-&gt;Run Filterset Now</p><img src="/2024/07/03/fiddler%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95/fillder%E8%B0%83%E8%AF%95.png" class=""><p>替换照片</p><img src="/2024/07/03/fiddler%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95/%E6%9B%BF%E6%8D%A2%E7%85%A7%E7%89%87.png" class=""><p>效果</p><img src="/2024/07/03/fiddler%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95/%E6%95%88%E6%9E%9C.png" class="">]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Fillder</category>
      
      <category>Fillder 前端调试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Fillder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>完美解决自定义域名访问gitpages出现了部分请求404的问题！</title>
    <link href="/2024/07/02/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/"/>
    <url>/2024/07/02/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="gitpages出现了部分请求404的问题"><a href="#gitpages出现了部分请求404的问题" class="headerlink" title="gitpages出现了部分请求404的问题"></a>gitpages出现了部分请求404的问题</h1><p>最近把我的博客通过自定义域名代理了gitpages， 理由如下：</p><pre><code class="hljs">一方面是因为 github 确实在国内的访问速度太感人了😂😂😂! 另一方面也是手里有闲置的域名。</code></pre><p>所以就准备搞一下，采用的模式就是 域名 + cloudfare 的模式进行解析，但是在成功后发现部分请求出现了404的情况，如下图：</p><img src="/2024/07/02/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/404%E6%83%85%E5%86%B5.png" class=""><h2 id="为了解决这个问题花费了太多时间"><a href="#为了解决这个问题花费了太多时间" class="headerlink" title="为了解决这个问题花费了太多时间"></a>为了解决这个问题花费了太多时间</h2><p>之前我访问我的gitpages 域名：<a href="https://dreamshao.github.io/xingblog.github.io/">https://dreamshao.github.io/xingblog.github.io/</a>  一直是可以的所有的请求都是正常的，</p><p>可是这次我部署到个人域名后我就发现这怎么部分请求可以拿到，部分请求就是404呢？</p><p>然后，我就开始纠结是不是我在设置自定义域名的时候出现了问题，从开始的域名解析设置 在阿里云上我改了很多次(此时把DNS解析改回了阿里的)，</p><p>发现还是不行，我就想是不是我这个没有备案呢？ 我就开始改回了 cloudfare 的DNS解析，开始在cloudfare 上开始鼓捣，可是鼓捣了很久还是不行</p><p>后来，我就开始在网上查资料，查了好久也没查到为什么部分请求是404，这就花费了我将近1天的时间在上面！</p><h2 id="突然的灵感来临"><a href="#突然的灵感来临" class="headerlink" title="突然的灵感来临"></a>突然的灵感来临</h2><p>第二天早上，我还是打开了我的网站看404的请求，突然想是不是因为我的域名后面不能包含我的子仓库地址呢？ </p><p>之前我的访问路径是: <a href="https://8888666.top/xingblog.github.io/css/main.css">https://8888666.top/xingblog.github.io/css/main.css</a></p><p>然后复制到浏览器 改成了: <a href="https://8888666.top/css/main.css">https://8888666.top/css/main.css</a></p><p>哎，您猜怎么着， 访问到了！ 可以，瞬间我明白了！🤪🤪🤪， 这不能带我的子仓库地址啊！</p><h2 id="修改hexo-的配置"><a href="#修改hexo-的配置" class="headerlink" title="修改hexo 的配置"></a>修改hexo 的配置</h2><p>马上找我的配置文件发现了问题，之前在 _config.yml 中 我配置的是我的路径：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#URL</span><br><span class="hljs-comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://dreamshao.github.io/xingblog.github.io/</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:day/:title/</span><br><span class="hljs-attr">permalink_defaults:</span><br><span class="hljs-attr">pretty_urls:</span><br>  <span class="hljs-attr">trailing_index:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br>  <span class="hljs-attr">trailing_html:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br></code></pre></td></tr></table></figure><p>然后修改为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#URL</span><br><span class="hljs-comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://dreamshao.github.io/</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:day/:title/</span><br><span class="hljs-attr">permalink_defaults:</span><br><span class="hljs-attr">pretty_urls:</span><br>  <span class="hljs-attr">trailing_index:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br>  <span class="hljs-attr">trailing_html:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br></code></pre></td></tr></table></figure><p>然后清空已经生成的信息，也就是在public 文件夹下，清空完毕后执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean<br>hexo g -d<br></code></pre></td></tr></table></figure><p>结果在域名上访问就发现可以了，原来就是这点问题导致了，还是自己的配置问题！</p><h2 id="得到了什么？"><a href="#得到了什么？" class="headerlink" title="得到了什么？"></a>得到了什么？</h2><p>通过这次自己把博客通过自定义域名访问，确实收获了很多部署方面的知识， 比如什么是 CNAME，什么是 A 模式 等等。</p><p>还有更加了解DNS解析的模式，之前只是简单的了解，通过这次操作确实更加明白了！</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>如果你在部署博客到私人域名下有什么问题，可以留言哦，一定知无不言，言无不尽！</p>]]></content>
    
    
    <categories>
      
      <category>gitpages 自定义域名</category>
      
      <category>部分请求404</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>hexo 博客</tag>
      
      <tag>自定义域名访问gitpages</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 下实现IOS自动化测试</title>
    <link href="/2024/06/28/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    <url>/2024/06/28/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Windows-下实现IOS自动化测试"><a href="#Windows-下实现IOS自动化测试" class="headerlink" title="Windows 下实现IOS自动化测试"></a>Windows 下实现IOS自动化测试</h1><p>最近公司要实现Ios的自动化测试，但是局限是测试这边并没给配备MAC电脑，公司或者个人有MAC的东西可以潇洒的划走了😂😂😂</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="WebDriverAgent-介绍及安装"><a href="#WebDriverAgent-介绍及安装" class="headerlink" title="WebDriverAgent 介绍及安装"></a>WebDriverAgent 介绍及安装</h3><p>WebDriverAgent 是 facebook 推出的一款 ios 自动化测试的通信工具，目前facebook 的项目已经停止维护，现在使用的是 appium 官方维护的版本，下载地址：<a href="https://github.com/appium/WebDriverAgent%E3%80%82">https://github.com/appium/WebDriverAgent。</a></p><p>但是由于 WebDriverAgent 安装需要使用到 Mac 电脑，此处也是唯一需要 mac电脑的，使用 xcode 进行编译安装到手机端，具体操作可以自行百度！</p><p>目前我找 ios 开发同学帮我编译安装。</p><h3 id="Tidevice-介绍及安装"><a href="#Tidevice-介绍及安装" class="headerlink" title="Tidevice 介绍及安装"></a>Tidevice 介绍及安装</h3><p>一直以来，iOS 自动化的实现&amp;执行都依赖 Mac 系统，其主要原因是因为需要通过 Xcodebuild 编译&amp;安装 WDA (WebDriverAgent) 到 iOS 设备中，</p><p>通过 WDA 实现对被测应用进行操作。而 Windows 系统无法运行 Xcode 工具，所以无法运行 iOS 自动化测试。</p><p>针对这种情况，阿里团队开源了一个内部使用的iOS自动化工具 tidevice（<a href="https://github.com/alibaba/taobao-iphone-device%EF%BC%89">https://github.com/alibaba/taobao-iphone-device）</a></p><p>让我们可以更方便、简单的脱离 Mac 的限制，该工具能够用于与 iOS 设备进行通信, 提供以下功能 </p><ol><li><p>截图</p></li><li><p>   获取手机信息</p></li><li><p>   ipa 包的安装和卸载</p></li><li><p>   根据 bundleID 启动和停止应用 </p></li><li><p>列出安装应用信息</p></li><li><p>   模拟 Xcode 运行XCTest，常用的如启动 WebDriverAgent 测试(此方法不依赖xcodebuild)</p></li><li><p>   获取指定应用性能(CPU,MEM,FPS)</p></li><li><p>   支持运行在Mac，Linux，Windows 上 Tidevice 安装</p></li></ol><h4 id="版本要求"><a href="#版本要求" class="headerlink" title="版本要求"></a>版本要求</h4><p>Python 3.6+命令 pip install tidevice</p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>查看版本号 tidevice version列出设备 tidevice list</p><p>查看安装包 tidevice applist更多功能请自己查询官方文档</p><h2 id="Tidevice操作步骤"><a href="#Tidevice操作步骤" class="headerlink" title="Tidevice操作步骤"></a>Tidevice操作步骤</h2><p>cmd 执行tidevice list 查看版本号,可以看到下面的信息</p><img src="/2024/06/28/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/cmd.png" class=""><p>Udid：手机唯一 id后面需要用到</p><p>然后执行 tidevice applist 查看我们的 webdriveragent 具体信息</p><img src="/2024/06/28/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/id.png" class=""><p>这个签名是自己写的，需要找对应安装同学确认一下！</p><p>再然后我们执行： tidevice -u 你的设备 id -B 你的webdriveraget –port 8100看到启动成功的字眼就可以了！</p><p>然后浏览器访问 127.0.0.1:8100&#x2F;status 查看到如下信息即可</p><img src="/2024/06/28/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/infor.png" class=""><p>表示当前服务正常，此时不可关闭当前 cmd 弹窗，需要一直保持！</p><h2 id="Appium-使用"><a href="#Appium-使用" class="headerlink" title="Appium 使用"></a>Appium 使用</h2><p>打开 appium 版本选择 1.20 以上的，我这里只是描述</p><p>然后点击start server V1.15.1</p><img src="/2024/06/28/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/appium.png" class=""><p>然后点击 如上图圈住的</p><img src="/2024/06/28/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/appium1.png" class=""><p>在 JSON Representation 输入</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;deviceName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;iPhone XS Max&quot;</span><span class="hljs-punctuation">,</span> <br><span class="hljs-attr">&quot;platformName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ios&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;udid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;00008020-001604901A01002E&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;bundleId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你的包名&quot;</span><span class="hljs-punctuation">,</span> <br><span class="hljs-attr">&quot;platformVersion&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;14.6&quot;</span><span class="hljs-punctuation">,</span> <br><span class="hljs-attr">&quot;webDriverAgentUrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://localhost:8100&quot;</span><span class="hljs-punctuation">,</span> <br><span class="hljs-attr">&quot;noReset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;usePrebuiltWDA&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span> <br><span class="hljs-attr">&quot;useXctestrunFile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span> <br><span class="hljs-attr">&quot;skipLogCapture&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <br><span class="hljs-attr">&quot;appium:automationName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;XCUITest&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>上面需要替换的信息包含 deviceName udid platformVersion bundleId 对应的写自己的信息即可！</p><p>然后点击 start session 就可以查看元素了</p><h2 id="代码操作"><a href="#代码操作" class="headerlink" title="代码操作"></a>代码操作</h2><p>这里的代码定位啊什么的和android一样，这里就不写这些基本命令了。</p>]]></content>
    
    
    <categories>
      
      <category>自动化测试</category>
      
      <category>Ios</category>
      
      <category>Windows 下实现IOS自动化测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Appium</tag>
      
      <tag>windows 下实现ios自动化测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python常见函数之yield函数</title>
    <link href="/2024/06/28/yield%E5%87%BD%E6%95%B0/"/>
    <url>/2024/06/28/yield%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Python常见函数之yield函数"><a href="#Python常见函数之yield函数" class="headerlink" title="Python常见函数之yield函数"></a>Python常见函数之yield函数</h1><p><code>yield</code> 在 Python 中是一个用于定义生成器的关键字，它允许函数在迭代过程中产生值，而不需要一次性计算所有值。以下是关于 <code>yield</code> 的更详细介绍：</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol><li><p><strong>定义生成器函数</strong>：当一个函数中包含了 <code>yield</code> 语句时，这个函数就被称为生成器函数。调用生成器函数时，它不会立即执行函数体中的全部代码，而是返回一个生成器对象。</p></li><li><p><strong>生成器的工作原理</strong>：生成器是一种特殊类型的迭代器，由生成器函数创建。当生成器函数执行到 <code>yield</code> 语句时，它会生成一个值，并保存其当前状态，然后等待下一次调用来继续执行。</p></li></ol><h3 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h3><ol><li><p><strong>暂停和恢复</strong>：<code>yield</code> 允许函数在迭代过程中暂停和恢复，从而逐个生成值，而不是一次性计算所有值。</p></li><li><p><strong>内存效率</strong>：使用 <code>yield</code> 可以避免创建大型的列表来保存数据，从而节约内存。特别是当处理大量数据时，这种优势尤为明显。</p></li><li><p><strong>状态保持</strong>：生成器能够记住上一次返回时的状态，包括局部变量和堆栈信息等。这使得生成器能够在下次迭代时从上次离开的位置继续执行。</p></li></ol><h3 id="yield-的应用场景"><a href="#yield-的应用场景" class="headerlink" title="yield 的应用场景"></a>yield 的应用场景</h3><ol><li><p><strong>节省内存</strong>：生成器在生成值时会“暂停”函数，而不是像列表推导式那样一次性生成所有值。这对于处理大量数据或无限序列时非常有用，因为它允许你按需生成值，从而节省内存。</p></li><li><p><strong>简化代码</strong>：生成器可以用于简化复杂的迭代逻辑。例如，你可以使用生成器来模拟一个无限序列（如斐波那契数列），而无需在内存中存储整个序列。</p></li><li><p><strong>协同程序</strong>：虽然这不是 Python 的标准用法，但 <code>yield</code> 也可以用于实现协同程序（coroutines），这是一种可以暂停和恢复执行的函数。在 Python 3.5 及更高版本中，<code>async</code> 和 <code>await</code> 关键字被引入以更直接地支持异步编程，但 <code>yield</code> 仍然在某些场景中用于此目的。</p></li><li><p><strong>数据流水线</strong>：在数据分析和机器学习等领域中，生成器常用于创建数据流水线。你可以使用生成器函数从数据源中读取数据，对数据进行预处理，然后将处理后的数据传递给下一个阶段。由于生成器按需生成数据，因此这种流水线可以非常高效地处理大量数据。</p></li><li><p><strong>惰性求值</strong>：生成器允许你实现惰性求值（lazy evaluation），即只有在需要时才计算值。这在处理复杂计算或大型数据集时非常有用，因为它可以避免不必要的计算并节省资源。</p></li><li><p><strong>与迭代器的交互</strong>：生成器也是迭代器的一种，因此它们可以与任何接受迭代器的 Python 结构（如 <code>for</code> 循环、列表推导式、<code>map()</code>、<code>filter()</code> 等）一起使用。这使得生成器在 Python 中非常灵活和强大。</p></li></ol><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">simple_generator</span>():<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span><br><br><span class="hljs-comment"># 创建生成器对象</span><br>generator = simple_generator()<br><br><span class="hljs-comment"># 通过 for 循环迭代生成器</span><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> generator:<br>    <span class="hljs-built_in">print</span>(value)  <span class="hljs-comment"># 输出: 1, 2, 3</span><br><br><span class="hljs-comment"># 也可以使用 next() 函数迭代生成器</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(generator))  <span class="hljs-comment"># 输出: StopIteration（因为生成器已经迭代完毕）</span><br></code></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p>当生成器函数执行到 <code>yield</code> 语句时，它会生成一个值并暂停执行。此时，生成器的状态会被保存下来，包括局部变量和堆栈信息等。</p></li><li><p>调用生成器对象的 <code>__next__()</code> 方法（或者在 for 循环中迭代）会使生成器恢复执行，直到遇到下一个 <code>yield</code> 语句或函数结束。</p></li><li><p>如果生成器函数中没有更多的 <code>yield</code> 语句或已经执行完毕，再次调用 <code>__next__()</code> 方法会引发 <code>StopIteration</code> 异常。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python yield函数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
      <tag>yield</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python常见函数之生成式</title>
    <link href="/2024/06/28/python%E7%94%9F%E6%88%90%E5%BC%8F/"/>
    <url>/2024/06/28/python%E7%94%9F%E6%88%90%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Python常见函数之生成式"><a href="#Python常见函数之生成式" class="headerlink" title="Python常见函数之生成式"></a>Python常见函数之生成式</h1><p>在Python中，生成式（Generator Expressions）是一种简洁的创建迭代器的方式，它们类似于列表推导式（List Comprehensions），但是生成式返回的是一个迭代器，而不是一个列表。这意味着生成式只会在迭代时生成值，而不是一次性生成所有值，从而节省了内存。</p><p>生成式的基本语法是使用圆括号 <code>()</code> 而不是方括号 <code>[]</code> 或花括号 <code>&#123;&#125;</code>（对于集合或字典推导式）。</p><p>下面是一些生成式的示例：</p><ol><li>创建一个生成偶数（从0到18）的生成式：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">even_numbers = (i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">19</span>) <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> even_numbers:<br>    <span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><ol start="2"><li>创建一个从字符串中提取大写字母的生成式：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">text = <span class="hljs-string">&quot;Hello, World!&quot;</span><br>uppercase_letters = (char <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> text <span class="hljs-keyword">if</span> char.isupper())<br><span class="hljs-keyword">for</span> letter <span class="hljs-keyword">in</span> uppercase_letters:<br>    <span class="hljs-built_in">print</span>(letter)<br></code></pre></td></tr></table></figure><ol start="3"><li>创建一个生成斐波那契数列的生成式（注意：这只是一个简单的示例，因为生成式本身并不适合生成无限序列，但我们可以限制其长度）：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fibonacci</span>(<span class="hljs-params">n</span>):<br>    a, b = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">yield</span> a<br>        a, b = b, a + b<br><br>fib_sequence = fibonacci(<span class="hljs-number">10</span>)  <span class="hljs-comment"># 创建一个生成前10个斐波那契数的生成器</span><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> fib_sequence:<br>    <span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><p>在这个斐波那契数列的例子中，我们实际上使用了一个生成器函数（通过<code>yield</code>关键字定义），但你也可以将其视为一个更复杂的生成式。在大多数情况下，如果你需要生成一个复杂的、可能是无限的序列，那么使用生成器函数会更为合适。</p><p>总的来说，生成式是Python中一种非常强大且内存高效的工具，用于在迭代时动态生成值。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 生成式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>窗外</title>
    <link href="/2024/06/27/%E7%AA%97%E5%A4%96/"/>
    <url>/2024/06/27/%E7%AA%97%E5%A4%96/</url>
    
    <content type="html"><![CDATA[<h1 id="窗外"><a href="#窗外" class="headerlink" title="窗外"></a>窗外</h1><p>因为我的工位挨着窗口</p><p>累了就会转头看一下窗外的景色</p><p>有形形色色的行人走来走去</p><p>心里想大家都一样吧</p><p>嗯！大家都一样！</p><p>转过头</p><p>不还得过这操蛋的日子！</p><img src="/2024/06/27/%E7%AA%97%E5%A4%96/%E6%93%8D%E8%9B%8B.jpeg" class="">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
      <category>2024年随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>随笔</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python常见函数之reduce函数用法</title>
    <link href="/2024/06/27/reduce%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/"/>
    <url>/2024/06/27/reduce%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Python常见函数之reduce函数用法"><a href="#Python常见函数之reduce函数用法" class="headerlink" title="Python常见函数之reduce函数用法"></a>Python常见函数之reduce函数用法</h1><p>可能突然提到reduce函数你觉得不认识，但是给你这么一个场景，假如我要你实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">str_to_number</span>(<span class="hljs-params">order</span>):<br>    digits = &#123;<span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;3&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;4&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;5&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;6&#x27;</span>: <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;7&#x27;</span>: <span class="hljs-number">7</span>, <span class="hljs-string">&#x27;8&#x27;</span>: <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;9&#x27;</span>: <span class="hljs-number">9</span>&#125;<br>    <span class="hljs-keyword">return</span> digits[order]<br></code></pre></td></tr></table></figure><p>我想让你利用上面的函数给我返回一个 12345</p><p>有人说可以啊 弄个列表每次传递一个对应的key获取value 然后append到列表里面。确实可以但是有点过于麻烦了，那么今天介绍的这个reduce函数绝效率嘎嘎的！</p><h2 id="reduce函数"><a href="#reduce函数" class="headerlink" title="reduce函数"></a>reduce函数</h2><p>reduce把一个函数作用在一个序列[x1, x2, x3, …]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)<br></code></pre></td></tr></table></figure><p>这么看可能不明白，下面让我来举个例子！</p><p>对一个序列求和，就可以用reduce实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> a + b<br><br><span class="hljs-built_in">print</span>(reduce(add, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])) <span class="hljs-comment"># 15</span><br></code></pre></td></tr></table></figure><p>这就实现了将 1,2,3,4,5 利用add 函数求和</p><p>亦或者 我们可以实现 将输入的内容按照整数输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> a * <span class="hljs-number">10</span> + b<br><br><span class="hljs-built_in">print</span>(reduce(fn, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]))  <span class="hljs-comment"># 12345</span><br></code></pre></td></tr></table></figure><p>这下应能看明白里面的奥妙了吧！</p><p>应用到最开始的那个问题那么我们就可以这么来做</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">str_to_number</span>(<span class="hljs-params">order</span>):<br>    digits = &#123;<span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;3&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;4&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;5&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;6&#x27;</span>: <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;7&#x27;</span>: <span class="hljs-number">7</span>, <span class="hljs-string">&#x27;8&#x27;</span>: <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;9&#x27;</span>: <span class="hljs-number">9</span>&#125;<br>    <span class="hljs-keyword">return</span> digits[order]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">str_to_number_reduce</span>(<span class="hljs-params">order</span>):<br>    <span class="hljs-keyword">return</span> reduce(<span class="hljs-keyword">lambda</span> x, y: x * <span class="hljs-number">10</span> + y, <span class="hljs-built_in">map</span>(str_to_number, order))<br><br><span class="hljs-built_in">print</span>(str_to_number_reduce([<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>])) <span class="hljs-comment"># 12345</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python reduce函数用法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python常见函数之函数固定形参</title>
    <link href="/2024/06/27/python%E5%87%BD%E6%95%B0%E5%9B%BA%E5%AE%9A%E5%BD%A2%E5%8F%82/"/>
    <url>/2024/06/27/python%E5%87%BD%E6%95%B0%E5%9B%BA%E5%AE%9A%E5%BD%A2%E5%8F%82/</url>
    
    <content type="html"><![CDATA[<h1 id="Python常见函数之固定形参"><a href="#Python常见函数之固定形参" class="headerlink" title="Python常见函数之固定形参"></a>Python常见函数之固定形参</h1><p>如果有这样一个函数 add(a, b), 此时你进行调用的时候肯定知道需要传递两个形参 比如 add(1,2)， 但是如果我只想实现1的加法怎么办，有人说可以啊 每次都传递add(1,x) 就行但是这样可能还是会让别人误解！</p><p>那么， 如果我这样只需要传递add(2)或add(5) 就可以实现刚刚的算法，那么这样就算是将我们其中一个参数固定了，那么一起来看看怎么实现吧！</p><h2 id="functools-partial"><a href="#functools-partial" class="headerlink" title="functools.partial"></a>functools.partial</h2><p>partial用于部分应用一个函数，它基于一个函数创建一个可调用对象，把原函数的某些参数固定，调用时只需要传递未固定的参数即可。</p><h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> functools<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-built_in">print</span>(a + b)<br><br><br>add = functools.partial(add, <span class="hljs-number">1</span>)<br>add(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 输出：3</span><br></code></pre></td></tr></table></figure><p>add函数原本接收两个参数a和b，经过partial包装之后，a参数的值被固定为了1，新的add对象（注意此处add已经是一个可调用对象，而非函数，下文分析源码会看到）只需要接收一个参数即可。</p><p>通俗点说：就是把原函数的部分参数固定了初始值，新的调用只需要传递其它参数。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 函数固定形参</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LocustFile编写</title>
    <link href="/2024/06/27/locustfile%E7%BC%96%E5%86%99/"/>
    <url>/2024/06/27/locustfile%E7%BC%96%E5%86%99/</url>
    
    <content type="html"><![CDATA[<h1 id="LocustFile编写"><a href="#LocustFile编写" class="headerlink" title="LocustFile编写"></a>LocustFile编写</h1><p>编写LocustFile 可以使得我们的性能测试功能更加强大实现我们自定义的测试路径及判断错误等方法！</p><h2 id="LocustFile-Demo"><a href="#LocustFile-Demo" class="headerlink" title="LocustFile Demo"></a>LocustFile Demo</h2><p>来自 LousctFile 官网例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> locust <span class="hljs-keyword">import</span> HttpUser, task, between<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">QuickstartUser</span>(<span class="hljs-title class_ inherited__">HttpUser</span>):<br>    wait_time = between(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>)<br><br><span class="hljs-meta">    @task</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>(<span class="hljs-params">self</span>):<br>        self.client.get(<span class="hljs-string">&quot;/hello&quot;</span>)<br>        self.client.get(<span class="hljs-string">&quot;/world&quot;</span>)<br><br><span class="hljs-meta">    @task(<span class="hljs-params"><span class="hljs-number">3</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">view_items</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> item_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>            self.client.get(<span class="hljs-string">f&quot;/item?id=<span class="hljs-subst">&#123;item_id&#125;</span>&quot;</span>, name=<span class="hljs-string">&quot;/item&quot;</span>)<br>            time.sleep(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">on_start</span>(<span class="hljs-params">self</span>):<br>        self.client.post(<span class="hljs-string">&quot;/login&quot;</span>, json=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;bar&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><p>这里我想还是采用官网的例子介绍，为了防止我讲的不够清晰 大家也可以访问下面的链接去官网查看</p><p><a href="https://docs.locust.io/en/stable/writing-a-locustfile.html">https://docs.locust.io/en/stable/writing-a-locustfile.html</a></p><h2 id="解释（我的理解）"><a href="#解释（我的理解）" class="headerlink" title="解释（我的理解）"></a>解释（我的理解）</h2><p>其实从中可以看到这个案例和我们平常写的类好像没什么区别，除了继承了<font color=green >HttpUser</font>,以及用例<font color=green >@task</font> 装饰器</p><p>那么首先来看一下具体实现了什么功能呢？</p><h3 id="on-start"><a href="#on-start" class="headerlink" title="on_start()"></a>on_start()</h3><p>这个类实现了一个性能测试脚本，在每个模拟用户启动时，都会调用此名称的方法 会先运行 <font color=green >on_start</font>这个函数,然后进行了请求这里的host 可以在shell中指定也可以在web ui的那个界面中输入，可以看到进行了一个post请求，路径是 &#x2F;login, 请求体是一个json对象</p><p>然后会在继续执行 这里的<font color=green >@task</font> 着重讲一下</p><h3 id="task-装饰器"><a href="#task-装饰器" class="headerlink" title="task 装饰器"></a>task 装饰器</h3><p>@task 装饰器 表明当前方法是一个任务</p><p>@task 是locust文件的核心。对于每个正在运行的用户，Locust 都会创建一个greenlet（协程或“微线程”），然后进行请求，要注意此时不是并发请求，是在&#x2F;hello 响应返回后才会继续请求&#x2F;world</p><p>@task(3) 其中3是指权重，虽然程序运行是随机选择任务单是你给予了更大的权重的话运行的次数会更加多</p><h3 id="wait-time"><a href="#wait-time" class="headerlink" title="wait_time"></a>wait_time</h3><p>wait_time 方法在每次任务执行后引入延迟。如果没有指定wait_time，则下一个任务将在上一个任务完成后立即执行。</p><p>有四个函数 分别是：constant、 bettwen、 constant_throughput、constant_pacing</p><p>constant: 在固定的时间内</p><p>让每个用户每次执行固定的时间 1秒：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">wait_time = constant(<span class="hljs-number">0.5</span>, <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><p>bettwen: 在最小值和最大值之间的随机时间</p><p>让每个用户在每次执行任务之间等待 1 到 4 :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">wait_time = between(<span class="hljs-number">0.5</span>, <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><p>constant_throughput：返回一个跟踪任务运行时间的函数，每次调用时，它将返回一个等待时间，该等待时间将尝试使每秒执行的任务运行次数等于 task_runs_per_second 参数指定的时间</p><p>也就是说：以恒定的速率执行任务。它允许用户设置每秒或每分钟需要执行的任务数，以确保性能测试的稳定性。</p><p>应用场景：</p><pre><code class="hljs">在性能测试中，可能需要模拟不同的用户行为，如登录、搜索、购买等。constant_throughput 可以确保这些任务以恒定的速率执行，从而更准确地评估系统的性能和稳定性。在生产环境中，有时需要根据客户的需求设置应用的吞吐量。constant_throughput 可以帮助确保应用能够满足用户的需求，同时保持系统的稳定性。</code></pre><p>也是 constant_pacing 的倒数</p><p>无论任务执行时间如何，任务将始终每 10 秒执行一次：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">wait_time = constant_throughput(<span class="hljs-number">0.1</span>)<br></code></pre></td></tr></table></figure><p>constant_pacing：返回一个跟踪任务运行时间的函数，每次调用时它将返回一个等待时间，该等待时间将尝试使任务执行之间的总时间等于 wait_time 参数指定的时间。</p><p>应用场景：</p><p>   模拟真实用户行为：</p><pre><code class="hljs">当进行性能测试时，有时需要模拟真实用户的操作行为。这些用户行为可能不是均匀分布的，但某些特定行为（如定期查询、定时任务等）需要按照固定的时间间隔来执行。使用 constant_pacing 可以确保这些任务按照预定的时间间隔执行，从而更准确地模拟真实用户的行为。</code></pre><p>  系统稳定性测试：</p><pre><code class="hljs">在测试系统的稳定性时，可能需要长时间运行任务，并观察系统在不同负载下的表现。使用 constant_pacing 可以确保任务以恒定的间隔执行，从而持续向系统施加稳定的负载，帮助发现潜在的稳定性和性能问题。</code></pre><p>  资源分配和限制：</p><pre><code class="hljs">在某些场景下，可能需要限制系统资源的使用，以确保不会超出特定的限制。例如，在测试一个API接口时，可能需要限制每分钟的请求数以避免对后端服务造成过大的压力。虽然 constant_throughput 可以用来控制每秒的请求数，但 constant_pacing 可以提供更细粒度的控制，确保请求按照特定的时间间隔发送，从而更有效地管理资源使用。</code></pre><p>  定时任务的性能测试：</p><pre><code class="hljs">许多系统都包含定时任务，这些任务需要按照预定的时间间隔执行。在进行这些定时任务的性能测试时，可以使用 constant_pacing 来模拟定时任务的执行间隔，并评估系统在不同负载下的性能表现。</code></pre><p>  实时数据收集和处理：</p><p>   对于需要实时收集和处理数据的系统（如监控系统、日志分析系统等），可能需要按照固定的时间间隔来执行数据收集和处理任务。使用 </p><p>   constant_pacing 可以确保这些任务按照预定的时间间隔执行，从而确保数据的准确性和实时性。</p><p>总的来说，constant_pacing 适用于那些需要精确控制任务执行间隔的场景，无论是在性能测试、资源分配还是实时数据处理中都可以发挥其独特的作用。</p><p>可以理解为：就像一个定时器一样 他不关心你具体返回了没有 到了点就要执行</p><p>无论任务执行时间如何，任务将始终每 10 秒执行一次：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">wait_time = constant_pacing(<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><h3 id="HttpUser"><a href="#HttpUser" class="headerlink" title="HttpUser"></a>HttpUser</h3><p> HttpUser每个用户提供一个client属性，即 的一个实例HttpSession，可用于向我们想要加载测试的目标系统发出 HTTP 请求。</p><p> HttpUser里面也是封装了一系列的请求方式，例如 POST, GET , DELETE, PUT 等。</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Locust</category>
      
      <category>Locust File编写</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Locust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Locust 入门安装及界面介绍</title>
    <link href="/2024/06/27/locust%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/06/27/locust%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Locust-入门安装及界面介绍"><a href="#Locust-入门安装及界面介绍" class="headerlink" title="Locust 入门安装及界面介绍"></a>Locust 入门安装及界面介绍</h1><h2 id="什么是-Locust？"><a href="#什么是-Locust？" class="headerlink" title="什么是 Locust？"></a>什么是 Locust？</h2><p>Locust 是一款针对 HTTP 和其他协议的开源性能&#x2F;负载测试工具， 相比于Jmeter 或者 LoadRunner 来说相对更加轻便，在单机下的性能更加强悍！</p><p>Locust 测试可通过命令行或基于 Web 的 UI 运行。可以实时查看吞吐量、响应时间和错误，并&#x2F;或导出以供日后分析。</p><p>也可以将常规 Python 库导入到测试中，借助 Locust 的可插入式架构，它可以无限扩展。与使用大多数其他工具不同，您的测试设计永远不会受到 GUI 或特定领域语言的限制。</p><p>他之所以性能强悍是因为Locust 可轻松在多台机器上分布运行负载测试。它基于事件（使用gevent），这使得单个进程可以处理数千个并发用户。虽然可能还有其他工具能够在给定硬件上每秒处理更多请求，但 Locust 每个用户的低开销使其非常适合测试高度并发的工作负载。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip3 install locust<br></code></pre></td></tr></table></figure><h2 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">locust -V<br>locust <span class="hljs-number">2.29</span><span class="hljs-number">.1</span> <span class="hljs-keyword">from</span> /usr/local/lib/python3<span class="hljs-number">.10</span>/site-packages/locust (python <span class="hljs-number">3.10</span><span class="hljs-number">.6</span>)<br></code></pre></td></tr></table></figure><h2 id="locust-的启动"><a href="#locust-的启动" class="headerlink" title="locust 的启动"></a>locust 的启动</h2><p>可以在命令行中执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">locust<br></code></pre></td></tr></table></figure><p>运行成功可以看到</p><p>打开 <a href="http://localhost:8089/">http://localhost:8089/</a></p><p>可以看到</p><img src="/2024/06/27/locust%E5%AD%A6%E4%B9%A0/locust%E7%95%8C%E9%9D%A2.png" class=""><p>此时就已经启动成功了！</p><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>界面中的 Number of users：用户数量也就是你并发的用户量</p><p>界面中的 Spawn rate：用户量的生成速率按秒</p><p>界面中的 Host：主机地址 也就是域名地址</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Locust</category>
      
      <category>Locust 介绍</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Locust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试题目之SQL面试题目之可以举一反三的SQL问题</title>
    <link href="/2024/06/27/SQL%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE/"/>
    <url>/2024/06/27/SQL%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="面试题目之SQL面试题目可以举一反三的SQL问题"><a href="#面试题目之SQL面试题目可以举一反三的SQL问题" class="headerlink" title="面试题目之SQL面试题目可以举一反三的SQL问题"></a>面试题目之SQL面试题目可以举一反三的SQL问题</h1><h1 id="经典的sql题目可以举一反三"><a href="#经典的sql题目可以举一反三" class="headerlink" title="经典的sql题目可以举一反三"></a>经典的sql题目可以举一反三</h1><p>表结构：</p><ul><li>学生表student(id,name)</li><li>课程表course(id,name)</li><li>学生成绩表student_course(sid,cid,score)</li></ul><h2 id="编写创建表的sql"><a href="#编写创建表的sql" class="headerlink" title="编写创建表的sql"></a>编写创建表的sql</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student( id <span class="hljs-type">int</span> unsigned <span class="hljs-keyword">primary</span> key auto_increment, <br>name <span class="hljs-type">char</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> ); <br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student(name) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;张三&#x27;</span>),(<span class="hljs-string">&#x27;李四&#x27;</span>); <br> <br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> course( id <span class="hljs-type">int</span> unsigned <span class="hljs-keyword">primary</span> key auto_increment, name <span class="hljs-type">char</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> ); <br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> course(name) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;语文&#x27;</span>),(<span class="hljs-string">&#x27;数学&#x27;</span>);  <br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student_course( sid <span class="hljs-type">int</span> unsigned, cid <span class="hljs-type">int</span> unsigned, score <span class="hljs-type">int</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>, <br><span class="hljs-keyword">foreign</span> key (sid) <span class="hljs-keyword">references</span> student(id), <span class="hljs-keyword">foreign</span> key (cid) <span class="hljs-keyword">references</span> course(id), <span class="hljs-keyword">primary</span> key(sid, cid) ); <br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student_course <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">90</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">90</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">70</span>);<br></code></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="查询student表中重名的学生，结果包含id和name，按name-id升序"><a href="#查询student表中重名的学生，结果包含id和name，按name-id升序" class="headerlink" title="查询student表中重名的学生，结果包含id和name，按name,id升序"></a>查询student表中重名的学生，结果包含id和name，按name,id升序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id,name<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> name <span class="hljs-keyword">in</span> (<br><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> student <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> name <span class="hljs-keyword">having</span>(<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>)<br>) <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> name;<br></code></pre></td></tr></table></figure><p>我们经常需要查询某一列重复的行，一般通过group by(有重复的列)然后取count&gt;1的值。 关系型数据库有他的局限性， 有些看似简单的查询写出来的sql很复杂，而且效率也会很低。</p><h3 id="在student-course表中查询平均分不及格的学生，列出学生id和平均分"><a href="#在student-course表中查询平均分不及格的学生，列出学生id和平均分" class="headerlink" title="在student_course表中查询平均分不及格的学生，列出学生id和平均分"></a>在student_course表中查询平均分不及格的学生，列出学生id和平均分</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sid,<span class="hljs-built_in">avg</span>(score) <span class="hljs-keyword">as</span> avg_score<br><span class="hljs-keyword">from</span> student_course<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sid <span class="hljs-keyword">having</span>(avg_score<span class="hljs-operator">&lt;</span><span class="hljs-number">60</span>);<br></code></pre></td></tr></table></figure><p>group by和having是最常考的 where子句中不能用聚集函数作为条件表达式，但是having短语可以，where和having的区别在于对用对象不同，where作用于记录，having作用于组。</p><h3 id="在student-course表中查询每门课成绩都不低于80的学生id"><a href="#在student-course表中查询每门课成绩都不低于80的学生id" class="headerlink" title="在student_course表中查询每门课成绩都不低于80的学生id"></a>在student_course表中查询每门课成绩都不低于80的学生id</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> sid<br><span class="hljs-keyword">from</span> student_course<br><span class="hljs-keyword">where</span> sid <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<br><span class="hljs-keyword">select</span> sid <span class="hljs-keyword">from</span> student_course<br><span class="hljs-keyword">where</span> score <span class="hljs-operator">&lt;</span> <span class="hljs-number">80</span>);<br></code></pre></td></tr></table></figure><p>用到反向思想，其实就是数理逻辑中的∀x:P和¬∃x:¬P是等价的。</p><h3 id="查询每个学生的总成绩，结果列出学生姓名和总成绩-如果使用下面的sql会过滤掉没有成绩的人"><a href="#查询每个学生的总成绩，结果列出学生姓名和总成绩-如果使用下面的sql会过滤掉没有成绩的人" class="headerlink" title="查询每个学生的总成绩，结果列出学生姓名和总成绩 如果使用下面的sql会过滤掉没有成绩的人"></a>查询每个学生的总成绩，结果列出学生姓名和总成绩 如果使用下面的sql会过滤掉没有成绩的人</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name,<span class="hljs-built_in">sum</span>(score) total<br><span class="hljs-keyword">from</span> student,student_course<br><span class="hljs-keyword">where</span> student.id<span class="hljs-operator">=</span>student_course.sid<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sid;<br></code></pre></td></tr></table></figure><p>更保险的做法应该是使用 左外连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name,<span class="hljs-built_in">sum</span>(score)<br><span class="hljs-keyword">from</span> student <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> student_course<br><span class="hljs-keyword">on</span> student.id<span class="hljs-operator">=</span>student_course.sid<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sid;<br></code></pre></td></tr></table></figure><h3 id="总成绩最高的学生，结果列出学生id和总成绩-下面的sql效率很低，因为要重复计算所有的总成绩。"><a href="#总成绩最高的学生，结果列出学生id和总成绩-下面的sql效率很低，因为要重复计算所有的总成绩。" class="headerlink" title="总成绩最高的学生，结果列出学生id和总成绩 下面的sql效率很低，因为要重复计算所有的总成绩。"></a>总成绩最高的学生，结果列出学生id和总成绩 下面的sql效率很低，因为要重复计算所有的总成绩。</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sid,<span class="hljs-built_in">sum</span>(score) <span class="hljs-keyword">as</span> sum_score<br><span class="hljs-keyword">from</span> student_course <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sid <span class="hljs-keyword">having</span> sum_score<span class="hljs-operator">&gt;=</span><span class="hljs-keyword">all</span><br>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(score) <span class="hljs-keyword">from</span> student_course <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sid);<br></code></pre></td></tr></table></figure><p>因为order by中可以使用聚集函数，最简单的方法是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sid,<span class="hljs-built_in">sum</span>(score) <span class="hljs-keyword">as</span> sum_score<br><span class="hljs-keyword">from</span> student_course <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sid<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sum_score <span class="hljs-keyword">desc</span> limit <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>同理可以查总成绩的前三名。</p>]]></content>
    
    
    <categories>
      
      <category>面试题目搜集</category>
      
      <category>SQL面试题目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>算法</tag>
      
      <tag>Appium</tag>
      
      <tag>Selenium</tag>
      
      <tag>pytest</tag>
      
      <tag>SQL</tag>
      
      <tag>Redis</tag>
      
      <tag>Nginx</tag>
      
      <tag>用例设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试题目搜集之Python 算法题目动态规划问题</title>
    <link href="/2024/06/27/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E6%90%9C%E9%9B%86/"/>
    <url>/2024/06/27/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E6%90%9C%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="面试题目搜集之Python-算法题目动态规划问题"><a href="#面试题目搜集之Python-算法题目动态规划问题" class="headerlink" title="面试题目搜集之Python 算法题目动态规划问题"></a>面试题目搜集之Python 算法题目动态规划问题</h1><h2 id="来自某大厂"><a href="#来自某大厂" class="headerlink" title="来自某大厂"></a>来自某大厂</h2><p>一个机器人人位于一个 m x n 网格的左上角（起始点在下图中标记为“Start”），机器人每次只能向下或者向右移动一步，机器人试图达到网格的右下角(在下图中标记为“Finish”),问总共有多少条不同的路径？</p><h2 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h2><p>这是一个经典的动态规划问题。我们可以定义一个二维数组dp，其中dp[i][j]表示从左上角到达(i, j)这个格子的不同路径数量。</p><p>由于机器人只能向右或向下移动，因此到达(i, j)的路径数量等于到达其上方格子(i-1, j)的路径数量加上到达其左方格子(i, j-1)的路径数量。</p><p>（i &#x3D; 0）和第一列（j &#x3D; 0）的格子，由于它们只能从一个方向（分别是左方和上方）到达，因此路径数量都是1。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">uniquePaths</span>(<span class="hljs-params">self, m: <span class="hljs-built_in">int</span>, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        result = [[<span class="hljs-number">1</span>] * m <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>        <span class="hljs-keyword">for</span> index1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n):<br>            <span class="hljs-keyword">for</span> index2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,m):<br>                result[index1][index2] = result[index1 - <span class="hljs-number">1</span>][index2] + result[index1][index2 - <span class="hljs-number">1</span>]<br>        output = result[-<span class="hljs-number">1</span>][-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">return</span> output<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    re = Solution()<br>    m=<span class="hljs-number">2</span><br>    n=<span class="hljs-number">3</span><br>    result=re.uniquePaths(m,n)<br>    <span class="hljs-built_in">print</span>(result)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>面试题目搜集</category>
      
      <category>Python 算法题目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
      <tag>算法</tag>
      
      <tag>Appium</tag>
      
      <tag>Selenium</tag>
      
      <tag>pytest</tag>
      
      <tag>SQL</tag>
      
      <tag>Redis</tag>
      
      <tag>Nginx</tag>
      
      <tag>用例设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python常见函数之RSA算法加密</title>
    <link href="/2024/06/27/RSA%E5%8A%A0%E5%AF%86/"/>
    <url>/2024/06/27/RSA%E5%8A%A0%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Python常见函数之RSA加密"><a href="#Python常见函数之RSA加密" class="headerlink" title="Python常见函数之RSA加密"></a>Python常见函数之RSA加密</h1><p>来自维基百科：RSA加密算法是一种非对称加密算法，在公开密钥加密和电子商业中被广泛使用。RSA是由罗纳德·李维斯特、阿迪·萨莫尔和伦纳德·阿德曼在1977年一起提出的。当时他们三人都在麻省理工学院工作。RSA 就是他们三人姓氏开头字母拼在一起组成的。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> PKCS1_v1_5 <span class="hljs-keyword">as</span> Cipher_pkcs1_v1_5<br><span class="hljs-keyword">from</span> Crypto.Signature <span class="hljs-keyword">import</span> PKCS1_v1_5<br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><span class="hljs-keyword">from</span> Crypto.Hash <span class="hljs-keyword">import</span> SHA<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> Crypto<br><span class="hljs-keyword">import</span> secrets<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rsa_long_encrypt</span>(<span class="hljs-params">pub_key_str, msg</span>):<br>    msg = msg.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    length = <span class="hljs-built_in">len</span>(msg)<br>    default_length = <span class="hljs-number">117</span><br>    <span class="hljs-comment">#公钥加密</span><br>    pubobj = Cipher_pkcs1_v1_5.new(RSA.importKey(pub_key_str))<br>    <span class="hljs-comment">#长度不用分段</span><br>    <span class="hljs-keyword">if</span> length &lt; default_length:<br>        <span class="hljs-keyword">return</span> base64.b64encode(pubobj.encrypt(msg))<br>    <span class="hljs-comment">#需要分段</span><br>    offset = <span class="hljs-number">0</span><br>    res = []<br>    <span class="hljs-keyword">while</span> length - offset &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> length - offset &gt; default_length:<br>            res.append(pubobj.encrypt(msg[offset:offset+default_length]))<br>        <span class="hljs-keyword">else</span>:<br>            res.append(pubobj.encrypt(msg[offset:]))<br>        offset += default_length<br>    byte_data = <span class="hljs-string">b&#x27;&#x27;</span>.join(res)<br>    <span class="hljs-built_in">print</span>(base64.b64encode(byte_data))<br>    <span class="hljs-keyword">return</span> base64.b64encode(byte_data)<br><br>publickey = <span class="hljs-string">&#x27;your publick key&#x27;</span><br>public_key = <span class="hljs-string">&#x27;-----BEGIN PUBLIC KEY-----\n&#x27;</span>+ publickey +<span class="hljs-string">&#x27;\n-----END PUBLIC KEY-----&#x27;</span><br><br>data = &#123;<br>    <span class="hljs-string">&quot;payAmount&quot;</span>: <span class="hljs-number">1000000</span>,<br>    <span class="hljs-string">&quot;payChId&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;bankAssetId&quot;</span>: <span class="hljs-number">1001</span><br>&#125;<br><br>first = secrets.token_bytes(<span class="hljs-number">16</span>)<br>result = base64.b64encode(first).decode()<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#password = &#x27;password=&#x27;+result</span><br>password=<span class="hljs-string">&#x27;password=WBAPfpP5ph2MrWSOkznJGA==&#x27;</span><br><span class="hljs-built_in">print</span>(password)<br>infor = json.dumps(data)<br><span class="hljs-built_in">print</span>(infor)<br>infor=rsa_long_encrypt(public_key,password)<br><span class="hljs-built_in">print</span>(infor)<br><span class="hljs-built_in">print</span>(infor.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python RSA算法加密</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
      <tag>RSA算法加密</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fiddler之过滤功能</title>
    <link href="/2024/06/27/fillder%E8%BF%87%E6%BB%A4%E5%8A%9F%E8%83%BD/"/>
    <url>/2024/06/27/fillder%E8%BF%87%E6%BB%A4%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="Fillder过滤功能"><a href="#Fillder过滤功能" class="headerlink" title="Fillder过滤功能"></a>Fillder过滤功能</h1><p>Fillder 支持过滤HTTP请求，也可以通过标记不同的sessions 赋予不同的颜色进行区分。</p><h2 id="过滤sessions"><a href="#过滤sessions" class="headerlink" title="过滤sessions"></a>过滤sessions</h2><p>我们可以通过Find Sessions去发现我们想要的sessions会以黄色高亮显示，然后可以进行保存Fiddler中保存包，<br>选择你想保存的会话，然后单击File-&gt;Save-&gt;Selected Sessions，保存后的文件后缀是.saz。</p><p>文件中会保存完整的HTTP请求和HTTP响应，双击.saz文件，或者单击Fiddler菜单栏中的File-&gt;Load Archive,就能打开.saz文件。</p><h2 id="Fiddler中编辑会话"><a href="#Fiddler中编辑会话" class="headerlink" title="Fiddler中编辑会话"></a>Fiddler中编辑会话</h2><p>默认的情况下，Fiddler中的session是不可以修改的，选择一个session,用鼠标右键选择“Unlock For Editing”（快捷键是[F12]),这样就可以在Inspectors的Raw模式下编辑HTTP请求响应</p><h2 id="过滤会话"><a href="#过滤会话" class="headerlink" title="过滤会话"></a>过滤会话</h2><p>每次启动Fiddler，打开一个网页，都能看到十几个会话，看得人眼花缭乱，我们可以使用fiddler功能来过滤。<br>在Fiddler中找到Filters选项卡，选中”Use Filters”，就可以启动过滤功能。</p><img src="/2024/06/27/fillder%E8%BF%87%E6%BB%A4%E5%8A%9F%E8%83%BD/%E8%BF%87%E6%BB%A4.png" class=""><p>Filters的Actions中，我们可以保存当前的过滤设置，也可以加载已经保存好的过滤设置。</p><img src="/2024/06/27/fillder%E8%BF%87%E6%BB%A4%E5%8A%9F%E8%83%BD/%E4%BF%9D%E5%AD%98%E8%BF%87%E6%BB%A4.png" class=""><h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><p>快速帮助我们选择session的快捷键</p><table><thead><tr><th>快捷键</th><th>用途</th></tr></thead><tbody><tr><td>CTRL+X</td><td>删除所有的Session</td></tr><tr><td>CTRL+A</td><td>选择所有的Session</td></tr><tr><td>ESC</td><td>不选择任何的Session</td></tr><tr><td>CTRL+I</td><td>反选Session</td></tr><tr><td>Delete</td><td>删除选择的Session</td></tr><tr><td>Shift+Delete</td><td>删除未选择的Session</td></tr><tr><td>R</td><td>重放选择的Session（可以重放多个Session）</td></tr><tr><td>SHIFT+R</td><td>多次重放选择的Session(随后会提示你输入，重放几次)</td></tr><tr><td>U</td><td>无条件地重放选择的Session（不会发送IF-Modified-Since和IF-None-Match Headers)</td></tr><tr><td>SHIFT+U</td><td>无条件的重放选择的Session（随后会提示你输入，重放几次)</td></tr><tr><td>P</td><td>选择“当前Seesion”的”父Session”（这个功能取决于Referer Header)</td></tr><tr><td>C</td><td>选择“当前Session”的”子Session”</td></tr><tr><td>D</td><td>选择“重复的Session”(有相同的URL和相同的method）</td></tr><tr><td>BackSpace或鼠标上的”Back”</td><td>选择“上次选择的Session”</td></tr><tr><td>Insert</td><td></td></tr><tr><td>CTRL+1CTRL+2CTRL+3CTRL+4CTRL+5CTRL+6</td><td>用粗体和颜色标记选择的Session</td></tr><tr><td>M</td><td>给选择的Session添加注释</td></tr></tbody></table><h2 id="QuickExec命令行的使用"><a href="#QuickExec命令行的使用" class="headerlink" title="QuickExec命令行的使用"></a>QuickExec命令行的使用</h2><p>Fiddler的左下角有一个命令行工具叫做QuickExec,允许你直接输入命令</p><img src="/2024/06/27/fillder%E8%BF%87%E6%BB%A4%E5%8A%9F%E8%83%BD/quickseck.png" class=""><p>常见命令如下：</p><p>help: 大力官方的使用页面的介绍，所有的命令都会列出来</p><p>Cls: 清屏（CTRL+X）快捷键也可以清屏)</p><p>Select:选择会话的命令</p><p>?.png:用来选择.png后缀的图片</p><p>Bpu:捕获request</p><p>Urlreplace:替换掉host</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Fillder</category>
      
      <category>Fillder 过滤功能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Fillder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fillder的Decode/Encode小工具</title>
    <link href="/2024/06/27/fillder%E8%A7%A3%E7%A0%81%E5%B7%A5%E5%85%B7/"/>
    <url>/2024/06/27/fillder%E8%A7%A3%E7%A0%81%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="Fillder的Decode-Encode小工具"><a href="#Fillder的Decode-Encode小工具" class="headerlink" title="Fillder的Decode&#x2F;Encode小工具"></a>Fillder的Decode&#x2F;Encode小工具</h1><p>可以通过单击工具栏中的”TextWizard”，就可以启动TextWizard小工具，可以支持很多不同的算法</p><img src="/2024/06/27/fillder%E8%A7%A3%E7%A0%81%E5%B7%A5%E5%85%B7/%E8%A7%A3%E7%A0%81.png" class="">]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Fillder</category>
      
      <category>Fillder 的Decode/Encode小工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Fillder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fillder断点修改HTTP报文</title>
    <link href="/2024/06/27/fillder%E6%96%AD%E7%82%B9%E4%BF%AE%E6%94%B9HTTP%E6%8A%A5%E6%96%87/"/>
    <url>/2024/06/27/fillder%E6%96%AD%E7%82%B9%E4%BF%AE%E6%94%B9HTTP%E6%8A%A5%E6%96%87/</url>
    
    <content type="html"><![CDATA[<h1 id="Fillder-断点修改HTTP报文"><a href="#Fillder-断点修改HTTP报文" class="headerlink" title="Fillder 断点修改HTTP报文"></a>Fillder 断点修改HTTP报文</h1><p>Fiddler可以修改任何HTTP请求的信息。</p><h2 id="全局断点"><a href="#全局断点" class="headerlink" title="全局断点"></a>全局断点</h2><p>启动Fiddler，单击菜单栏种的Rules-&gt;Automatics Breakpoint-&gt;Before Requests，或者使用快捷键【F11】,这种方法会拦截所有的对话。</p><img src="/2024/06/27/fillder%E6%96%AD%E7%82%B9%E4%BF%AE%E6%94%B9HTTP%E6%8A%A5%E6%96%87/%E5%85%A8%E5%B1%80%E6%96%AD%E7%82%B9.png" class=""><p>想要取消全局断点，可以单击Rules-&gt;Automatic Breakpoint -&gt; Disabled，或者快捷键【shift+F11】。</p><h2 id="单个断点"><a href="#单个断点" class="headerlink" title="单个断点"></a>单个断点</h2><p>已知某个请求URL地址，这个时候只需要针对一个请求打断点调试，其他的请求不拦截。</p><p>在fiddler 左下角的QuickExec命令中输入命令” bpu  拦截的网址“就可以实现拦截效果,取修改拦截的信息。</p><img src="/2024/06/27/fillder%E6%96%AD%E7%82%B9%E4%BF%AE%E6%94%B9HTTP%E6%8A%A5%E6%96%87/%E5%8D%95%E4%B8%AA%E6%96%AD%E7%82%B9.png" class=""><h2 id="Fiddler修改HTTP请求"><a href="#Fiddler修改HTTP请求" class="headerlink" title="Fiddler修改HTTP请求"></a>Fiddler修改HTTP请求</h2><img src="/2024/06/27/fillder%E6%96%AD%E7%82%B9%E4%BF%AE%E6%94%B9HTTP%E6%8A%A5%E6%96%87/%E4%BF%AE%E6%94%B9HTTP%E6%8A%A5%E6%96%87.png" class=""><p>如果想继续拦截可以点击黄色按钮”Break on Response”这个按钮，会继续拦截这个HTTP请求的响应。</p><p>Fiddler中设置断点修改HTTP响应 用法同上述全局断点， 单个断点<br> <br>第一种是全局断点，启动fiddler，单击Rulers-&gt;Automatic Breakpoint-&gt;After Response这种方法会中断所有的会话。<br>想要取消断点 ，可以单击Rules-&gt;Automatic Breakpoint-&gt;Disabled。<br>第二种是单个断点，在命令行“bpafter <a href="http://www.baidu.com”/">www.baidu.com”</a> 这种方法只会中断<a href="http://www.baidu.com./">www.baidu.com。</a><br>想要消除单个断点，可以在命令行中输入命令”bpafter”。</p><h2 id="伪造Referer"><a href="#伪造Referer" class="headerlink" title="伪造Referer"></a>伪造Referer</h2><img src="/2024/06/27/fillder%E6%96%AD%E7%82%B9%E4%BF%AE%E6%94%B9HTTP%E6%8A%A5%E6%96%87/%E4%BF%AE%E6%94%B9refer.png" class=""><p>拦截后我们可以在Raw中写入Refere：ww.dddddr.cn就可以 </p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Fillder</category>
      
      <category>Fillder 断点修改HTTP报文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Fillder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fillder简单的性能测试</title>
    <link href="/2024/06/27/fillder%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <url>/2024/06/27/fillder%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Fillder-简单的性能测试"><a href="#Fillder-简单的性能测试" class="headerlink" title="Fillder 简单的性能测试"></a>Fillder 简单的性能测试</h1><h2 id="通过查看statistics面板查看"><a href="#通过查看statistics面板查看" class="headerlink" title="通过查看statistics面板查看"></a>通过查看statistics面板查看</h2><img src="/2024/06/27/fillder%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/fillder%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95.png" class=""><p>我们打开一个网页的请求，通过查看Statistics面板可以清楚的看到每个HTTP请求的响应时间。</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Fillder</category>
      
      <category>Fillder 简单的性能测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Fillder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python常见函数之 python时间戳</title>
    <link href="/2024/06/27/python%E6%97%B6%E9%97%B4%E6%88%B3/"/>
    <url>/2024/06/27/python%E6%97%B6%E9%97%B4%E6%88%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="Python常见函数之-Python-时间戳"><a href="#Python常见函数之-Python-时间戳" class="headerlink" title="Python常见函数之 Python 时间戳"></a>Python常见函数之 Python 时间戳</h1><p>来自百度百科： 时间戳，是指用户应用数字签名技术时，产生的涵盖原始文件信息、签名时间、签名参数等信息。 其主要目的是在于，能够通过一定的技术手段认证数据产生的时间，从而得知这段数据在产生之后，是否有被篡改。</p><p>个人目前接触到使用领域：在做全球化产品的时候依赖于时间戳在不同时区进行展示</p><h2 id="time-时间戳等相关转换"><a href="#time-时间戳等相关转换" class="headerlink" title="time 时间戳等相关转换"></a>time 时间戳等相关转换</h2><h3 id="datetime与时间戳格式相互转换"><a href="#datetime与时间戳格式相互转换" class="headerlink" title="datetime与时间戳格式相互转换"></a>datetime与时间戳格式相互转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 将datetime转换为unix时间戳</span><br>dtime = datetime.date.today()<br>unix_time = time.mktime(dtime.timetuple())<br><span class="hljs-built_in">print</span>(dtime, unix_time)   <span class="hljs-comment"># 2019-09-02 1567353600.0</span><br><br><span class="hljs-comment"># 将unix时间戳转换成datetime</span><br>dtime2 = datetime.datetime.fromtimestamp(unix_time)<br><span class="hljs-built_in">print</span>(dtime2)<br><span class="hljs-number">1234567891011</span><br></code></pre></td></tr></table></figure><h3 id="根据时间差获得时间"><a href="#根据时间差获得时间" class="headerlink" title="根据时间差获得时间"></a>根据时间差获得时间</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">yestoday = datetime.date.today() + datetime.timedelta(days=-<span class="hljs-number">1</span>)  <span class="hljs-comment"># days=-1，代表昨天，-2代表前天，1代表明天...</span><br></code></pre></td></tr></table></figure><h3 id="datetime-格式与字符串格式的相互转换"><a href="#datetime-格式与字符串格式的相互转换" class="headerlink" title="datetime 格式与字符串格式的相互转换"></a>datetime 格式与字符串格式的相互转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># datetime 格式与字符串格式的相互转换</span><br>today_str =datetime.date.today().strftime(<span class="hljs-string">&quot;%Y-%m-%d&quot;</span>)  <span class="hljs-comment"># 转换为字符串</span><br>today_datetime = datetime.datetime.strptime(<span class="hljs-string">&quot;2019-09-01 00:00:00&quot;</span>, <span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)  <span class="hljs-comment"># 转换为datetime</span><br><span class="hljs-built_in">print</span>(today_str,<span class="hljs-built_in">type</span>(today_str)) <br><span class="hljs-built_in">print</span>(today_datetime,<span class="hljs-built_in">type</span>(today_datetime))<br><span class="hljs-number">12345</span><br></code></pre></td></tr></table></figure><h3 id="定时时间表"><a href="#定时时间表" class="headerlink" title="定时时间表"></a>定时时间表</h3><p>比如获得24个小时的列表（以下是每隔半个小时）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_time_list</span>(<span class="hljs-params">self</span>):<br>     start_time = datetime.datetime.strptime(<span class="hljs-string">&quot;2019-08-28 14:00:00&quot;</span>, <span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)<br>     unix_start_time = time.mktime(start_time.timetuple())  <span class="hljs-comment"># 转换成时间戳</span><br>     un_timelist = [(unix_start_time+i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">86400</span>+<span class="hljs-number">1</span>, <span class="hljs-number">1800</span>)]  <br>     timelist = [datetime.datetime.fromtimestamp(un_time) <span class="hljs-keyword">for</span> un_time <span class="hljs-keyword">in</span> un_timelist]  <span class="hljs-comment"># 再转换成datetime格式</span><br>     <span class="hljs-keyword">return</span> timelist<br></code></pre></td></tr></table></figure><h3 id="各个级别的时间戳获取"><a href="#各个级别的时间戳获取" class="headerlink" title="各个级别的时间戳获取"></a>各个级别的时间戳获取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> datetime<br><br>original=time.time()   <span class="hljs-comment"># 原始时间戳</span><br>Secondlevel =<span class="hljs-built_in">int</span>(original)       <span class="hljs-comment"># 秒级别时间戳</span><br>millisecondlevel=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">round</span>(original*<span class="hljs-number">1000</span>)   <span class="hljs-comment"># 毫秒级别时间戳</span><br>microsecondlevel=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">round</span>(original*<span class="hljs-number">1000000</span>)  <span class="hljs-comment"># 微秒级别时间戳</span><br></code></pre></td></tr></table></figure><h3 id="毫秒级别时间戳转换时间"><a href="#毫秒级别时间戳转换时间" class="headerlink" title="毫秒级别时间戳转换时间"></a>毫秒级别时间戳转换时间</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timeStamp</span>(<span class="hljs-params">timeNum</span>):<br>    timeStamp = <span class="hljs-built_in">float</span>(timeNum / <span class="hljs-number">1000</span>)<br>    timeArray = time.localtime(timeStamp)<br>    otherStyleTime = time.strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, timeArray)<br>    <span class="hljs-built_in">print</span>(otherStyleTime)<br><br><br>timeStamp(<span class="hljs-number">1622674800000</span>)  <span class="hljs-comment"># 2021-06-02 23:00:00</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 时间戳函数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
      <tag>python 时间戳</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024年第二次在北京参加油车摇号</title>
    <link href="/2024/06/27/%E9%9A%8F%E7%AC%94/"/>
    <url>/2024/06/27/%E9%9A%8F%E7%AC%94/</url>
    
    <content type="html"><![CDATA[<h1 id="2024年第二次在北京参加油车摇号"><a href="#2024年第二次在北京参加油车摇号" class="headerlink" title="2024年第二次在北京参加油车摇号"></a>2024年第二次在北京参加油车摇号</h1><p>我是从2023年才满足了参加北京摇号的资格，两次结果可能不用想也知道没中，看着北京摇号贴吧哪些人在疯狂吐槽这些摇号政策，我心里只想哎，这破京牌有啥用！</p><p>然后转头就许愿 2024下半年让我中！😂😂😂</p><img src="/2024/06/27/%E9%9A%8F%E7%AC%94/%E4%B8%AD%E7%AD%BE.jpeg" class="">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
      <category>2024年随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>随笔</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python常见函数之 is和==的区别</title>
    <link href="/2024/06/27/is%E5%92%8C==%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2024/06/27/is%E5%92%8C==%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="python-常见函数之-is-与-的区别"><a href="#python-常见函数之-is-与-的区别" class="headerlink" title="python 常见函数之 is 与 &#x3D;&#x3D; 的区别"></a>python 常见函数之 is 与 &#x3D;&#x3D; 的区别</h1><h2 id="is"><a href="#is" class="headerlink" title="is"></a>is</h2><p>is 比较 id()</p><h2 id=""><a href="#" class="headerlink" title="&#x3D;&#x3D;"></a>&#x3D;&#x3D;</h2><p>&#x3D;&#x3D; 比较 变量值</p><h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># is, 本质 id(a) 与 id(b) 比较</span><br><span class="hljs-comment"># = 右边为对象时，表示生成新对象 </span><br><br>a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>] <br>b = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>] <br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)   <span class="hljs-comment"># False, 说明 id 不同</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a), <span class="hljs-built_in">id</span>(b))<br><span class="hljs-built_in">print</span>(a == b)   <span class="hljs-comment"># True, 值相同，内部 __eq__ 魔法函数</span><br><br><span class="hljs-comment"># 小整数、小字符串 全局唯一 intern机制</span><br><br>a1 = <span class="hljs-number">1</span> a2 = <span class="hljs-number">1</span> <br><span class="hljs-built_in">print</span>(a1 <span class="hljs-keyword">is</span> a2)     <span class="hljs-comment"># True  </span><br>s1 = <span class="hljs-string">&#x27;abc&#x27;</span> <br>s2 = <span class="hljs-string">&#x27;abc&#x27;</span> <br><span class="hljs-built_in">print</span>(s1 <span class="hljs-keyword">is</span> s2)     <span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># 类</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>:    <br>    <span class="hljs-keyword">pass</span>   <br><br><span class="hljs-comment"># People 全局唯一 </span><br>person = People() <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(person) <span class="hljs-keyword">is</span> People)   <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python is和==的区别</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python常见函数之 isinstance和type的区别</title>
    <link href="/2024/06/27/isinstance%E5%92%8Ctype%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2024/06/27/isinstance%E5%92%8Ctype%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="python常见函数之-isinstance和type的区别"><a href="#python常见函数之-isinstance和type的区别" class="headerlink" title="python常见函数之 isinstance和type的区别"></a>python常见函数之 isinstance和type的区别</h1><h2 id="isinstance"><a href="#isinstance" class="headerlink" title="isinstance"></a>isinstance</h2><p>isinstance 会去查找继承链</p><h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><p>type 只判断变量的内存地址</p><h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-keyword">pass</span><br><br>b = B()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(b, B)) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(b, A)) <span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># is 判断 id 的意思</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(b) <span class="hljs-keyword">is</span> B) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(b) <span class="hljs-keyword">is</span> A)     <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python isinstance和type的区别</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jmeter 切换语言</title>
    <link href="/2024/06/26/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7JMETER/"/>
    <url>/2024/06/26/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7JMETER/</url>
    
    <content type="html"><![CDATA[<h1 id="Jmeter-介绍"><a href="#Jmeter-介绍" class="headerlink" title="Jmeter 介绍"></a>Jmeter 介绍</h1><p>Jmeter 是一款优秀的性能测试工具，是通过java开发，这里简单的安装过程不在介绍，主要介绍一下使用技巧。</p><h2 id="切换语言"><a href="#切换语言" class="headerlink" title="切换语言"></a>切换语言</h2><p>可以通过单击options-&gt;Choose Language来选择语言</p><img src="/2024/06/26/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7JMETER/Jmeter%E5%88%87%E6%8D%A2%E8%AF%AD%E8%A8%80.png" class="">]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Jmeter</category>
      
      <category>Jmeter 切换语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Jmeter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fiddler之面板信息介绍</title>
    <link href="/2024/06/26/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7Fiddler/"/>
    <url>/2024/06/26/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7Fiddler/</url>
    
    <content type="html"><![CDATA[<h1 id="Fillder"><a href="#Fillder" class="headerlink" title="Fillder"></a>Fillder</h1><p>Fillder是一款优秀的抓包软件，不管是在windows，linux， mac下都可以使用！关于基本的安装这边就跳过了，下面我们主要来看一下使用过程中的一些技巧</p><h2 id="Fillder-面板信息组成"><a href="#Fillder-面板信息组成" class="headerlink" title="Fillder 面板信息组成"></a>Fillder 面板信息组成</h2><img src="/2024/06/26/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7Fiddler/fillder%E9%9D%A2%E6%9D%BF%E7%BB%84%E6%88%90%E4%BF%A1%E6%81%AF.png" class=""><h3 id="HTTP报文总体介绍"><a href="#HTTP报文总体介绍" class="headerlink" title="HTTP报文总体介绍"></a>HTTP报文总体介绍</h3><p>HTTP协议报文的结构</p><p>HTTP报文分2个：一个是HTTP请求报文，一个是HTTP响应报文</p><p>HTTP请求报文分为3部分：第一部分叫其实行(Request line),第二部分叫首部（Request Header),第三部分叫主体(Body)</p><p>第一行中Method表示请求方法，比如“POST”或者“GET”现在使用的HTTP协议版本是1.1</p><p>第二部分是首部（Header)</p><p>第三部分是body</p><p>特别要注意，Header与Body之间有一个空行</p><h3 id="Fillder-请求界面"><a href="#Fillder-请求界面" class="headerlink" title="Fillder 请求界面"></a>Fillder 请求界面</h3><img src="/2024/06/26/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7Fiddler/fillder%E8%AF%B7%E6%B1%82%E7%95%8C%E9%9D%A2.png" class=""><h3 id="Fillder-响应界面"><a href="#Fillder-响应界面" class="headerlink" title="Fillder 响应界面"></a>Fillder 响应界面</h3><img src="/2024/06/26/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7Fiddler/fillder%E5%93%8D%E5%BA%94%E7%95%8C%E9%9D%A2.png" class=""><h3 id="HTTP协议请求方法和状态码"><a href="#HTTP协议请求方法和状态码" class="headerlink" title="HTTP协议请求方法和状态码"></a>HTTP协议请求方法和状态码</h3><p>HTTP协议定义了很多与服务器交互的方法，最基本有5种，分别是GET HEAD POST PUT DELETE。对应的就是查改增删的4个操作，最常见的是POST和GET，GET一般用于获取&#x2F;查询资源信息，而POST一般用于更新资源信息。</p><p>GET和POST方法的区别</p><p>GET提交的数据会放在URL之后，以问号（？）分割URL和传输数据，参数之间以&amp;相连，而POST是把提交的数据放在HTTP包的Body中</p><p>GET提交数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据大小没有限制</p><p>GET方式需要使用Request.QueryString来取得变量的值，而POST方法通过Request.Form来获取变量的值</p><p>GET方式提交数据会带来安全问题，比如登录一个页面通过GET的方式提交数据时候，用户名和密码都会显示在URL中，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码</p><h3 id="HTTP-报文响应介绍"><a href="#HTTP-报文响应介绍" class="headerlink" title="HTTP 报文响应介绍"></a>HTTP 报文响应介绍</h3><p>Response消息的结构和Request消息的结构基本一样，同样也分为3部分；第一部分叫响应行（Response Line)，第二部分叫响应首部（Response Header)，第三部分是主体(Body)</p><p>第一部分是起始行，有状态码和状态码消息</p><p>第二部分是首部，</p><p>第三部分是主体</p><p>特别注意 Header首部和Body(主体)之间有一个空行</p><h4 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h4><table><thead><tr><th>状态码</th><th>已定义范围</th><th>分类</th></tr></thead><tbody><tr><td>1XX</td><td>100-101</td><td>信息提示：表示请求已成功接收、继续处理</td></tr><tr><td>2XX</td><td>200-206</td><td>成功、表示请求已被成功接收，理解、接受</td></tr><tr><td>3XX</td><td>300-305</td><td>重定向，完成请求，必须进行更进一步的处理</td></tr><tr><td>4XX</td><td>400-415</td><td>客户端错误，请求有语法错误或者无法实现请求</td></tr><tr><td>5XX</td><td>500-505</td><td>服务器错误，服务器未能实现合法的请求</td></tr></tbody></table><h4 id="HTTP-协议Header介绍"><a href="#HTTP-协议Header介绍" class="headerlink" title="HTTP 协议Header介绍"></a>HTTP 协议Header介绍</h4><p>Header的语法格式是”key:value”，一行一个Header。每一个Header都有特殊的作用，在Finddler中可以查看完整的Header。</p><p>Fiddler能方便的查看HTTP请求Header,选中一个HTTP请求，单击Inspectors tab–&gt;Request tab–&gt;Headers</p><h4 id="Cache相关的Header"><a href="#Cache相关的Header" class="headerlink" title="Cache相关的Header"></a>Cache相关的Header</h4><h5 id="COOKIE"><a href="#COOKIE" class="headerlink" title="COOKIE"></a>COOKIE</h5><p>Cookie是一种HTTP Header,是HTTP中非常重要的内容，它由key&#x3D;&#x3D;value形式组成</p><p>Accept</p><p>Accept表示浏览器客户端可以接受的媒体类型</p><p>例如 Accept:text&#x2F;html代表浏览器可以接受服务器返回html，也就是我们通常说的html文档。</p><p>通配符&#x2F;*代表任意类型，\<em>&#x2F;\</em>表示可以接受任何类型。</p><h5 id="Accept-Encoding"><a href="#Accept-Encoding" class="headerlink" title="Accept-Encoding"></a>Accept-Encoding</h5><p>Accept-Encoding跟压缩有关，浏览器发送HTTP请求给web服务器，HTTP请求中的Header有Accept-Encoding:gizp,deflate(告诉服务器，浏览器支持gizp压缩)</p><h5 id="Accept-Language"><a href="#Accept-Language" class="headerlink" title="Accept-Language"></a>Accept-Language</h5><p>Accept-Language的作用是声明自己接受的语言</p><p>也就是编码格式 UTF-8 GB2312 ZH-CN</p><h5 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent"></a>User-Agent</h5><p>Use-Agent的作用是浏览器用来告诉服务器，客户端使用的操作系统及版本，CPU类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件</p><p>修改User-Agent可以伪装不同的客户端</p><img src="/2024/06/26/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7Fiddler/fillder%E4%BF%AE%E6%94%B9Useragent.png" class=""><p>单击Rules-&gt;User-Agents然后可以选择我们想要切换的系统</p><h5 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h5><p>HTTP协议头中的Refer主要来让服务器来判断来源页面，即用户是从哪个页面过来的网站通常用来统计用户的来源，看用户是从搜索页面来的，还是从其他网站链接过来的，或是从书签等访问过来的，以便合理的定位网站</p><p>Referer有时也被用作防盗链，即下载时候判断来源地址是不是在网站域名之内，否则就不能下载或显示</p><h5 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h5><p>从HTTP1.1起，系统默认开启了Connection:Keep-Alive，保持连接特性</p><h5 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h5><p>主要是指定被请求的主机端口号，它通常从HTTP URL中提取出来</p><p>Web网页抓包和fiddler修改包</p><p>通过fiddler可以修改数据伪造数据</p><p>第一个HTTP请求是获取页面布局的HTML 也叫做“父请求”</p><p>随后的HTTP请求会根据之前页面的请求去再次请求，叫做“子请求”</p><img src="/2024/06/26/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7Fiddler/%E7%88%B6%E5%AD%90%E8%AF%B7%E6%B1%82.png" class=""><p>选中我们的第一个父请求然后右击选择seletc–&gt;Child Request 就可以找到对应的子</p><p>找父请求的话我们选中子子请求右击选择select-&gt;Parent Request就可以找到对应的父请求。</p><p>查找相同的请求，右击选择select–&gt;Duplicate Requests就可以选中了相同的请求了。</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Fillder</category>
      
      <category>Fillder 面板信息介绍</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Fillder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python常见函数之 Python 切片操作详解</title>
    <link href="/2024/06/25/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2024/06/25/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Python常见函数之-Python-切片操作详解"><a href="#Python常见函数之-Python-切片操作详解" class="headerlink" title="Python常见函数之 Python 切片操作详解"></a>Python常见函数之 Python 切片操作详解</h1><p>在 Python 中，切片（slicing）是一种强大的工具，它允许我们访问序列类型（如列表、元组、字符串等）中的一部分元素。切片的基本语法是 <code>[start:stop:step]</code>，其中 <code>start</code> 是起始索引（包含），<code>stop</code> 是结束索引（不包含），<code>step</code> 是步长。  </p><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><p>第一个数字 start 表示切片开始位置，默认 0</p><p>第二个数字 end 表示切片截止(但不包含)位置，默认列表长度</p><p>第三个数字 step 表示切片的步骤，默认为 1</p><p>当 start 为 0 时可以省略</p><p>当 end 为列表长度时可以省略</p><p>当 step 为 1 时可以省略，并且省略步长时可以同时省略最后一个冒号</p><p>当 step 为负数时，表示反向切片，这时 start 应该比 end 的值要大才行</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python">a_list = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>, <span class="hljs-number">17</span>]<br><br>a_list[::]      <span class="hljs-comment"># 返回包含原列表中所有元素的新列表</span><br><br>a_list[::-<span class="hljs-number">1</span>]    <span class="hljs-comment"># 返回包含原列表中所有元素的逆向新列表</span><br><br>a_list[::<span class="hljs-number">2</span>]     <span class="hljs-comment"># 隔一个元素取一个，获取偶数位置的元素</span><br><br>a_list[<span class="hljs-number">1</span>::<span class="hljs-number">2</span>]    <span class="hljs-comment"># 隔一个元素取一个，获取奇数位置的元素</span><br><br>a_list[<span class="hljs-number">3</span>:<span class="hljs-number">6</span>]     <span class="hljs-comment"># 指定切片的开始和结束位置</span><br><br>a_list[<span class="hljs-number">0</span>:<span class="hljs-number">100</span>]   <span class="hljs-comment"># 切片结束位置大于列表长度是，从列表尾部截断</span><br><br>a_list[<span class="hljs-number">100</span>:]    <span class="hljs-comment"># 切片开始位置大于列表长度时，返回空列表</span><br><br><br><br>a_list[<span class="hljs-built_in">len</span>(a_list):<span class="hljs-number">0</span>] = [<span class="hljs-number">9</span>]     <span class="hljs-comment"># 在列表尾部增加元素</span><br><br>a_list[:<span class="hljs-number">0</span>] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]             <span class="hljs-comment"># 在列表头部增加元素</span><br><br>a_list[<span class="hljs-number">3</span>:<span class="hljs-number">3</span>] = [<span class="hljs-number">100</span>]             <span class="hljs-comment"># 在列表中间位置插入元素</span><br><br>a_list[:<span class="hljs-number">2</span>] = [<span class="hljs-number">100</span>, <span class="hljs-number">200</span>]         <span class="hljs-comment"># 替换列表元素，等号两边长度相等</span><br><br>a_list[<span class="hljs-number">3</span>:] = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]          <span class="hljs-comment"># 替换列表元素，等号两边长度可以不相等</span><br><br>a_list[:<span class="hljs-number">3</span>] = []                 <span class="hljs-comment"># 删除列表中前 3 个元素</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 常见切片操作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
