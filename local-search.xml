<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python 面试算法题目按照输入的数字分割字母</title>
    <link href="/2025/07/22/python%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/"/>
    <url>/2025/07/22/python%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-面试算法题目按照输入的数字分割字母"><a href="#Python-面试算法题目按照输入的数字分割字母" class="headerlink" title="Python 面试算法题目按照输入的数字分割字母"></a>Python 面试算法题目按照输入的数字分割字母</h1><hr><h2 id="题目介绍："><a href="#题目介绍：" class="headerlink" title="题目介绍："></a>题目介绍：</h2><p>给出一个字符串，然后输入一个数字长度，根据输入的数字长度对字符串进行分割，如果按照数字长度分割出的信息里面含有重复项则舍弃只保留其中一个即可，输出的时候需要保留原有的顺序。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">s = &#x27;AAABCADDE&#x27;<br>k = 3<br><br>那么我们打印出来的就是 u1 = &#x27;A&#x27; u2=&#x27;BCA&#x27; u3=&#x27;DE&#x27;<br></code></pre></td></tr></table></figure><hr><h2 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge_the_tools</span>(<span class="hljs-params">string, k</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> string:<br>        <span class="hljs-keyword">return</span><br>    result = <span class="hljs-string">&#x27;&#x27;</span><br>    <br>    <span class="hljs-keyword">for</span> i, ch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(string):<br>        <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> i % k == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">if</span> result:<br>                <span class="hljs-built_in">print</span>(result)<br>            result = <span class="hljs-string">&#x27;&#x27;</span><br><br>        <span class="hljs-keyword">if</span> ch <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> result:<br>            result += ch<br>            <br>    <span class="hljs-keyword">if</span> result:<br>        <span class="hljs-built_in">print</span>(result)<br>            <br>            <br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    string, k = <span class="hljs-built_in">input</span>(), <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    merge_the_tools(string,k)<br></code></pre></td></tr></table></figure><hr><h2 id="代码解释："><a href="#代码解释：" class="headerlink" title="代码解释："></a>代码解释：</h2><p>这里我们可以通过分析如果当前长度和输入的长度一致，那么我们对输入的数字和长度取余为0的时候表示我们已经取值够了，那么我们只需要在余数为0的时候输出信息即可，然后清空已经存储的信息，继续上面的逻辑</p><p>在这里我使用了<code>enumerate</code> 函数可以将遍历出来的信息包含数字索引信息，这样我们就可以通过索引信息来进行取余的操作！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i, ch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(string):<br>       <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> i % k == <span class="hljs-number">0</span>:<br>           <span class="hljs-keyword">if</span> result:<br>               <span class="hljs-built_in">print</span>(result)<br>           result = <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>那么我们只需在余数不是0的情况下将我们的信息添加到<code>result</code>中，这时候你只需要判断之前是否存在相同的信息即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> ch <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> result:<br>           result += ch<br></code></pre></td></tr></table></figure><p>那么如果存在极端情况，你只有3个数字，但是你输入了5此时上面的都不适用，那么你只需要判断当前result不是空，直接将输出的信息打印出来即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> result:<br>       <span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>面试题目搜集</category>
      
      <category>Python 算法题目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis 项目实战分析</title>
    <link href="/2025/07/22/redis%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E5%88%86%E6%9E%90/"/>
    <url>/2025/07/22/redis%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis-项目实战分析"><a href="#Redis-项目实战分析" class="headerlink" title="Redis 项目实战分析"></a>Redis 项目实战分析</h1><hr><h2 id="1-1-项目实战一：百万-PV-新闻网站缓存架构"><a href="#1-1-项目实战一：百万-PV-新闻网站缓存架构" class="headerlink" title="1.1 项目实战一：百万 PV 新闻网站缓存架构"></a>1.1 项目实战一：百万 PV 新闻网站缓存架构</h2><h3 id="✅-背景"><a href="#✅-背景" class="headerlink" title="✅ 背景"></a>✅ 背景</h3><p>某新闻网站日均访问量达百万级，文章访问量极不均衡（80&#x2F;20 法则），对热点文章访问频繁，需设计高性能缓存方案。</p><h3 id="📌-关键目标"><a href="#📌-关键目标" class="headerlink" title="📌 关键目标"></a>📌 关键目标</h3><ul><li>缓存热点新闻，减轻 DB 压力</li><li>页面缓存 + 数据缓存结合</li><li>缓存过期与更新机制</li></ul><hr><h3 id="📦-架构设计"><a href="#📦-架构设计" class="headerlink" title="📦 架构设计"></a>📦 架构设计</h3><table><thead><tr><th>缓存层</th><th>说明</th><th>技术选型</th></tr></thead><tbody><tr><td>页面缓存</td><td>对静态页面直接缓存</td><td>Nginx + Redis</td></tr><tr><td>数据缓存</td><td>查询 DB 前先查 Redis</td><td>Redis</td></tr><tr><td>热点预热</td><td>发布文章时提前缓存热点</td><td>后台管理逻辑</td></tr></tbody></table><hr><h3 id="🧠-代码示例（Python，使用-Flask-框架）"><a href="#🧠-代码示例（Python，使用-Flask-框架）" class="headerlink" title="🧠 代码示例（Python，使用 Flask 框架）"></a>🧠 代码示例（Python，使用 Flask 框架）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, jsonify<br><span class="hljs-keyword">import</span> redis<br><span class="hljs-keyword">import</span> time<br><br>app = Flask(__name__)<br>r = redis.Redis(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">6379</span>, decode_responses=<span class="hljs-literal">True</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_article_from_db</span>(<span class="hljs-params">article_id</span>):<br>    <span class="hljs-comment"># 模拟数据库查询</span><br>    time.sleep(<span class="hljs-number">0.5</span>)<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;id&quot;</span>: article_id, <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">f&quot;文章<span class="hljs-subst">&#123;article_id&#125;</span>&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;这是一篇内容丰富的文章。&quot;</span>&#125;<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/article/&lt;int:article_id&gt;&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_article</span>(<span class="hljs-params">article_id</span>):<br>    key = <span class="hljs-string">f&quot;article:<span class="hljs-subst">&#123;article_id&#125;</span>&quot;</span><br>    article = r.get(key)<br>    <span class="hljs-keyword">if</span> article:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;source&quot;</span>: <span class="hljs-string">&quot;cache&quot;</span>, <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-built_in">eval</span>(article)&#125;)<br><br>    <span class="hljs-comment"># 缓存未命中，访问 DB</span><br>    article = get_article_from_db(article_id)<br>    r.setex(key, <span class="hljs-number">300</span>, <span class="hljs-built_in">str</span>(article))  <span class="hljs-comment"># 缓存 5 分钟</span><br>    <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;source&quot;</span>: <span class="hljs-string">&quot;db&quot;</span>, <span class="hljs-string">&quot;data&quot;</span>: article&#125;)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><hr><h3 id="💡-缓存更新策略"><a href="#💡-缓存更新策略" class="headerlink" title="💡 缓存更新策略"></a>💡 缓存更新策略</h3><ul><li>发布&#x2F;修改文章后，后台自动刷新 Redis 中对应的 key。</li><li>对热点文章列表定时进行预热（job 脚本自动执行）。</li></ul><hr><h2 id="1-2-项目实战二：高并发电商抢购系统"><a href="#1-2-项目实战二：高并发电商抢购系统" class="headerlink" title="1.2 项目实战二：高并发电商抢购系统"></a>1.2 项目实战二：高并发电商抢购系统</h2><h3 id="✅-背景-1"><a href="#✅-背景-1" class="headerlink" title="✅ 背景"></a>✅ 背景</h3><p>秒杀活动中，用户瞬间涌入，需要保障商品不被超卖、服务不被打垮。</p><hr><h3 id="📌-技术关键点"><a href="#📌-技术关键点" class="headerlink" title="📌 技术关键点"></a>📌 技术关键点</h3><table><thead><tr><th>问题</th><th>解决方案</th></tr></thead><tbody><tr><td>库存扣减一致性</td><td>Redis 原子操作</td></tr><tr><td>接口幂等性</td><td>防止重复请求</td></tr><tr><td>并发控制</td><td>限流 + 排队机制</td></tr></tbody></table><hr><h3 id="🧠-示例代码：Redis-原子扣库存（Python）"><a href="#🧠-示例代码：Redis-原子扣库存（Python）" class="headerlink" title="🧠 示例代码：Redis 原子扣库存（Python）"></a>🧠 示例代码：Redis 原子扣库存（Python）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, jsonify<br><span class="hljs-keyword">import</span> redis<br><br>app = Flask(__name__)<br>r = redis.Redis(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">6379</span>, decode_responses=<span class="hljs-literal">True</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/buy&quot;</span>, methods=[<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">buy_item</span>():<br>    user_id = request.form[<span class="hljs-string">&quot;user_id&quot;</span>]<br>    product_id = request.form[<span class="hljs-string">&quot;product_id&quot;</span>]<br>    key = <span class="hljs-string">f&quot;stock:<span class="hljs-subst">&#123;product_id&#125;</span>&quot;</span><br>    user_key = <span class="hljs-string">f&quot;purchased:<span class="hljs-subst">&#123;product_id&#125;</span>:<span class="hljs-subst">&#123;user_id&#125;</span>&quot;</span><br><br>    <span class="hljs-comment"># 避免重复下单</span><br>    <span class="hljs-keyword">if</span> r.exists(user_key):<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;fail&quot;</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;重复下单&quot;</span>&#125;)<br><br>    <span class="hljs-comment"># 扣减库存</span><br>    <span class="hljs-keyword">with</span> r.pipeline() <span class="hljs-keyword">as</span> pipe:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">try</span>:<br>                pipe.watch(key)<br>                stock = <span class="hljs-built_in">int</span>(pipe.get(key) <span class="hljs-keyword">or</span> <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">if</span> stock &gt; <span class="hljs-number">0</span>:<br>                    pipe.multi()<br>                    pipe.decr(key)<br>                    pipe.<span class="hljs-built_in">set</span>(user_key, <span class="hljs-number">1</span>)<br>                    pipe.expire(user_key, <span class="hljs-number">3600</span>)<br>                    pipe.execute()<br>                    <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;购买成功&quot;</span>&#125;)<br>                <span class="hljs-keyword">else</span>:<br>                    pipe.unwatch()<br>                    <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;fail&quot;</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;已售罄&quot;</span>&#125;)<br>            <span class="hljs-keyword">except</span> redis.WatchError:<br>                <span class="hljs-keyword">continue</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    r.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;stock:1001&quot;</span>, <span class="hljs-number">100</span>)  <span class="hljs-comment"># 初始化库存</span><br>    app.run()<br></code></pre></td></tr></table></figure><hr><h2 id="1-3-项目实战三：消息中心与延时任务系统"><a href="#1-3-项目实战三：消息中心与延时任务系统" class="headerlink" title="1.3 项目实战三：消息中心与延时任务系统"></a>1.3 项目实战三：消息中心与延时任务系统</h2><h3 id="✅-背景-2"><a href="#✅-背景-2" class="headerlink" title="✅ 背景"></a>✅ 背景</h3><p>电商平台需要给用户发送短信&#x2F;站内信&#x2F;推送等消息，同时支持延迟通知（如：1 小时后提醒付款）。</p><hr><h3 id="📌-技术设计"><a href="#📌-技术设计" class="headerlink" title="📌 技术设计"></a>📌 技术设计</h3><table><thead><tr><th>功能</th><th>方案</th></tr></thead><tbody><tr><td>延时消息调度</td><td>Redis ZSET</td></tr><tr><td>多级优先队列</td><td>队列优先级划分</td></tr><tr><td>失败重试机制</td><td>失败任务重新入队</td></tr></tbody></table><hr><h3 id="🧠-延时队列实现（ZSET）"><a href="#🧠-延时队列实现（ZSET）" class="headerlink" title="🧠 延时队列实现（ZSET）"></a>🧠 延时队列实现（ZSET）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> redis<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> json<br><br>r = redis.Redis(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">6379</span>, decode_responses=<span class="hljs-literal">True</span>)<br>DELAY_QUEUE = <span class="hljs-string">&quot;delay:queue&quot;</span><br><br><span class="hljs-comment"># 推送延时任务</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">push_delay_task</span>(<span class="hljs-params">task_id, delay_seconds</span>):<br>    timestamp = <span class="hljs-built_in">int</span>(time.time() + delay_seconds)<br>    task_data = &#123;<span class="hljs-string">&quot;id&quot;</span>: task_id, <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;sms&quot;</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;请尽快完成支付&quot;</span>&#125;<br>    r.zadd(DELAY_QUEUE, &#123;json.dumps(task_data): timestamp&#125;)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;推送任务成功&quot;</span>)<br><br><span class="hljs-comment"># 消费任务</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">consume_delay_task</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        now = <span class="hljs-built_in">int</span>(time.time())<br>        items = r.zrangebyscore(DELAY_QUEUE, <span class="hljs-number">0</span>, now, start=<span class="hljs-number">0</span>, num=<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> items:<br>            time.sleep(<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> items:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;处理任务：&quot;</span>, item)<br>            r.zrem(DELAY_QUEUE, item)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 示例：推送任务</span><br>    push_delay_task(<span class="hljs-string">&quot;task_001&quot;</span>, delay_seconds=<span class="hljs-number">10</span>)<br><br>    <span class="hljs-comment"># 消费任务</span><br>    consume_delay_task()<br></code></pre></td></tr></table></figure><hr><h2 id="🔚-附录"><a href="#🔚-附录" class="headerlink" title="🔚 附录"></a>🔚 附录</h2><h3 id="✅-Redis-命令速查表（部分）"><a href="#✅-Redis-命令速查表（部分）" class="headerlink" title="✅ Redis 命令速查表（部分）"></a>✅ Redis 命令速查表（部分）</h3><table><thead><tr><th>功能</th><th>命令</th><th>示例</th></tr></thead><tbody><tr><td>设置键值</td><td><code>SET</code></td><td><code>SET user:1 &quot;Tom&quot;</code></td></tr><tr><td>获取键值</td><td><code>GET</code></td><td><code>GET user:1</code></td></tr><tr><td>增加数值</td><td><code>INCR</code></td><td><code>INCR page:view</code></td></tr><tr><td>有序集合加分</td><td><code>ZINCRBY</code></td><td><code>ZINCRBY rank 10 &quot;user1&quot;</code></td></tr></tbody></table><hr><h3 id="🔍-Redis-可视化工具推荐"><a href="#🔍-Redis-可视化工具推荐" class="headerlink" title="🔍 Redis 可视化工具推荐"></a>🔍 Redis 可视化工具推荐</h3><table><thead><tr><th>工具</th><th>特点</th></tr></thead><tbody><tr><td>RedisInsight</td><td>图形化分析、键空间管理</td></tr><tr><td>RDM</td><td>跨平台、支持 SSH 连接</td></tr><tr><td>Medis</td><td>macOS 优雅 Redis GUI</td></tr></tbody></table><hr><h3 id="⚠-Redis-实战坑点与建议"><a href="#⚠-Redis-实战坑点与建议" class="headerlink" title="⚠ Redis 实战坑点与建议"></a>⚠ Redis 实战坑点与建议</h3><ul><li><strong>热点 key 分布不均</strong>：引入本地缓存或按用户打散 key。</li><li><strong>keys 命令造成阻塞</strong>：避免线上使用，替换为 <code>scan</code>。</li><li><strong>AOF 日志膨胀</strong>：定期重写（rewrite）。</li><li><strong>慢查询拖垮主线程</strong>：开启 <code>slowlog</code> 并监控。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
      <category>Redis 教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis 缓存应用与热点</title>
    <link href="/2025/07/17/redis%E7%BC%93%E5%AD%98%E5%BA%94%E7%94%A8%E4%B8%8E%E7%83%AD%E7%82%B9/"/>
    <url>/2025/07/17/redis%E7%BC%93%E5%AD%98%E5%BA%94%E7%94%A8%E4%B8%8E%E7%83%AD%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis-缓存应用与热点问题实战"><a href="#Redis-缓存应用与热点问题实战" class="headerlink" title="Redis 缓存应用与热点问题实战"></a>Redis 缓存应用与热点问题实战</h1><hr><h2 id="1-1-缓存读写流程：Cache-Aside（旁路缓存模式）"><a href="#1-1-缓存读写流程：Cache-Aside（旁路缓存模式）" class="headerlink" title="1.1 缓存读写流程：Cache Aside（旁路缓存模式）"></a>1.1 缓存读写流程：Cache Aside（旁路缓存模式）</h2><h3 id="📌-工作流程："><a href="#📌-工作流程：" class="headerlink" title="📌 工作流程："></a>📌 工作流程：</h3><ol><li>先从缓存查询数据；</li><li>如果没有命中（cache miss），从数据库加载；</li><li>将数据写入缓存；</li><li>返回数据给业务；</li><li>更新数据时，先更新数据库，再删除缓存。</li></ol><h3 id="✅-Python-示例："><a href="#✅-Python-示例：" class="headerlink" title="✅ Python 示例："></a>✅ Python 示例：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> redis<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><br>r = redis.Redis(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">6379</span>, db=<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cache_aside</span>(<span class="hljs-params">key_prefix, ttl=<span class="hljs-number">300</span></span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator</span>(<span class="hljs-params">func</span>):<br><span class="hljs-meta">        @wraps(<span class="hljs-params">func</span>)</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            cache_key = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;key_prefix&#125;</span>:<span class="hljs-subst">&#123;args[<span class="hljs-number">0</span>]&#125;</span>&quot;</span><br>            result = r.get(cache_key)<br>            <span class="hljs-keyword">if</span> result:<br>                <span class="hljs-keyword">return</span> result.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>            result = func(*args, **kwargs)<br>            <span class="hljs-keyword">if</span> result:<br>                r.setex(cache_key, ttl, result)<br>            <span class="hljs-keyword">return</span> result<br>        <span class="hljs-keyword">return</span> wrapper<br>    <span class="hljs-keyword">return</span> decorator<br><br><span class="hljs-comment"># 模拟数据库访问</span><br><span class="hljs-meta">@cache_aside(<span class="hljs-params"><span class="hljs-string">&quot;user_info&quot;</span>, ttl=<span class="hljs-number">60</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_user_from_db</span>(<span class="hljs-params">user_id</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;访问数据库...&quot;</span>)<br>    time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;user_<span class="hljs-subst">&#123;user_id&#125;</span>_data&quot;</span><br></code></pre></td></tr></table></figure><hr><h2 id="1-2-热键（Hot-Key）实战分析"><a href="#1-2-热键（Hot-Key）实战分析" class="headerlink" title="1.2 热键（Hot Key）实战分析"></a>1.2 热键（Hot Key）实战分析</h2><h3 id="🔥-什么是热键？"><a href="#🔥-什么是热键？" class="headerlink" title="🔥 什么是热键？"></a>🔥 什么是热键？</h3><p>热键是指<strong>访问频率极高的某个 key</strong>，常见于以下场景：</p><ul><li>爆款商品详情页</li><li>明星账号信息</li><li>热点新闻推送</li><li>用户个性化首页</li></ul><hr><h3 id="🔍-热键检测方法"><a href="#🔍-热键检测方法" class="headerlink" title="🔍 热键检测方法"></a>🔍 热键检测方法</h3><h4 id="方法一：使用-MONITOR（开发环境使用）"><a href="#方法一：使用-MONITOR（开发环境使用）" class="headerlink" title="方法一：使用 MONITOR（开发环境使用）"></a>方法一：使用 MONITOR（开发环境使用）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-cli MONITOR<br></code></pre></td></tr></table></figure><p>输出将展示所有命令，例如：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span> <span class="hljs-string">&quot;product:123&quot;</span><br><span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span> <span class="hljs-string">&quot;product:123&quot;</span><br><span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span> <span class="hljs-string">&quot;product:123&quot;</span><br></code></pre></td></tr></table></figure><p>可以观察是否有单一 key 高频出现。</p><h4 id="方法二：使用-slowlog-检测慢查询"><a href="#方法二：使用-slowlog-检测慢查询" class="headerlink" title="方法二：使用 slowlog 检测慢查询"></a>方法二：使用 <code>slowlog</code> 检测慢查询</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; SLOWLOG GET<br></code></pre></td></tr></table></figure><p>配合监控记录命中频率较高的 key。</p><h4 id="方法三：接入-APM-工具（企业推荐）"><a href="#方法三：接入-APM-工具（企业推荐）" class="headerlink" title="方法三：接入 APM 工具（企业推荐）"></a>方法三：接入 APM 工具（企业推荐）</h4><ul><li>SkyWalking</li><li>Pinpoint</li><li>ELK（日志聚合）+ Kibana 分析热点 key 访问日志</li></ul><hr><h3 id="🛠️-企业解决方案"><a href="#🛠️-企业解决方案" class="headerlink" title="🛠️ 企业解决方案"></a>🛠️ 企业解决方案</h3><table><thead><tr><th>问题</th><th>解决方式</th></tr></thead><tbody><tr><td>Redis 单点过载</td><td>本地缓存 + Redis 两级结构（如 Guava + Redis）</td></tr><tr><td>热点 key TTL 同步过期</td><td>TTL 随机化，避免雪崩</td></tr><tr><td>热点数据库穿透</td><td>添加互斥锁，打散请求，加载中给默认值</td></tr><tr><td>并发缓存穿透</td><td>异步刷新缓存，使用布隆过滤器防穿透</td></tr></tbody></table><hr><h3 id="✅-Python-示例：异步缓存刷新-TTL-打散"><a href="#✅-Python-示例：异步缓存刷新-TTL-打散" class="headerlink" title="✅ Python 示例：异步缓存刷新 + TTL 打散"></a>✅ Python 示例：异步缓存刷新 + TTL 打散</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> redis<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><br>r = redis.Redis()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data_with_hotkey</span>(<span class="hljs-params">key</span>):<br>    value = r.get(key)<br>    <span class="hljs-keyword">if</span> value:<br>        <span class="hljs-keyword">return</span> value.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>    <span class="hljs-comment"># 加互斥锁防止击穿（简化）</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> r.setnx(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;key&#125;</span>:lock&quot;</span>, <span class="hljs-number">1</span>):<br>        time.sleep(<span class="hljs-number">0.1</span>)  <span class="hljs-comment"># 打散请求</span><br>        <span class="hljs-keyword">return</span> get_data_with_hotkey(key)<br><br>    <span class="hljs-comment"># 模拟数据库</span><br>    value = <span class="hljs-string">f&quot;data_from_db_<span class="hljs-subst">&#123;key&#125;</span>&quot;</span><br>    ttl = <span class="hljs-number">60</span> + random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">30</span>)  <span class="hljs-comment"># TTL 随机打散</span><br>    r.setex(key, ttl, value)<br>    r.delete(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;key&#125;</span>:lock&quot;</span>)<br>    <span class="hljs-keyword">return</span> value<br></code></pre></td></tr></table></figure><hr><h2 id="1-3-大键（Big-Key）问题分析"><a href="#1-3-大键（Big-Key）问题分析" class="headerlink" title="1.3 大键（Big Key）问题分析"></a>1.3 大键（Big Key）问题分析</h2><h3 id="🧱-什么是大键？"><a href="#🧱-什么是大键？" class="headerlink" title="🧱 什么是大键？"></a>🧱 什么是大键？</h3><p>单个 Redis key 对应的数据量非常大：</p><ul><li>超长字符串（大 HTML 页面）</li><li>数万个成员的 Set、ZSet、Hash</li><li>单 key 占用内存超过 1MB 甚至更多</li></ul><hr><h3 id="📈-排查大键的方法"><a href="#📈-排查大键的方法" class="headerlink" title="📈 排查大键的方法"></a>📈 排查大键的方法</h3><h4 id="方法一：MEMORY-USAGE-key"><a href="#方法一：MEMORY-USAGE-key" class="headerlink" title="方法一：MEMORY USAGE key"></a>方法一：<code>MEMORY USAGE key</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; MEMORY USAGE large_key<br></code></pre></td></tr></table></figure><p>返回该 key 占用的字节数。</p><h4 id="方法二：结合-RANDOMKEY、DUMP-和-RESTORE-检测"><a href="#方法二：结合-RANDOMKEY、DUMP-和-RESTORE-检测" class="headerlink" title="方法二：结合 RANDOMKEY、DUMP 和 RESTORE 检测"></a>方法二：结合 RANDOMKEY、DUMP 和 RESTORE 检测</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; RANDOMKEY<br>127.0.0.1:6379&gt; DUMP large_key<br></code></pre></td></tr></table></figure><p>对不确定的 key 进行抽样分析。</p><h4 id="方法三：使用脚本或监控工具定期巡检"><a href="#方法三：使用脚本或监控工具定期巡检" class="headerlink" title="方法三：使用脚本或监控工具定期巡检"></a>方法三：使用脚本或监控工具定期巡检</h4><hr><h3 id="💡-大键问题的影响"><a href="#💡-大键问题的影响" class="headerlink" title="💡 大键问题的影响"></a>💡 大键问题的影响</h3><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>阻塞主线程</td><td>Redis 是单线程，大键操作时间长会阻塞</td></tr><tr><td>哨兵主从切换失败</td><td>大 key 同步时间过长导致主从失效</td></tr><tr><td>集群抖动</td><td>某节点频繁操作大 key 导致响应缓慢</td></tr></tbody></table><hr><h3 id="🧩-企业级处理建议"><a href="#🧩-企业级处理建议" class="headerlink" title="🧩 企业级处理建议"></a>🧩 企业级处理建议</h3><table><thead><tr><th>场景</th><th>建议</th></tr></thead><tbody><tr><td>HTML 页面的缓存</td><td>切片或分页存储为多个 key</td></tr><tr><td>Hash 超大</td><td>使用嵌套结构存储多个小 Hash，控制字段数 &lt; 5000</td></tr><tr><td>Set&#x2F;ZSet</td><td>分片管理，支持分页读取</td></tr><tr><td>所有大 key</td><td>设置合理的 TTL 防止缓存污染</td></tr></tbody></table><hr><h3 id="✅-Python-示例：自动检测大键"><a href="#✅-Python-示例：自动检测大键" class="headerlink" title="✅ Python 示例：自动检测大键"></a>✅ Python 示例：自动检测大键</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> redis<br><br>r = redis.Redis()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan_big_keys</span>(<span class="hljs-params">threshold=<span class="hljs-number">1024</span> * <span class="hljs-number">100</span></span>):  <span class="hljs-comment"># 100KB</span><br>    cursor = <span class="hljs-number">0</span><br>    big_keys = []<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        cursor, keys = r.scan(cursor, count=<span class="hljs-number">100</span>)<br>        <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> keys:<br>            usage = r.memory_usage(key)<br>            <span class="hljs-keyword">if</span> usage <span class="hljs-keyword">and</span> usage &gt; threshold:<br>                big_keys.append((key.decode(), usage))<br>        <span class="hljs-keyword">if</span> cursor == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> big_keys<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    results = scan_big_keys()<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> results:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;大键: <span class="hljs-subst">&#123;k&#125;</span>, 大小: <span class="hljs-subst">&#123;v / <span class="hljs-number">1024</span>:<span class="hljs-number">.2</span>f&#125;</span> KB&quot;</span>)<br></code></pre></td></tr></table></figure><hr><h2 id="✅-总结：缓存优化-Checklist"><a href="#✅-总结：缓存优化-Checklist" class="headerlink" title="✅ 总结：缓存优化 Checklist"></a>✅ 总结：缓存优化 Checklist</h2><ul><li><input checked="" disabled="" type="checkbox"> 使用 Cache Aside 实现高可用缓存逻辑</li><li><input checked="" disabled="" type="checkbox"> 检测并打散热键，防止 Redis 被打爆</li><li><input checked="" disabled="" type="checkbox"> 避免大键：分页、小集合分拆、合理 TTL</li><li><input checked="" disabled="" type="checkbox"> 使用监控工具定时发现大键&#x2F;热键</li><li><input checked="" disabled="" type="checkbox"> 利用 APM + 日志系统定位缓存异常点</li></ul>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
      <category>Redis 教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis 监控与调优</title>
    <link href="/2025/07/17/redis%E7%9B%91%E6%8E%A7%E4%B8%8E%E8%B0%83%E4%BC%98/"/>
    <url>/2025/07/17/redis%E7%9B%91%E6%8E%A7%E4%B8%8E%E8%B0%83%E4%BC%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis-运维监控与调优"><a href="#Redis-运维监控与调优" class="headerlink" title="Redis 运维监控与调优"></a>Redis 运维监控与调优</h1><h2 id="1-1-Redis-配置优化"><a href="#1-1-Redis-配置优化" class="headerlink" title="1.1 Redis 配置优化"></a>1.1 Redis 配置优化</h2><h3 id="🎯-常见优化目标"><a href="#🎯-常见优化目标" class="headerlink" title="🎯 常见优化目标"></a>🎯 常见优化目标</h3><ul><li><strong>提升性能</strong></li><li><strong>降低内存占用</strong></li><li><strong>避免服务雪崩</strong></li></ul><h3 id="🧠-内存管理参数调优"><a href="#🧠-内存管理参数调优" class="headerlink" title="🧠 内存管理参数调优"></a>🧠 内存管理参数调优</h3><h4 id="maxmemory"><a href="#maxmemory" class="headerlink" title="maxmemory"></a><code>maxmemory</code></h4><p>设置 Redis 使用的最大内存。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># redis.conf 示例</span><br>maxmemory 1gb<br></code></pre></td></tr></table></figure><blockquote><p>Redis 内存使用超过该限制后，才会触发清除策略。</p></blockquote><h4 id="maxmemory-policy"><a href="#maxmemory-policy" class="headerlink" title="maxmemory-policy"></a><code>maxmemory-policy</code></h4><p>定义内存淘汰策略：</p><table><thead><tr><th>策略</th><th>说明</th></tr></thead><tbody><tr><td>noeviction</td><td>达到内存后拒绝写入</td></tr><tr><td>allkeys-lru</td><td>所有 key 中淘汰最近最少使用的</td></tr><tr><td>volatile-lru</td><td>设置了 TTL 的 key 中淘汰最近最少使用的</td></tr><tr><td>allkeys-random</td><td>随机淘汰所有 key</td></tr><tr><td>volatile-ttl</td><td>TTL 最短的 key 被淘汰</td></tr></tbody></table><h4 id="Python-示例（设置配置并连接）："><a href="#Python-示例（设置配置并连接）：" class="headerlink" title="Python 示例（设置配置并连接）："></a>Python 示例（设置配置并连接）：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> redis<br><br>r = redis.StrictRedis(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">6379</span>, db=<span class="hljs-number">0</span>)<br>r.config_set(<span class="hljs-string">&#x27;maxmemory&#x27;</span>, <span class="hljs-string">&#x27;100mb&#x27;</span>)<br>r.config_set(<span class="hljs-string">&#x27;maxmemory-policy&#x27;</span>, <span class="hljs-string">&#x27;allkeys-lru&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><h3 id="🧨-TTL-合理设置"><a href="#🧨-TTL-合理设置" class="headerlink" title="🧨 TTL 合理设置"></a>🧨 TTL 合理设置</h3><p>设置过期时间避免内存泄漏。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 设置 key 在 30 秒后过期</span><br>r.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;session:user:1&#x27;</span>, <span class="hljs-string">&#x27;data&#x27;</span>, ex=<span class="hljs-number">30</span>)<br></code></pre></td></tr></table></figure><hr><h2 id="1-2-性能监控"><a href="#1-2-性能监控" class="headerlink" title="1.2 性能监控"></a>1.2 性能监控</h2><h3 id="🔍-使用-INFO-命令全面查看状态"><a href="#🔍-使用-INFO-命令全面查看状态" class="headerlink" title="🔍 使用 INFO 命令全面查看状态"></a>🔍 使用 <code>INFO</code> 命令全面查看状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-cli INFO memory<br>redis-cli INFO clients<br></code></pre></td></tr></table></figure><h4 id="Python-示例："><a href="#Python-示例：" class="headerlink" title="Python 示例："></a>Python 示例：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">info = r.info()<br><span class="hljs-built_in">print</span>(info[<span class="hljs-string">&#x27;used_memory_human&#x27;</span>])  <span class="hljs-comment"># 当前使用内存</span><br></code></pre></td></tr></table></figure><hr><h3 id="🔍-使用-MONITOR-实时查看请求"><a href="#🔍-使用-MONITOR-实时查看请求" class="headerlink" title="🔍 使用 MONITOR 实时查看请求"></a>🔍 使用 <code>MONITOR</code> 实时查看请求</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-cli MONITOR<br></code></pre></td></tr></table></figure><p>适用于调试，但对性能有影响，不建议线上使用。</p><hr><h3 id="🐢-SLOWLOG-分析慢命令"><a href="#🐢-SLOWLOG-分析慢命令" class="headerlink" title="🐢 SLOWLOG 分析慢命令"></a>🐢 <code>SLOWLOG</code> 分析慢命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-cli SLOWLOG get<br></code></pre></td></tr></table></figure><h4 id="Python-示例：-1"><a href="#Python-示例：-1" class="headerlink" title="Python 示例："></a>Python 示例：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">slowlogs = r.slowlog_get()<br><span class="hljs-keyword">for</span> log <span class="hljs-keyword">in</span> slowlogs:<br>    <span class="hljs-built_in">print</span>(log)<br></code></pre></td></tr></table></figure><hr><h3 id="📈-接入-Prometheus-Grafana（图表可视化）"><a href="#📈-接入-Prometheus-Grafana（图表可视化）" class="headerlink" title="📈 接入 Prometheus + Grafana（图表可视化）"></a>📈 接入 Prometheus + Grafana（图表可视化）</h3><ol><li><p>安装 <a href="https://github.com/oliver006/redis_exporter"><code>redis_exporter</code></a></p></li><li><p>启动 Redis Exporter：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./redis_exporter -redis.addr=redis://localhost:6379<br></code></pre></td></tr></table></figure></li><li><p>在 Prometheus 中添加 job：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;redis&#x27;</span><br>  <span class="hljs-attr">static_configs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&#x27;localhost:9121&#x27;</span>]<br></code></pre></td></tr></table></figure></li><li><p>在 Grafana 中导入 Redis Dashboard 模板（ID：763）</p></li></ol><hr><h2 id="1-3-容灾与高可用"><a href="#1-3-容灾与高可用" class="headerlink" title="1.3 容灾与高可用"></a>1.3 容灾与高可用</h2><h3 id="💡-主从复制-哨兵模式"><a href="#💡-主从复制-哨兵模式" class="headerlink" title="💡 主从复制 + 哨兵模式"></a>💡 主从复制 + 哨兵模式</h3><h4 id="Redis-主从复制结构图："><a href="#Redis-主从复制结构图：" class="headerlink" title="Redis 主从复制结构图："></a>Redis 主从复制结构图：</h4><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">       +---------+<br>       |<span class="hljs-string"> Master  </span>|<br>       +---------+<br>        /       \<br>       /         \<br>+----------+  +----------+<br>|<span class="hljs-string"> Replica1 </span>|<span class="hljs-string">  </span>|<span class="hljs-string"> Replica2 </span>|<br>+----------+  +----------+<br></code></pre></td></tr></table></figure><h4 id="启用主从复制配置："><a href="#启用主从复制配置：" class="headerlink" title="启用主从复制配置："></a>启用主从复制配置：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># slave.conf</span><br>replicaof 127.0.0.1 6379<br></code></pre></td></tr></table></figure><h4 id="哨兵配置示例："><a href="#哨兵配置示例：" class="headerlink" title="哨兵配置示例："></a>哨兵配置示例：</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># sentinel.conf</span><br>sentinel monitor mymaster 127.0.0.1 6379 2<br>sentinel down-after-milliseconds mymaster 5000<br>sentinel failover-timeout mymaster 10000<br>sentinel parallel-syncs mymaster 1<br></code></pre></td></tr></table></figure><hr><h3 id="🧰-启动方式："><a href="#🧰-启动方式：" class="headerlink" title="🧰 启动方式："></a>🧰 启动方式：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-sentinel sentinel.conf<br></code></pre></td></tr></table></figure><hr><h3 id="❤️‍🔥-Keepalived-VIP-高可用部署（实战推荐）"><a href="#❤️‍🔥-Keepalived-VIP-高可用部署（实战推荐）" class="headerlink" title="❤️‍🔥 Keepalived + VIP 高可用部署（实战推荐）"></a>❤️‍🔥 Keepalived + VIP 高可用部署（实战推荐）</h3><ul><li>Redis Master 设置虚拟 IP (VIP)</li><li>Keepalived 监控主节点</li><li>主挂时自动切换到副本，并绑定 VIP</li></ul><hr><h2 id="附加：多活容灾架构探索"><a href="#附加：多活容灾架构探索" class="headerlink" title="附加：多活容灾架构探索"></a>附加：多活容灾架构探索</h2><blockquote><p>Redis 原生不支持多活，但企业可结合一致性哈希、Kafka + Redis 消费模型等方式，实现弱一致性下的多机热备。</p></blockquote><hr><h2 id="✅-总结"><a href="#✅-总结" class="headerlink" title="✅ 总结"></a>✅ 总结</h2><table><thead><tr><th>模块</th><th>工具与命令</th><th>实战技巧</th></tr></thead><tbody><tr><td>内存优化</td><td><code>maxmemory</code>, <code>maxmemory-policy</code></td><td>设置 LRU、合理设置 TTL</td></tr><tr><td>性能监控</td><td><code>info</code>, <code>monitor</code>, <code>slowlog</code></td><td>接入 Prometheus，搭配 Grafana</td></tr><tr><td>高可用</td><td>主从、哨兵、keepalived</td><td>故障切换、VIP 自动恢复</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
      <category>Redis 教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis 企业级应用</title>
    <link href="/2025/07/16/redis%E5%BA%94%E7%94%A8%E5%AE%9E%E6%88%98/"/>
    <url>/2025/07/16/redis%E5%BA%94%E7%94%A8%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h1 id="企业级-Redis-应用实战-🚀"><a href="#企业级-Redis-应用实战-🚀" class="headerlink" title="企业级 Redis 应用实战 🚀"></a>企业级 Redis 应用实战 🚀</h1><h2 id="1-1-延时任务队列（Delay-Queue）"><a href="#1-1-延时任务队列（Delay-Queue）" class="headerlink" title="1.1 延时任务队列（Delay Queue）"></a>1.1 延时任务队列（Delay Queue）</h2><h3 id="🧩-应用场景："><a href="#🧩-应用场景：" class="headerlink" title="🧩 应用场景："></a>🧩 应用场景：</h3><ul><li>电商：订单支付超时自动取消、逾期提醒</li><li>通知系统：发送延时消息</li><li>缓存失效处理补偿任务等</li></ul><h3 id="⚙️-原理设计："><a href="#⚙️-原理设计：" class="headerlink" title="⚙️ 原理设计："></a>⚙️ 原理设计：</h3><ul><li>利用 ZSET（有序集合），score 存储任务执行时间戳</li><li>通过 <code>ZRANGEBYSCORE(min, now)</code> 拉取到期任务</li><li>消费后 <code>ZREM</code> 删除任务</li><li>批量查询 + 限流控制 + 拆分槽位优化轮询性能</li></ul><h3 id="✅-Python-示例："><a href="#✅-Python-示例：" class="headerlink" title="✅ Python 示例："></a>✅ Python 示例：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time, redis<br><br>r = redis.Redis(decode_responses=<span class="hljs-literal">True</span>)<br>DELAY_QUEUE = <span class="hljs-string">&quot;delay:zset&quot;</span><br><br><span class="hljs-comment"># 添加延时任务</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">enqueue</span>(<span class="hljs-params">task_id, delay_seconds</span>):<br>    score = <span class="hljs-built_in">int</span>(time.time()) + delay_seconds<br>    r.zadd(DELAY_QUEUE, &#123;task_id: score&#125;)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[加入延时任务] <span class="hljs-subst">&#123;task_id&#125;</span>, 执行时间戳 <span class="hljs-subst">&#123;score&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 拉取并消费延迟任务</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_due</span>(<span class="hljs-params">max_items=<span class="hljs-number">10</span></span>):<br>    now = <span class="hljs-built_in">int</span>(time.time())<br>    tasks = r.zrangebyscore(DELAY_QUEUE, <span class="hljs-number">0</span>, now, <span class="hljs-number">0</span>, max_items)<br>    <span class="hljs-keyword">for</span> task <span class="hljs-keyword">in</span> tasks:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[处理任务] <span class="hljs-subst">&#123;task&#125;</span>&quot;</span>)<br>        r.zrem(DELAY_QUEUE, task)<br><br><span class="hljs-comment"># 企业优化建议：</span><br><span class="hljs-comment"># - 分片 ZSET 降低扫描压力</span><br><span class="hljs-comment"># - 多进程加锁竞抢任务</span><br><span class="hljs-comment"># - 时间轮结构或 Redis Streams 延时代替</span><br></code></pre></td></tr></table></figure><p>💡 Tips：避免轮询死循环，使用 LIMIT + <code>sleep</code> 或 <code>BLPOP</code> 混合执行策略 ([MoldStud][1], [Medium][2], [Medium][3])。</p><hr><h2 id="1-2-分布式锁（Distributed-Lock）"><a href="#1-2-分布式锁（Distributed-Lock）" class="headerlink" title="1.2 分布式锁（Distributed Lock）"></a>1.2 分布式锁（Distributed Lock）</h2><h3 id="🧠-为什么需要："><a href="#🧠-为什么需要：" class="headerlink" title="🧠 为什么需要："></a>🧠 为什么需要：</h3><ul><li>分布式环境中防止并发访问相同资源，如订单幂等操作、资金扣款等。</li></ul><h3 id="✅-单节点锁方案（推荐用于效率优化类场景）"><a href="#✅-单节点锁方案（推荐用于效率优化类场景）" class="headerlink" title="✅ 单节点锁方案（推荐用于效率优化类场景）"></a>✅ 单节点锁方案（推荐用于效率优化类场景）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">lock_key = <span class="hljs-string">&quot;lock:order:123&quot;</span><br>lock_val = <span class="hljs-built_in">str</span>(uuid.uuid4())<br><br><span class="hljs-comment"># 获取锁</span><br>r.<span class="hljs-built_in">set</span>(lock_key, lock_val, nx=<span class="hljs-literal">True</span>, ex=<span class="hljs-number">5</span>)<br><br><span class="hljs-comment"># 释放锁，确保只有持有者能删</span><br>unlock_script = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then</span><br><span class="hljs-string">    return redis.call(&#x27;del&#x27;, KEYS[1])</span><br><span class="hljs-string">else</span><br><span class="hljs-string">    return 0</span><br><span class="hljs-string">end</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>r.<span class="hljs-built_in">eval</span>(unlock_script, <span class="hljs-number">1</span>, lock_key, lock_val)<br></code></pre></td></tr></table></figure><h3 id="🔍-RedLock-算法（多节点一致性方案）"><a href="#🔍-RedLock-算法（多节点一致性方案）" class="headerlink" title="🔍 RedLock 算法（多节点一致性方案）"></a>🔍 RedLock 算法（多节点一致性方案）</h3><ul><li>在多个独立主节点上依次申请锁</li><li>若成功获得多数锁且总耗时小于 TTL，则认为获取成功</li><li>功能更强但复杂度高，依赖同步时间与网络一致性，适合强一致场景&#x20;</li></ul><h3 id="⚠️-注意事项与风险"><a href="#⚠️-注意事项与风险" class="headerlink" title="⚠️ 注意事项与风险"></a>⚠️ 注意事项与风险</h3><table><thead><tr><th>问题</th><th>说明</th></tr></thead><tbody><tr><td>长事务</td><td>TTL 设置需略大于业务处理时间</td></tr><tr><td>死锁</td><td>使用 Lua 解锁，避免误删其他客户端锁</td></tr><tr><td>Redlock 风险</td><td>Timing assumptions 不可靠时可能失效 ([martin.kleppmann.com][4])</td></tr></tbody></table><hr><h2 id="1-3-Redis-做消息队列（MQ）"><a href="#1-3-Redis-做消息队列（MQ）" class="headerlink" title="1.3 Redis 做消息队列（MQ）"></a>1.3 Redis 做消息队列（MQ）</h2><h3 id="📥-List-阻塞弹出（BLPOP-RPOP）"><a href="#📥-List-阻塞弹出（BLPOP-RPOP）" class="headerlink" title="📥 List + 阻塞弹出（BLPOP&#x2F;RPOP）"></a>📥 List + 阻塞弹出（BLPOP&#x2F;RPOP）</h3><ul><li>简单场景适用，单消费者或少量消费者</li><li>支持优先队列结构也可用多个 list 模拟多个优先级&#x20;</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">QUEUE = <span class="hljs-string">&quot;mq:list&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">produce</span>(<span class="hljs-params">msg</span>):<br>    r.lpush(QUEUE, msg)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">consume</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        item = r.brpop(QUEUE, timeout=<span class="hljs-number">5</span>)<br>        <span class="hljs-keyword">if</span> item:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;处理:&quot;</span>, item[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h3 id="🔄-Redis-Stream-消费组（-5-0）"><a href="#🔄-Redis-Stream-消费组（-5-0）" class="headerlink" title="🔄 Redis Stream 消费组（&gt;&#x3D;5.0）"></a>🔄 Redis Stream 消费组（&gt;&#x3D;5.0）</h3><ul><li>支持持久消息、消费确认、失败重试、多个消费者组</li><li>经济替代 Kafka 的高性能场景</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">r.xadd(<span class="hljs-string">&quot;stream&quot;</span>, &#123;<span class="hljs-string">&quot;event&quot;</span>: <span class="hljs-string">&quot;login&quot;</span>, <span class="hljs-string">&quot;user&quot;</span>: <span class="hljs-string">&quot;alice&quot;</span>&#125;)<br>r.xgroup_create(<span class="hljs-string">&quot;stream&quot;</span>, <span class="hljs-string">&quot;grp&quot;</span>, mkstream=<span class="hljs-literal">True</span>)<br>r.xreadgroup(<span class="hljs-string">&quot;grp&quot;</span>, <span class="hljs-string">&quot;consumer1&quot;</span>, &#123;<span class="hljs-string">&quot;stream&quot;</span>: <span class="hljs-string">&quot;&gt;&quot;</span>&#125;, count=<span class="hljs-number">1</span>, block=<span class="hljs-number">2000</span>)<br></code></pre></td></tr></table></figure><p>🔍 Stream 模拟 Kafka 特性 + Python 示例说明场景 。</p><hr><h2 id="1-4-实时统计系统"><a href="#1-4-实时统计系统" class="headerlink" title="1.4 实时统计系统"></a>1.4 实时统计系统</h2><h3 id="🎯-UV-PV-去重统计（HyperLogLog）"><a href="#🎯-UV-PV-去重统计（HyperLogLog）" class="headerlink" title="🎯 UV&#x2F;PV 去重统计（HyperLogLog）"></a>🎯 UV&#x2F;PV 去重统计（HyperLogLog）</h3><ul><li>UV（独立访客）去重能力强，内存仅 ~12KB</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">r.pfadd(<span class="hljs-string">&quot;uv:202507&quot;</span>, <span class="hljs-string">&quot;user123&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;UV 估计值:&quot;</span>, r.pfcount(<span class="hljs-string">&quot;uv:202507&quot;</span>))<br></code></pre></td></tr></table></figure><h3 id="🧮-在线用户布阵（BitMap）"><a href="#🧮-在线用户布阵（BitMap）" class="headerlink" title="🧮 在线用户布阵（BitMap）"></a>🧮 在线用户布阵（BitMap）</h3><ul><li>高效存储用户状态，支持快速统计</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">r.setbit(<span class="hljs-string">&quot;online&quot;</span>, user_id, <span class="hljs-number">1</span>)<br>r.bitcount(<span class="hljs-string">&quot;online&quot;</span>)<br></code></pre></td></tr></table></figure><hr><h2 id="✅-总结与建议"><a href="#✅-总结与建议" class="headerlink" title="✅ 总结与建议"></a>✅ 总结与建议</h2><ul><li>使用前推荐评估业务严苛程度选锁策略</li><li>延时队列尽量配合分布式锁避免重复处理</li><li>消息队列根据消费模型选择 List 或 Stream</li><li>统计类任务推荐 HyperLogLog 和 BitMap 存储结构</li><li>强调监控锁状态与延时队列处理效率（Prometheus + Redis Insight）</li></ul>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
      <category>Redis 教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis 进阶与持久化实战教程</title>
    <link href="/2025/07/15/redis%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <url>/2025/07/15/redis%E6%8C%81%E4%B9%85%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis-进阶与持久化机制"><a href="#Redis-进阶与持久化机制" class="headerlink" title="Redis 进阶与持久化机制"></a>Redis 进阶与持久化机制</h1><h2 id="1-1-持久化机制"><a href="#1-1-持久化机制" class="headerlink" title="1.1 持久化机制"></a>1.1 持久化机制</h2><p>Redis 提供三种持久化机制：</p><h3 id="✅-1-RDB（快照）持久化"><a href="#✅-1-RDB（快照）持久化" class="headerlink" title="✅ 1. RDB（快照）持久化"></a>✅ 1. RDB（快照）持久化</h3><p>RDB 将 Redis 在某个时间点的数据保存成二进制文件 <code>dump.rdb</code>。</p><h3 id="🧩-特点："><a href="#🧩-特点：" class="headerlink" title="🧩 特点："></a>🧩 特点：</h3><ul><li>启动恢复速度快</li><li>性能好，适合冷备份</li><li>但断电会丢失最后一次快照之后的数据</li></ul><h3 id="💡-配置（redis-conf）："><a href="#💡-配置（redis-conf）：" class="headerlink" title="💡 配置（redis.conf）："></a>💡 配置（<code>redis.conf</code>）：</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini">save 900 1     <span class="hljs-comment"># 900秒内至少1个key变化，触发快照</span><br>save 300 10    <span class="hljs-comment"># 5分钟内至少10个key变化</span><br>save 60 10000  <span class="hljs-comment"># 60秒内超过10000个key变化</span><br></code></pre></td></tr></table></figure><h3 id="📌-Python-示例（模拟写数据-强制触发-RDB）："><a href="#📌-Python-示例（模拟写数据-强制触发-RDB）：" class="headerlink" title="📌 Python 示例（模拟写数据 + 强制触发 RDB）："></a>📌 Python 示例（模拟写数据 + 强制触发 RDB）：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> redis<br><br>r = redis.Redis(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">6379</span>, decode_responses=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 写入大量数据</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>    r.<span class="hljs-built_in">set</span>(<span class="hljs-string">f&quot;user:<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>, <span class="hljs-string">f&quot;value-<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 手动触发RDB保存（需开启redis-cli）</span><br><span class="hljs-comment"># 命令行输入 SAVE</span><br></code></pre></td></tr></table></figure><hr><h3 id="✅-2-AOF（Append-Only-File）持久化"><a href="#✅-2-AOF（Append-Only-File）持久化" class="headerlink" title="✅ 2. AOF（Append Only File）持久化"></a>✅ 2. AOF（Append Only File）持久化</h3><p>记录每一个写命令，并在重启时重新执行。</p><h3 id="🧩-特点：-1"><a href="#🧩-特点：-1" class="headerlink" title="🧩 特点："></a>🧩 特点：</h3><ul><li>数据更不易丢失</li><li>文件体积大</li><li>恢复速度慢于 RDB</li></ul><h3 id="💡-配置（redis-conf）：-1"><a href="#💡-配置（redis-conf）：-1" class="headerlink" title="💡 配置（redis.conf）："></a>💡 配置（<code>redis.conf</code>）：</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini">appendonly yes<br>appendfilename &quot;appendonly.aof&quot;<br>appendfsync everysec    <span class="hljs-comment"># 推荐：每秒同步</span><br></code></pre></td></tr></table></figure><h3 id="📌-Python-示例："><a href="#📌-Python-示例：" class="headerlink" title="📌 Python 示例："></a>📌 Python 示例：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> redis<br><br>r = redis.Redis()<br>r.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;product:1001&quot;</span>, <span class="hljs-string">&quot;iPhone15&quot;</span>)<br>r.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;stock:1001&quot;</span>, <span class="hljs-number">50</span>)<br></code></pre></td></tr></table></figure><p>这些命令都会追加到 AOF 文件中。</p><hr><h3 id="✅-3-混合持久化（RDB-AOF）"><a href="#✅-3-混合持久化（RDB-AOF）" class="headerlink" title="✅ 3. 混合持久化（RDB + AOF）"></a>✅ 3. 混合持久化（RDB + AOF）</h3><p>Redis 4.0 起支持混合方式，在 AOF 文件中先写入 RDB 再写命令。</p><h3 id="📌-开启方式："><a href="#📌-开启方式：" class="headerlink" title="📌 开启方式："></a>📌 开启方式：</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini">aof-use-rdb-preamble yes<br></code></pre></td></tr></table></figure><h3 id="🎯-实战建议："><a href="#🎯-实战建议：" class="headerlink" title="🎯 实战建议："></a>🎯 实战建议：</h3><p>企业中可选 <strong>混合持久化</strong>，在容灾与性能间做平衡。</p><hr><h2 id="1-2-主从复制（Replication）"><a href="#1-2-主从复制（Replication）" class="headerlink" title="1.2 主从复制（Replication）"></a>1.2 主从复制（Replication）</h2><p>Redis 支持一主多从结构，从节点实时同步主节点数据。</p><hr><h3 id="🧩-优势："><a href="#🧩-优势：" class="headerlink" title="🧩 优势："></a>🧩 优势：</h3><ul><li>读写分离，减轻主节点压力</li><li>灾备冗余，容灾恢复快</li></ul><hr><h3 id="💡-主从配置："><a href="#💡-主从配置：" class="headerlink" title="💡 主从配置："></a>💡 主从配置：</h3><p><strong>主节点无需配置，子节点配置如下：</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini">replicaof 127.0.0.1 6379   <span class="hljs-comment"># 指定主节点IP和端口</span><br></code></pre></td></tr></table></figure><h3 id="📌-Python-示例：-1"><a href="#📌-Python-示例：-1" class="headerlink" title="📌 Python 示例："></a>📌 Python 示例：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> redis<br><br><span class="hljs-comment"># 写数据到主节点</span><br>master = redis.Redis(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">6379</span>)<br>master.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;user:1&quot;</span>, <span class="hljs-string">&quot;Alice&quot;</span>)<br><br><span class="hljs-comment"># 读数据从从节点（主从同步完成后）</span><br>slave = redis.Redis(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">6380</span>)<br><span class="hljs-built_in">print</span>(slave.get(<span class="hljs-string">&quot;user:1&quot;</span>))<br></code></pre></td></tr></table></figure><hr><h2 id="1-3-Redis-哨兵模式（Sentinel）"><a href="#1-3-Redis-哨兵模式（Sentinel）" class="headerlink" title="1.3 Redis 哨兵模式（Sentinel）"></a>1.3 Redis 哨兵模式（Sentinel）</h2><p>Redis Sentinel 用于<strong>监控主从结构</strong>、<strong>自动主从切换</strong>。</p><hr><h3 id="🧩-工作机制："><a href="#🧩-工作机制：" class="headerlink" title="🧩 工作机制："></a>🧩 工作机制：</h3><ul><li>节点故障时自动切换主节点</li><li>通知客户端新的主节点地址</li></ul><h3 id="💡-sentinel-conf-示例："><a href="#💡-sentinel-conf-示例：" class="headerlink" title="💡 sentinel.conf 示例："></a>💡 sentinel.conf 示例：</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini">sentinel monitor mymaster 127.0.0.1 6379 2<br>sentinel down-after-milliseconds mymaster 5000<br>sentinel failover-timeout mymaster 10000<br>sentinel parallel-syncs mymaster 1<br></code></pre></td></tr></table></figure><hr><h3 id="📌-启动哨兵："><a href="#📌-启动哨兵：" class="headerlink" title="📌 启动哨兵："></a>📌 启动哨兵：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-sentinel sentinel.conf<br></code></pre></td></tr></table></figure><hr><h3 id="📌-Python-示例（感知主节点）："><a href="#📌-Python-示例（感知主节点）：" class="headerlink" title="📌 Python 示例（感知主节点）："></a>📌 Python 示例（感知主节点）：</h3><p>建议使用 <code>redis.sentinel.Sentinel</code> 模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> redis.sentinel <span class="hljs-keyword">import</span> Sentinel<br><br>sentinel = Sentinel([(<span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-number">26379</span>)], socket_timeout=<span class="hljs-number">0.1</span>)<br>master = sentinel.master_for(<span class="hljs-string">&#x27;mymaster&#x27;</span>, socket_timeout=<span class="hljs-number">0.1</span>)<br><br>master.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>)<br><span class="hljs-built_in">print</span>(master.get(<span class="hljs-string">&quot;key&quot;</span>))<br></code></pre></td></tr></table></figure><hr><h2 id="1-4-Redis-集群模式（Cluster）"><a href="#1-4-Redis-集群模式（Cluster）" class="headerlink" title="1.4 Redis 集群模式（Cluster）"></a>1.4 Redis 集群模式（Cluster）</h2><p>Redis Cluster 是官方提供的<strong>分布式方案</strong>。</p><hr><h3 id="🧩-特点：-2"><a href="#🧩-特点：-2" class="headerlink" title="🧩 特点："></a>🧩 特点：</h3><ul><li>分片存储数据（哈希槽 slot）</li><li>自带容错、主从、复制机制</li><li>最少需要 6 个节点（3 主 3 从）</li></ul><hr><h3 id="💡-搭建-Redis-Cluster："><a href="#💡-搭建-Redis-Cluster：" class="headerlink" title="💡 搭建 Redis Cluster："></a>💡 搭建 Redis Cluster：</h3><ul><li>每个节点配置：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini">port 7000<br>cluster-enabled yes<br>cluster-config-file nodes.conf<br>cluster-node-timeout 5000<br>appendonly yes<br></code></pre></td></tr></table></figure><ul><li>创建集群命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-cli --cluster create \<br>127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 \<br>127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 \<br>--cluster-replicas 1<br></code></pre></td></tr></table></figure><hr><h3 id="📌-Python-使用-redis-py-cluster："><a href="#📌-Python-使用-redis-py-cluster：" class="headerlink" title="📌 Python 使用 redis-py-cluster："></a>📌 Python 使用 <code>redis-py-cluster</code>：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install redis-py-cluster<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rediscluster <span class="hljs-keyword">import</span> RedisCluster<br><br>startup_nodes = [&#123;<span class="hljs-string">&quot;host&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-string">&quot;7000&quot;</span>&#125;]<br>rc = RedisCluster(startup_nodes=startup_nodes, decode_responses=<span class="hljs-literal">True</span>)<br><br>rc.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;user:200&quot;</span>, <span class="hljs-string">&quot;Tom&quot;</span>)<br><span class="hljs-built_in">print</span>(rc.get(<span class="hljs-string">&quot;user:200&quot;</span>))<br></code></pre></td></tr></table></figure><hr><h3 id="📌-Redis-哈希槽（Hash-Slot）详解"><a href="#📌-Redis-哈希槽（Hash-Slot）详解" class="headerlink" title="📌 Redis 哈希槽（Hash Slot）详解"></a>📌 Redis 哈希槽（Hash Slot）详解</h3><h4 id="📌-什么是哈希槽？"><a href="#📌-什么是哈希槽？" class="headerlink" title="📌 什么是哈希槽？"></a>📌 什么是哈希槽？</h4><p>在 Redis 的 <strong>集群模式（Cluster）</strong> 中，为了实现数据的分布式存储，引入了一个核心概念 —— <strong>哈希槽（Hash Slot）</strong>。</p><ul><li>Redis 集群总共有 <strong>16384 个哈希槽</strong>（编号范围 0～16383）</li><li>所有的 key 通过哈希算法映射到这 16384 个槽位中</li><li>每个节点负责一定数量的哈希槽（例如：3 个节点，每个大约 5461 个槽）</li></ul><p>⚠️ <strong>注意</strong>：哈希槽不是键，而是键分布到节点的桥梁。</p><hr><h4 id="🧮-哈希槽是如何计算的？"><a href="#🧮-哈希槽是如何计算的？" class="headerlink" title="🧮 哈希槽是如何计算的？"></a>🧮 哈希槽是如何计算的？</h4><p>Redis 使用 CRC16 算法计算 key 的哈希值，并对 16384 取模：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">hash_slot = CRC16(key) % 16384<br></code></pre></td></tr></table></figure><p>🔎 示例（使用 <code>redis-cli</code>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:7000&gt; CLUSTER KEYSLOT mykey<br>15495<br></code></pre></td></tr></table></figure><p>表示：<code>mykey</code> 被映射到 <strong>哈希槽 15495</strong>。</p><hr><h4 id="🎯-为什么引入哈希槽？"><a href="#🎯-为什么引入哈希槽？" class="headerlink" title="🎯 为什么引入哈希槽？"></a>🎯 为什么引入哈希槽？</h4><p>传统的 Redis 无法分布式部署，单点数据量大容易瓶颈。</p><p>哈希槽的引入可以解决：</p><ol><li><strong>均匀分布</strong>：数据根据哈希槽均匀地分布到不同节点</li><li><strong>水平扩容</strong>：可以动态迁移槽位实现节点扩展</li><li><strong>故障转移</strong>：某个节点宕机，槽位迁移至其他节点</li></ol><hr><h4 id="🏗️-集群架构中的哈希槽分配"><a href="#🏗️-集群架构中的哈希槽分配" class="headerlink" title="🏗️ 集群架构中的哈希槽分配"></a>🏗️ 集群架构中的哈希槽分配</h4><p>一个标准 Redis 集群：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">Node</span> A:<span class="hljs-title"> 0</span> - <span class="hljs-number">5460</span><br><span class="hljs-keyword">Node</span> B:<span class="hljs-title"> 5461</span> - <span class="hljs-number">10922</span><br><span class="hljs-keyword">Node</span> C:<span class="hljs-title"> 10923</span> - <span class="hljs-number">16383</span><br></code></pre></td></tr></table></figure><p>当插入一个 key 时：</p><ul><li>Redis 通过 CRC16 计算 key 映射的 slot</li><li>将该键值对存入负责该槽的节点</li></ul><hr><h4 id="🔁-集群重分片（重新分配槽）"><a href="#🔁-集群重分片（重新分配槽）" class="headerlink" title="🔁 集群重分片（重新分配槽）"></a>🔁 集群重分片（重新分配槽）</h4><p>当新增节点 D，Redis 支持将部分槽从 A&#x2F;B&#x2F;C 迁移至 D：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-cli --cluster reshard 127.0.0.1:7000<br></code></pre></td></tr></table></figure><p>系统会提示你：</p><ul><li>迁移多少个槽（如 2000）</li><li>源节点</li><li>目标节点</li></ul><p>迁移完成后，新节点开始接收请求。</p><hr><h4 id="🧠-哈希标签（Hash-Tags）"><a href="#🧠-哈希标签（Hash-Tags）" class="headerlink" title="🧠 哈希标签（Hash Tags）"></a>🧠 哈希标签（Hash Tags）</h4><p>为了确保多个 key 在同一个槽中（保证原子性操作），Redis 提供了 <strong>Hash Tag</strong>：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">&#123;user1000&#125;.name<br>&#123;user1000&#125;.email<br></code></pre></td></tr></table></figure><p>以上两个 key 的槽是一样的，因为 Redis 只对 <strong>花括号中的内容</strong>进行 CRC16 计算。</p><p>📌 常用于：</p><ul><li>Lua 脚本操作多个 key</li><li>pipeline 或事务中 key 保证在一个节点上</li></ul><hr><h4 id="🛠️-Python-示例"><a href="#🛠️-Python-示例" class="headerlink" title="🛠️ Python 示例"></a>🛠️ Python 示例</h4><p>我们使用 <code>crcmod</code> 模拟 Redis 的 CRC16 算法计算哈希槽。</p><h5 id="✅-安装依赖"><a href="#✅-安装依赖" class="headerlink" title="✅ 安装依赖"></a>✅ 安装依赖</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install crcmod<br></code></pre></td></tr></table></figure><h5 id="✅-Python-示例代码"><a href="#✅-Python-示例代码" class="headerlink" title="✅ Python 示例代码"></a>✅ Python 示例代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> crcmod<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_redis_slot</span>(<span class="hljs-params">key: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-comment"># 获取 &#123;&#125; 中内容作为计算字段</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;&#123;&quot;</span> <span class="hljs-keyword">in</span> key <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;&#125;&quot;</span> <span class="hljs-keyword">in</span> key:<br>        key = key[key.find(<span class="hljs-string">&quot;&#123;&quot;</span>) + <span class="hljs-number">1</span>:key.find(<span class="hljs-string">&quot;&#125;&quot;</span>)]<br>    crc16 = crcmod.predefined.mkPredefinedCrcFun(<span class="hljs-string">&quot;crc-16&quot;</span>)<br>    <span class="hljs-keyword">return</span> crc16(key.encode()) % <span class="hljs-number">16384</span><br><br><span class="hljs-comment"># 示例</span><br>keys = [<span class="hljs-string">&quot;user:1001&quot;</span>, <span class="hljs-string">&quot;&#123;user1001&#125;.name&quot;</span>, <span class="hljs-string">&quot;&#123;user1001&#125;.email&quot;</span>]<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> keys:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Key: <span class="hljs-subst">&#123;k&#125;</span>, Slot: <span class="hljs-subst">&#123;get_redis_slot(k)&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="✅-输出结果示例"><a href="#✅-输出结果示例" class="headerlink" title="✅ 输出结果示例"></a>✅ 输出结果示例</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Key:</span> <span class="hljs-string">user:1001,</span> <span class="hljs-attr">Slot:</span> <span class="hljs-number">5796</span><br><span class="hljs-attr">Key:</span> &#123;<span class="hljs-string">user1001</span>&#125;<span class="hljs-string">.name,</span> <span class="hljs-attr">Slot:</span> <span class="hljs-number">5796</span><br><span class="hljs-attr">Key:</span> &#123;<span class="hljs-string">user1001</span>&#125;<span class="hljs-string">.email,</span> <span class="hljs-attr">Slot:</span> <span class="hljs-number">5796</span><br></code></pre></td></tr></table></figure><p>📌 你可以看到，<code>&#123;user1001&#125;.xxx</code> 的槽值相同，便于放在一个节点上。</p><hr><h4 id="❗-注意事项"><a href="#❗-注意事项" class="headerlink" title="❗ 注意事项"></a>❗ 注意事项</h4><table><thead><tr><th>场景</th><th>说明</th></tr></thead><tbody><tr><td>事务（MULTI&#x2F;EXEC）</td><td>所有 key 必须在一个槽内，否则执行失败</td></tr><tr><td>Lua 脚本</td><td>同样受限于槽</td></tr><tr><td>pipeline 批量操作</td><td>建议使用哈希标签确保 key 落入同一个槽</td></tr><tr><td>拓展节点</td><td>使用 <code>redis-cli --cluster reshard</code> 操作槽</td></tr></tbody></table><hr><h4 id="✅-使用建议"><a href="#✅-使用建议" class="headerlink" title="✅ 使用建议"></a>✅ 使用建议</h4><ul><li>在设计 key 时，合理使用哈希标签 <code>&#123;&#125;</code></li><li>避免在一个操作中跨槽访问多个 key</li><li>定期监控哈希槽的分布情况（可使用 RedisInsight 等工具）</li><li>做好数据迁移&#x2F;节点扩容前的预案（备份、验证）</li></ul><hr><h3 id="📦-企业实战建议："><a href="#📦-企业实战建议：" class="headerlink" title="📦 企业实战建议："></a>📦 企业实战建议：</h3><table><thead><tr><th>场景</th><th>推荐模式</th></tr></thead><tbody><tr><td>高性能缓存</td><td>RDB + AOF 混合持久化</td></tr><tr><td>弹性读写分离</td><td>主从复制</td></tr><tr><td>高可用部署</td><td>Sentinel 哨兵模式</td></tr><tr><td>海量分布式存储</td><td>Cluster 集群模式</td></tr></tbody></table><hr><h2 id="🧠-总结"><a href="#🧠-总结" class="headerlink" title="🧠 总结"></a>🧠 总结</h2><p>Redis 的进阶使用与企业级部署策略，包括：</p><ul><li>RDB、AOF 与混合持久化的取舍与配置</li><li>主从架构实现读写分离</li><li>哨兵模式保证高可用</li><li>集群模式解决海量数据水平扩展</li></ul><p>✅ 建议配合 Prometheus + Grafana 进行监控部署<br>✅ 持久化策略可根据业务数据安全级别动态调整</p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
      <category>Redis 教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis 实战教程</title>
    <link href="/2025/07/11/redis%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"/>
    <url>/2025/07/11/redis%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis-实战基础篇"><a href="#Redis-实战基础篇" class="headerlink" title="Redis 实战基础篇"></a>Redis 实战基础篇</h1><h2 id="1-1-缓存应用（Cache）"><a href="#1-1-缓存应用（Cache）" class="headerlink" title="1.1 缓存应用（Cache）"></a>1.1 缓存应用（Cache）</h2><h3 id="📌-缓存读写流程：Cache-Aside-模式（旁路缓存）"><a href="#📌-缓存读写流程：Cache-Aside-模式（旁路缓存）" class="headerlink" title="📌 缓存读写流程：Cache Aside 模式（旁路缓存）"></a>📌 缓存读写流程：Cache Aside 模式（旁路缓存）</h3><blockquote><p><strong>流程简介</strong>：</p><ul><li>读数据时，先查缓存，缓存未命中再查数据库，并写入缓存。</li><li>写数据时，先更新数据库，再删除缓存。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> redis<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span><br><br>r = redis.Redis(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">6379</span>, db=<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_from_db</span>(<span class="hljs-params">user_id: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">dict</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;模拟从数据库读取数据&quot;&quot;&quot;</span><br>    time.sleep(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 模拟延迟</span><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;user_id&quot;</span>: user_id, <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">f&quot;user_<span class="hljs-subst">&#123;user_id&#125;</span>&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">f&quot;user<span class="hljs-subst">&#123;user_id&#125;</span>@test.com&quot;</span>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_user</span>(<span class="hljs-params">user_id: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">dict</span>:<br>    key = <span class="hljs-string">f&quot;user:<span class="hljs-subst">&#123;user_id&#125;</span>&quot;</span><br>    user = r.get(key)<br>    <span class="hljs-keyword">if</span> user:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;✅ 缓存命中&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">eval</span>(user)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;❌ 缓存未命中，从数据库查询&quot;</span>)<br>        user = get_from_db(user_id)<br>        r.setex(key, <span class="hljs-number">300</span>, <span class="hljs-built_in">str</span>(user))  <span class="hljs-comment"># 缓存5分钟</span><br>        <span class="hljs-keyword">return</span> user<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update_user</span>(<span class="hljs-params">user_id: <span class="hljs-built_in">str</span>, new_data: <span class="hljs-built_in">dict</span></span>):<br>    <span class="hljs-comment"># 先更新数据库（此处略）</span><br>    <span class="hljs-comment"># 删除缓存</span><br>    r.delete(<span class="hljs-string">f&quot;user:<span class="hljs-subst">&#123;user_id&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><hr><h3 id="⚠️-缓存三大问题与应对策略"><a href="#⚠️-缓存三大问题与应对策略" class="headerlink" title="⚠️ 缓存三大问题与应对策略"></a>⚠️ 缓存三大问题与应对策略</h3><h4 id="1️⃣-缓存击穿（一个热点key突然失效）"><a href="#1️⃣-缓存击穿（一个热点key突然失效）" class="headerlink" title="1️⃣ 缓存击穿（一个热点key突然失效）"></a>1️⃣ 缓存击穿（一个热点key突然失效）</h4><ul><li>方案：加互斥锁防止高并发同时打到DB，或设置 <strong>永不过期 + 后台定时刷新</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_user_with_lock</span>(<span class="hljs-params">user_id: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">dict</span>:<br>    key = <span class="hljs-string">f&quot;user:<span class="hljs-subst">&#123;user_id&#125;</span>&quot;</span><br>    user = r.get(key)<br>    <span class="hljs-keyword">if</span> user:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">eval</span>(user)<br>    <br>    lock_key = <span class="hljs-string">f&quot;lock:<span class="hljs-subst">&#123;user_id&#125;</span>&quot;</span><br>    <span class="hljs-keyword">if</span> r.<span class="hljs-built_in">set</span>(lock_key, <span class="hljs-string">&quot;1&quot;</span>, nx=<span class="hljs-literal">True</span>, ex=<span class="hljs-number">5</span>):  <span class="hljs-comment"># 分布式锁</span><br>        user = get_from_db(user_id)<br>        r.setex(key, <span class="hljs-number">300</span>, <span class="hljs-built_in">str</span>(user))<br>        r.delete(lock_key)<br>        <span class="hljs-keyword">return</span> user<br>    <span class="hljs-keyword">else</span>:<br>        time.sleep(<span class="hljs-number">0.1</span>)<br>        <span class="hljs-keyword">return</span> get_user_with_lock(user_id)<br></code></pre></td></tr></table></figure><h4 id="2️⃣-缓存雪崩（大量key同时过期）"><a href="#2️⃣-缓存雪崩（大量key同时过期）" class="headerlink" title="2️⃣ 缓存雪崩（大量key同时过期）"></a>2️⃣ 缓存雪崩（大量key同时过期）</h4><ul><li>方案：设置过期时间随机值，错峰缓存失效</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br>r.setex(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-number">300</span> + random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">60</span>), <span class="hljs-string">&quot;value&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="3️⃣-缓存穿透（请求不存在的数据）"><a href="#3️⃣-缓存穿透（请求不存在的数据）" class="headerlink" title="3️⃣ 缓存穿透（请求不存在的数据）"></a>3️⃣ 缓存穿透（请求不存在的数据）</h4><ul><li>方案：将空值也缓存起来（短时）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_user_safe</span>(<span class="hljs-params">user_id: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">dict</span>:<br>    key = <span class="hljs-string">f&quot;user:<span class="hljs-subst">&#123;user_id&#125;</span>&quot;</span><br>    user = r.get(key)<br>    <span class="hljs-keyword">if</span> user:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">eval</span>(user)<br>    user = get_from_db(user_id)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user:<br>        r.setex(key, <span class="hljs-number">60</span>, <span class="hljs-string">&quot;None&quot;</span>)<br>        <span class="hljs-keyword">return</span> &#123;&#125;<br>    r.setex(key, <span class="hljs-number">300</span>, <span class="hljs-built_in">str</span>(user))<br>    <span class="hljs-keyword">return</span> user<br></code></pre></td></tr></table></figure><hr><h2 id="1-2-Session-管理（用户状态）"><a href="#1-2-Session-管理（用户状态）" class="headerlink" title="1.2 Session 管理（用户状态）"></a>1.2 Session 管理（用户状态）</h2><h3 id="🛠-Flask-Redis-实现-Session"><a href="#🛠-Flask-Redis-实现-Session" class="headerlink" title="🛠 Flask + Redis 实现 Session"></a>🛠 Flask + Redis 实现 Session</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, jsonify<br><span class="hljs-keyword">import</span> uuid<br><br>app = Flask(__name__)<br>session_store = redis.Redis()<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/login&quot;</span>, methods=[<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    username = request.json.get(<span class="hljs-string">&quot;username&quot;</span>)<br>    <span class="hljs-comment"># 验证略...</span><br>    session_id = <span class="hljs-built_in">str</span>(uuid.uuid4())<br>    session_store.setex(<span class="hljs-string">f&quot;session:<span class="hljs-subst">&#123;session_id&#125;</span>&quot;</span>, <span class="hljs-number">3600</span>, username)<br>    <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;session_id&quot;</span>: session_id&#125;)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/profile&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">profile</span>():<br>    session_id = request.headers.get(<span class="hljs-string">&quot;Authorization&quot;</span>)<br>    username = session_store.get(<span class="hljs-string">f&quot;session:<span class="hljs-subst">&#123;session_id&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> username:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;未登录&quot;</span>&#125;), <span class="hljs-number">401</span><br>    <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;username&quot;</span>: username.decode()&#125;)<br></code></pre></td></tr></table></figure><hr><h2 id="1-3-限流实战（防刷接口）"><a href="#1-3-限流实战（防刷接口）" class="headerlink" title="1.3 限流实战（防刷接口）"></a>1.3 限流实战（防刷接口）</h2><h3 id="🚦-用-Redis-实现固定窗口限流（INCR）"><a href="#🚦-用-Redis-实现固定窗口限流（INCR）" class="headerlink" title="🚦 用 Redis 实现固定窗口限流（INCR）"></a>🚦 用 Redis 实现固定窗口限流（INCR）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_allowed</span>(<span class="hljs-params">ip: <span class="hljs-built_in">str</span>, limit=<span class="hljs-number">10</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    key = <span class="hljs-string">f&quot;rate:<span class="hljs-subst">&#123;ip&#125;</span>:<span class="hljs-subst">&#123;<span class="hljs-built_in">int</span>(time.time() // <span class="hljs-number">60</span>)&#125;</span>&quot;</span>  <span class="hljs-comment"># 每分钟一个key</span><br>    current = r.incr(key)<br>    <span class="hljs-keyword">if</span> current == <span class="hljs-number">1</span>:<br>        r.expire(key, <span class="hljs-number">60</span>)<br>    <span class="hljs-keyword">return</span> current &lt;= limit<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/search&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>():<br>    ip = request.remote_addr<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> is_allowed(ip):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;限流中，请稍后再试&quot;</span>, <span class="hljs-number">429</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;正常访问&quot;</span><br></code></pre></td></tr></table></figure><hr><h3 id="💡-进阶限流算法（补充理论）"><a href="#💡-进阶限流算法（补充理论）" class="headerlink" title="💡 进阶限流算法（补充理论）"></a>💡 进阶限流算法（补充理论）</h3><table><thead><tr><th>策略</th><th>特点描述</th></tr></thead><tbody><tr><td>固定窗口</td><td>简单易实现，但临界值易突增</td></tr><tr><td>滑动窗口</td><td>精度高但实现复杂（Lua脚本处理）</td></tr><tr><td>漏桶（Leaky）</td><td>匀速出水，限制处理速率</td></tr><tr><td>令牌桶（Token）</td><td>控制速率并支持突发</td></tr></tbody></table><hr><h2 id="1-4-排行榜实战（ZSET）"><a href="#1-4-排行榜实战（ZSET）" class="headerlink" title="1.4 排行榜实战（ZSET）"></a>1.4 排行榜实战（ZSET）</h2><h3 id="🏆-构建一个游戏积分排行榜"><a href="#🏆-构建一个游戏积分排行榜" class="headerlink" title="🏆 构建一个游戏积分排行榜"></a>🏆 构建一个游戏积分排行榜</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">update_score</span>(<span class="hljs-params">user_id: <span class="hljs-built_in">str</span>, score: <span class="hljs-built_in">int</span></span>):<br>    r.zadd(<span class="hljs-string">&quot;leaderboard&quot;</span>, &#123;user_id: score&#125;)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_top_n</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span> = <span class="hljs-number">10</span></span>):<br>    <span class="hljs-keyword">return</span> r.zrevrange(<span class="hljs-string">&quot;leaderboard&quot;</span>, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, withscores=<span class="hljs-literal">True</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/leaderboard&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">leaderboard</span>():<br>    top = get_top_n()<br>    <span class="hljs-keyword">return</span> jsonify(top)<br></code></pre></td></tr></table></figure><hr><h3 id="🔍-多维排行榜（按时间、类别）"><a href="#🔍-多维排行榜（按时间、类别）" class="headerlink" title="🔍 多维排行榜（按时间、类别）"></a>🔍 多维排行榜（按时间、类别）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">update_score_by_day</span>(<span class="hljs-params">user_id: <span class="hljs-built_in">str</span>, score: <span class="hljs-built_in">int</span></span>):<br>    day = time.strftime(<span class="hljs-string">&quot;%Y%m%d&quot;</span>)<br>    r.zadd(<span class="hljs-string">f&quot;leaderboard:<span class="hljs-subst">&#123;day&#125;</span>&quot;</span>, &#123;user_id: score&#125;)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_daily_top</span>(<span class="hljs-params">day: <span class="hljs-built_in">str</span>, n=<span class="hljs-number">10</span></span>):<br>    <span class="hljs-keyword">return</span> r.zrevrange(<span class="hljs-string">f&quot;leaderboard:<span class="hljs-subst">&#123;day&#125;</span>&quot;</span>, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, withscores=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><hr><h2 id="✅-总结"><a href="#✅-总结" class="headerlink" title="✅ 总结"></a>✅ 总结</h2><table><thead><tr><th>模块</th><th>技术点</th><th>场景</th></tr></thead><tbody><tr><td>缓存</td><td>Cache Aside、雪崩击穿穿透处理</td><td>接口数据加速、热点数据缓存</td></tr><tr><td>Session 管理</td><td>Redis 存储登录态 + 过期自动控制</td><td>单点登录、微服务统一认证</td></tr><tr><td>限流</td><td>INCR、滑动窗口、漏桶令牌桶</td><td>防刷、风控、接口保护</td></tr><tr><td>排行榜</td><td>ZSET 构建有序集合、按时间分组</td><td>电商榜单、游戏排行、打榜投票类活动</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
      <category>Redis 教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis 核心数据结构介绍</title>
    <link href="/2025/07/10/redis%E6%A0%B8%E5%BF%83%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2025/07/10/redis%E6%A0%B8%E5%BF%83%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis-核心数据结构介绍"><a href="#Redis-核心数据结构介绍" class="headerlink" title="Redis 核心数据结构介绍"></a>Redis 核心数据结构介绍</h1><h2 id="2-1-String（字符串）"><a href="#2-1-String（字符串）" class="headerlink" title="2.1 String（字符串）"></a>2.1 String（字符串）</h2><h3 id="核心命令"><a href="#核心命令" class="headerlink" title="核心命令"></a>核心命令</h3><ul><li><code>SET key value</code>：设置 key 对应的字符串值</li><li><code>GET key</code>：获取 key 对应的值</li><li><code>INCR key</code>：将 key 中存储的数字值加一</li><li><code>EXPIRE key seconds</code>：设置 key 的过期时间</li><li><code>APPEND key value</code>：追加字符串到指定 key 的末尾</li></ul><h3 id="企业应用场景"><a href="#企业应用场景" class="headerlink" title="企业应用场景"></a>企业应用场景</h3><ul><li>用户登录状态缓存</li><li>短信验证码临时存储（过期自动删除）</li><li>PV&#x2F;UV 计数器、接口访问次数统计</li></ul><h3 id="Python-示例（短信验证码）"><a href="#Python-示例（短信验证码）" class="headerlink" title="Python 示例（短信验证码）"></a>Python 示例（短信验证码）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> redis<br><span class="hljs-keyword">import</span> random<br><br>r = redis.Redis(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">6379</span>, decode_responses=<span class="hljs-literal">True</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_sms_code</span>(<span class="hljs-params">phone</span>):<br>    code = <span class="hljs-built_in">str</span>(random.randint(<span class="hljs-number">100000</span>, <span class="hljs-number">999999</span>))<br>    key = <span class="hljs-string">f&quot;sms:<span class="hljs-subst">&#123;phone&#125;</span>&quot;</span><br>    r.<span class="hljs-built_in">set</span>(key, code)<br>    r.expire(key, <span class="hljs-number">300</span>)  <span class="hljs-comment"># 设置5分钟过期</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;验证码已发送至 <span class="hljs-subst">&#123;phone&#125;</span>：<span class="hljs-subst">&#123;code&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_sms_code</span>(<span class="hljs-params">phone, code_input</span>):<br>    key = <span class="hljs-string">f&quot;sms:<span class="hljs-subst">&#123;phone&#125;</span>&quot;</span><br>    code = r.get(key)<br>    <span class="hljs-keyword">return</span> code_input == code<br><br><span class="hljs-comment"># 示例</span><br>send_sms_code(<span class="hljs-string">&quot;13800000000&quot;</span>)<br><span class="hljs-built_in">print</span>(validate_sms_code(<span class="hljs-string">&quot;13800000000&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>))  <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><hr><h2 id="2-2-List（列表）"><a href="#2-2-List（列表）" class="headerlink" title="2.2 List（列表）"></a>2.2 List（列表）</h2><h3 id="核心命令-1"><a href="#核心命令-1" class="headerlink" title="核心命令"></a>核心命令</h3><ul><li><code>LPUSH key value</code>：从左侧推入元素</li><li><code>RPUSH key value</code>：从右侧推入元素</li><li><code>LPOP key</code>：从左侧弹出元素</li><li><code>LRANGE key start stop</code>：获取指定区间内的元素列表</li></ul><h3 id="企业应用场景-1"><a href="#企业应用场景-1" class="headerlink" title="企业应用场景"></a>企业应用场景</h3><ul><li>消息队列系统（左进右出&#x2F;右进左出）</li><li>实时评论系统</li><li>待处理任务队列</li></ul><h3 id="Python-示例（待处理任务队列）"><a href="#Python-示例（待处理任务队列）" class="headerlink" title="Python 示例（待处理任务队列）"></a>Python 示例（待处理任务队列）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">push_task</span>(<span class="hljs-params">task</span>):<br>    r.lpush(<span class="hljs-string">&quot;task_queue&quot;</span>, task)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_task</span>():<br>    task = r.rpop(<span class="hljs-string">&quot;task_queue&quot;</span>)<br>    <span class="hljs-keyword">if</span> task:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;处理任务：&quot;</span>, task)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前无任务&quot;</span>)<br><br><span class="hljs-comment"># 示例</span><br>push_task(<span class="hljs-string">&quot;任务1&quot;</span>)<br>push_task(<span class="hljs-string">&quot;任务2&quot;</span>)<br>process_task()<br>process_task()<br></code></pre></td></tr></table></figure><hr><h2 id="2-3-Hash（哈希表）"><a href="#2-3-Hash（哈希表）" class="headerlink" title="2.3 Hash（哈希表）"></a>2.3 Hash（哈希表）</h2><h3 id="核心命令-2"><a href="#核心命令-2" class="headerlink" title="核心命令"></a>核心命令</h3><ul><li><code>HSET key field value</code>：设置哈希字段</li><li><code>HGET key field</code>：获取哈希字段的值</li><li><code>HGETALL key</code>：获取整个哈希表内容</li><li><code>HDEL key field</code>：删除指定字段</li></ul><h3 id="企业应用场景-2"><a href="#企业应用场景-2" class="headerlink" title="企业应用场景"></a>企业应用场景</h3><ul><li>用户基本信息缓存</li><li>商品详情缓存</li><li>配置项快速读取</li></ul><h3 id="Python-示例（用户信息存储）"><a href="#Python-示例（用户信息存储）" class="headerlink" title="Python 示例（用户信息存储）"></a>Python 示例（用户信息存储）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">user_id = <span class="hljs-string">&quot;user:1001&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_user_info</span>(<span class="hljs-params">uid, field, value</span>):<br>    r.hset(uid, field, value)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_user_info</span>(<span class="hljs-params">uid</span>):<br>    <span class="hljs-keyword">return</span> r.hgetall(uid)<br><br><span class="hljs-comment"># 示例</span><br>set_user_info(user_id, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Alice&quot;</span>)<br>set_user_info(user_id, <span class="hljs-string">&quot;email&quot;</span>, <span class="hljs-string">&quot;alice@example.com&quot;</span>)<br><br>info = get_user_info(user_id)<br><span class="hljs-built_in">print</span>(info)<br></code></pre></td></tr></table></figure><hr><h2 id="2-4-Set（集合）"><a href="#2-4-Set（集合）" class="headerlink" title="2.4 Set（集合）"></a>2.4 Set（集合）</h2><h3 id="核心命令-3"><a href="#核心命令-3" class="headerlink" title="核心命令"></a>核心命令</h3><ul><li><code>SADD key value</code>：向集合添加元素</li><li><code>SREM key value</code>：移除集合元素</li><li><code>SISMEMBER key value</code>：判断是否是集合成员</li><li><code>SDIFF key1 key2</code>：返回 key1 独有的元素</li></ul><h3 id="企业应用场景-3"><a href="#企业应用场景-3" class="headerlink" title="企业应用场景"></a>企业应用场景</h3><ul><li>标签系统（如兴趣、分类标签）</li><li>用户黑名单系统</li><li>抽奖系统去重存储（唯一参与者）</li></ul><h3 id="Python-示例（黑名单系统）"><a href="#Python-示例（黑名单系统）" class="headerlink" title="Python 示例（黑名单系统）"></a>Python 示例（黑名单系统）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">blacklist_key = <span class="hljs-string">&quot;user:blacklist&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_to_blacklist</span>(<span class="hljs-params">user_id</span>):<br>    r.sadd(blacklist_key, user_id)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_blacklisted</span>(<span class="hljs-params">user_id</span>):<br>    <span class="hljs-keyword">return</span> r.sismember(blacklist_key, user_id)<br><br><span class="hljs-comment"># 示例</span><br>add_to_blacklist(<span class="hljs-string">&quot;user:1002&quot;</span>)<br><span class="hljs-built_in">print</span>(is_blacklisted(<span class="hljs-string">&quot;user:1002&quot;</span>))  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><hr><h2 id="2-5-Sorted-Set（有序集合）"><a href="#2-5-Sorted-Set（有序集合）" class="headerlink" title="2.5 Sorted Set（有序集合）"></a>2.5 Sorted Set（有序集合）</h2><h3 id="核心命令-4"><a href="#核心命令-4" class="headerlink" title="核心命令"></a>核心命令</h3><ul><li><code>ZADD key score value</code>：添加元素及分数</li><li><code>ZRANGE key start stop [WITHSCORES]</code>：获取元素按分数升序排列</li><li><code>ZREM key value</code>：删除指定元素</li><li><code>ZSCORE key value</code>：获取某个元素的分数</li></ul><h3 id="企业应用场景-4"><a href="#企业应用场景-4" class="headerlink" title="企业应用场景"></a>企业应用场景</h3><ul><li>实时排行榜（如积分、活跃度）</li><li>热搜榜（搜索次数排名）</li><li>新闻&#x2F;文章推荐系统（根据时间和热度排序）</li></ul><h3 id="Python-示例（积分排行榜）"><a href="#Python-示例（积分排行榜）" class="headerlink" title="Python 示例（积分排行榜）"></a>Python 示例（积分排行榜）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">leaderboard = <span class="hljs-string">&quot;game:scoreboard&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_score</span>(<span class="hljs-params">user, score</span>):<br>    r.zadd(leaderboard, &#123;user: score&#125;)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_top_users</span>(<span class="hljs-params">n=<span class="hljs-number">3</span></span>):<br>    <span class="hljs-keyword">return</span> r.zrange(leaderboard, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, withscores=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 示例</span><br>add_score(<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">80</span>)<br>add_score(<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-number">95</span>)<br>add_score(<span class="hljs-string">&quot;Charlie&quot;</span>, <span class="hljs-number">90</span>)<br><br>top_users = get_top_users()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;排行榜：&quot;</span>, top_users)<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
      <category>Redis 教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis 学习基础篇</title>
    <link href="/2025/07/09/redis%E6%95%99%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <url>/2025/07/09/redis%E6%95%99%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="📕-Redis-学习基础篇"><a href="#📕-Redis-学习基础篇" class="headerlink" title="📕 Redis 学习基础篇"></a>📕 Redis 学习基础篇</h1><h2 id="✅-1-1-Redis-简介"><a href="#✅-1-1-Redis-简介" class="headerlink" title="✅ 1.1 Redis 简介"></a>✅ 1.1 Redis 简介</h2><h3 id="🔷-Redis-是什么？"><a href="#🔷-Redis-是什么？" class="headerlink" title="🔷 Redis 是什么？"></a>🔷 Redis 是什么？</h3><blockquote><p>Redis（Remote Dictionary Server）是一个基于内存的高性能键值型数据库，支持丰富的数据结构，广泛应用于缓存、消息队列、排行榜、计数器、实时统计等高并发业务场景。</p></blockquote><ul><li><p><strong>特点：</strong></p><ul><li>内存操作：速度快（百万级 QPS）</li><li>数据结构丰富：<code>String</code>、<code>List</code>、<code>Set</code>、<code>Hash</code>、<code>ZSet</code></li><li>持久化支持：AOF、RDB</li><li>原子操作、事务机制</li><li>支持发布订阅、Lua 脚本、集群、哨兵模式</li></ul></li></ul><hr><h3 id="🏢-企业为什么用-Redis？"><a href="#🏢-企业为什么用-Redis？" class="headerlink" title="🏢 企业为什么用 Redis？"></a>🏢 企业为什么用 Redis？</h3><table><thead><tr><th>功能场景</th><th>用途描述</th></tr></thead><tbody><tr><td>缓存系统</td><td>存储热点数据，降低 DB 压力，提高响应速度</td></tr><tr><td>消息队列</td><td>利用 List 或 Stream 实现发布&#x2F;订阅、异步通信</td></tr><tr><td>分布式锁</td><td>多个节点互斥资源访问，用于任务控制、库存控制</td></tr><tr><td>排行榜系统</td><td>使用 ZSet 结构实现动态排名</td></tr><tr><td>限流系统</td><td>使用 INCR &#x2F; SETNX 结合脚本限速，防止接口被刷</td></tr><tr><td>会话共享</td><td>在分布式部署中存储用户登录态和 Token</td></tr></tbody></table><hr><h3 id="🔍-与-Memcached、MySQL-的对比"><a href="#🔍-与-Memcached、MySQL-的对比" class="headerlink" title="🔍 与 Memcached、MySQL 的对比"></a>🔍 与 Memcached、MySQL 的对比</h3><table><thead><tr><th>对比项</th><th>Redis</th><th>Memcached</th><th>MySQL</th></tr></thead><tbody><tr><td>数据结构</td><td>多种（String、Set、Hash…）</td><td>仅支持 String</td><td>表结构，关系型</td></tr><tr><td>持久化</td><td>✅（RDB &#x2F; AOF）</td><td>❌ 无法落盘</td><td>✅ 默认支持</td></tr><tr><td>分布式</td><td>✅ Redis Cluster</td><td>需客户端分片支持</td><td>✅ 主从复制</td></tr><tr><td>用作缓存</td><td>✅</td><td>✅</td><td>❌ 通常不建议</td></tr><tr><td>典型使用场景</td><td>缓存、排行榜、限流、秒杀系统</td><td>缓存静态页面、简单对象缓存</td><td>持久数据存储、复杂关系型查询</td></tr></tbody></table><hr><h3 id="✅-一、String（字符串）"><a href="#✅-一、String（字符串）" class="headerlink" title="✅ 一、String（字符串）"></a>✅ 一、String（字符串）</h3><h4 id="🧠-特点："><a href="#🧠-特点：" class="headerlink" title="🧠 特点："></a>🧠 特点：</h4><ul><li>最基本的数据结构，二进制安全（可存储图片、音频等）</li><li>最大 512MB</li><li>可用于计数器、缓存 JSON、Token</li></ul><h4 id="🎯-实战场景："><a href="#🎯-实战场景：" class="headerlink" title="🎯 实战场景："></a>🎯 实战场景：</h4><ul><li>用户 Token 缓存</li><li>页面访问计数器</li><li>简单配置信息存储</li></ul><h4 id="🔧-Python-示例："><a href="#🔧-Python-示例：" class="headerlink" title="🔧 Python 示例："></a>🔧 Python 示例：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> redis<br>r = redis.Redis(decode_responses=<span class="hljs-literal">True</span>)<br><br>r.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;token:1001&quot;</span>, <span class="hljs-string">&quot;abc123&quot;</span>, ex=<span class="hljs-number">3600</span>)<br><span class="hljs-built_in">print</span>(r.get(<span class="hljs-string">&quot;token:1001&quot;</span>))  <span class="hljs-comment"># 输出 abc123</span><br><br><span class="hljs-comment"># 自增</span><br>r.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;count&quot;</span>, <span class="hljs-number">10</span>)<br>r.incr(<span class="hljs-string">&quot;count&quot;</span>)  <span class="hljs-comment"># 输出 11</span><br></code></pre></td></tr></table></figure><hr><h3 id="✅-二、Hash（哈希）"><a href="#✅-二、Hash（哈希）" class="headerlink" title="✅ 二、Hash（哈希）"></a>✅ 二、Hash（哈希）</h3><h4 id="🧠-特点：-1"><a href="#🧠-特点：-1" class="headerlink" title="🧠 特点："></a>🧠 特点：</h4><ul><li>类似于 Python 的字典结构</li><li>适合存储对象（如用户信息）</li></ul><h4 id="🎯-实战场景：-1"><a href="#🎯-实战场景：-1" class="headerlink" title="🎯 实战场景："></a>🎯 实战场景：</h4><ul><li>用户档案：<code>user:1001 -&gt; &#123;name:张三, age:28&#125;</code></li><li>商品详情页缓存</li></ul><h4 id="🔧-Python-示例：-1"><a href="#🔧-Python-示例：-1" class="headerlink" title="🔧 Python 示例："></a>🔧 Python 示例：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">r.hset(<span class="hljs-string">&quot;user:1001&quot;</span>, mapping=&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">28</span>&#125;)<br><span class="hljs-built_in">print</span>(r.hget(<span class="hljs-string">&quot;user:1001&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>))      <span class="hljs-comment"># 张三</span><br><span class="hljs-built_in">print</span>(r.hgetall(<span class="hljs-string">&quot;user:1001&quot;</span>))           <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;张三&#x27;, &#x27;age&#x27;: &#x27;28&#x27;&#125;</span><br></code></pre></td></tr></table></figure><hr><h3 id="✅-三、List（列表）"><a href="#✅-三、List（列表）" class="headerlink" title="✅ 三、List（列表）"></a>✅ 三、List（列表）</h3><h4 id="🧠-特点：-2"><a href="#🧠-特点：-2" class="headerlink" title="🧠 特点："></a>🧠 特点：</h4><ul><li>链表结构，支持从两端插入、弹出（LPUSH&#x2F;RPUSH）</li><li>支持阻塞操作（BLPOP）</li></ul><h4 id="🎯-实战场景：-2"><a href="#🎯-实战场景：-2" class="headerlink" title="🎯 实战场景："></a>🎯 实战场景：</h4><ul><li>消息队列</li><li>最近操作记录（如登录历史）</li></ul><h4 id="🔧-Python-示例：-2"><a href="#🔧-Python-示例：-2" class="headerlink" title="🔧 Python 示例："></a>🔧 Python 示例：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">r.lpush(<span class="hljs-string">&quot;queue:task&quot;</span>, <span class="hljs-string">&quot;任务1&quot;</span>, <span class="hljs-string">&quot;任务2&quot;</span>)<br><span class="hljs-built_in">print</span>(r.rpop(<span class="hljs-string">&quot;queue:task&quot;</span>))  <span class="hljs-comment"># 任务1，先进后出</span><br></code></pre></td></tr></table></figure><p>📌 结合 Celery、FastAPI 可做异步任务队列基础。</p><hr><h3 id="✅-四、Set（集合）"><a href="#✅-四、Set（集合）" class="headerlink" title="✅ 四、Set（集合）"></a>✅ 四、Set（集合）</h3><h4 id="🧠-特点：-3"><a href="#🧠-特点：-3" class="headerlink" title="🧠 特点："></a>🧠 特点：</h4><ul><li>自动去重，无序集合</li><li>适合进行交集、并集、差集操作</li></ul><h4 id="🎯-实战场景：-3"><a href="#🎯-实战场景：-3" class="headerlink" title="🎯 实战场景："></a>🎯 实战场景：</h4><ul><li>用户关注列表、点赞列表</li><li>标签搜索功能</li><li>黑名单管理</li></ul><h4 id="🔧-Python-示例：-3"><a href="#🔧-Python-示例：-3" class="headerlink" title="🔧 Python 示例："></a>🔧 Python 示例：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">r.sadd(<span class="hljs-string">&quot;user:1001:likes&quot;</span>, <span class="hljs-string">&quot;足球&quot;</span>, <span class="hljs-string">&quot;篮球&quot;</span>, <span class="hljs-string">&quot;篮球&quot;</span>)  <span class="hljs-comment"># 自动去重</span><br><span class="hljs-built_in">print</span>(r.smembers(<span class="hljs-string">&quot;user:1001:likes&quot;</span>))             <span class="hljs-comment"># &#123;&#x27;足球&#x27;, &#x27;篮球&#x27;&#125;</span><br></code></pre></td></tr></table></figure><hr><h3 id="✅-五、Sorted-Set（有序集合-ZSet）"><a href="#✅-五、Sorted-Set（有序集合-ZSet）" class="headerlink" title="✅ 五、Sorted Set（有序集合 ZSet）"></a>✅ 五、Sorted Set（有序集合 ZSet）</h3><h4 id="🧠-特点：-4"><a href="#🧠-特点：-4" class="headerlink" title="🧠 特点："></a>🧠 特点：</h4><ul><li>带分数（score）的 Set，自动排序</li><li>查询效率高</li></ul><h4 id="🎯-实战场景：-4"><a href="#🎯-实战场景：-4" class="headerlink" title="🎯 实战场景："></a>🎯 实战场景：</h4><ul><li>排行榜（按分数&#x2F;活跃度&#x2F;时间排序）</li><li>优先队列</li></ul><h4 id="🔧-Python-示例：-4"><a href="#🔧-Python-示例：-4" class="headerlink" title="🔧 Python 示例："></a>🔧 Python 示例：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">r.zadd(<span class="hljs-string">&quot;leaderboard&quot;</span>, &#123;<span class="hljs-string">&quot;Alice&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;Bob&quot;</span>: <span class="hljs-number">80</span>&#125;)<br>r.zincrby(<span class="hljs-string">&quot;leaderboard&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&quot;Bob&quot;</span>)  <span class="hljs-comment"># Bob 加 20 分</span><br><span class="hljs-built_in">print</span>(r.zrevrange(<span class="hljs-string">&quot;leaderboard&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, withscores=<span class="hljs-literal">True</span>))  <span class="hljs-comment"># [(&#x27;Bob&#x27;, 100.0), (&#x27;Alice&#x27;, 100.0)]</span><br></code></pre></td></tr></table></figure><hr><h3 id="✅-六、Bitmap（位图）"><a href="#✅-六、Bitmap（位图）" class="headerlink" title="✅ 六、Bitmap（位图）"></a>✅ 六、Bitmap（位图）</h3><h4 id="🧠-特点：-5"><a href="#🧠-特点：-5" class="headerlink" title="🧠 特点："></a>🧠 特点：</h4><ul><li>以位为单位进行存储、操作</li><li>超轻量级数据标记方式</li></ul><h4 id="🎯-实战场景：-5"><a href="#🎯-实战场景：-5" class="headerlink" title="🎯 实战场景："></a>🎯 实战场景：</h4><ul><li>用户是否签到、是否激活、广告曝光记录</li></ul><h4 id="🔧-Python-示例：-5"><a href="#🔧-Python-示例：-5" class="headerlink" title="🔧 Python 示例："></a>🔧 Python 示例：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">r.setbit(<span class="hljs-string">&quot;user:sign:2025-07-01&quot;</span>, <span class="hljs-number">1001</span>, <span class="hljs-number">1</span>)  <span class="hljs-comment"># 用户 1001 签到</span><br><span class="hljs-built_in">print</span>(r.getbit(<span class="hljs-string">&quot;user:sign:2025-07-01&quot;</span>, <span class="hljs-number">1001</span>))  <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><hr><h3 id="✅-七、HyperLogLog"><a href="#✅-七、HyperLogLog" class="headerlink" title="✅ 七、HyperLogLog"></a>✅ 七、HyperLogLog</h3><h4 id="🧠-特点：-6"><a href="#🧠-特点：-6" class="headerlink" title="🧠 特点："></a>🧠 特点：</h4><ul><li>基于概率算法的基数估算器</li><li>内存恒定（~12KB）</li></ul><h4 id="🎯-实战场景：-6"><a href="#🎯-实战场景：-6" class="headerlink" title="🎯 实战场景："></a>🎯 实战场景：</h4><ul><li>UV 去重统计（例如日活 IP）</li></ul><h4 id="🔧-Python-示例：-6"><a href="#🔧-Python-示例：-6" class="headerlink" title="🔧 Python 示例："></a>🔧 Python 示例：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">r.pfadd(<span class="hljs-string">&quot;uv:2025-07-01&quot;</span>, <span class="hljs-string">&quot;ip1&quot;</span>, <span class="hljs-string">&quot;ip2&quot;</span>, <span class="hljs-string">&quot;ip3&quot;</span>)<br><span class="hljs-built_in">print</span>(r.pfcount(<span class="hljs-string">&quot;uv:2025-07-01&quot;</span>))  <span class="hljs-comment"># 输出 3</span><br></code></pre></td></tr></table></figure><hr><h3 id="✅-八、Stream（流）"><a href="#✅-八、Stream（流）" class="headerlink" title="✅ 八、Stream（流）"></a>✅ 八、Stream（流）</h3><h4 id="🧠-特点：-7"><a href="#🧠-特点：-7" class="headerlink" title="🧠 特点："></a>🧠 特点：</h4><ul><li>类 Kafka 的消息队列</li><li>支持消费组、阻塞读取</li></ul><h4 id="🎯-实战场景：-7"><a href="#🎯-实战场景：-7" class="headerlink" title="🎯 实战场景："></a>🎯 实战场景：</h4><ul><li>日志采集系统</li><li>消息通知（订单、用户消息）</li></ul><h4 id="🔧-Python-示例：-7"><a href="#🔧-Python-示例：-7" class="headerlink" title="🔧 Python 示例："></a>🔧 Python 示例：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">r.xadd(<span class="hljs-string">&quot;mystream&quot;</span>, &#123;<span class="hljs-string">&quot;user&quot;</span>: <span class="hljs-string">&quot;1001&quot;</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;hello&quot;</span>&#125;)<br><span class="hljs-built_in">print</span>(r.xread(&#123;<span class="hljs-string">&quot;mystream&quot;</span>: <span class="hljs-string">&quot;0-0&quot;</span>&#125;, count=<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><hr><h3 id="🏁-小结"><a href="#🏁-小结" class="headerlink" title="🏁 小结"></a>🏁 小结</h3><table><thead><tr><th>数据结构</th><th>用途推荐</th><th>是否支持过期</th><th>是否支持排序</th><th>是否适合大数据量</th></tr></thead><tbody><tr><td>String</td><td>最常见的 key-value</td><td>✅</td><td>❌</td><td>✅</td></tr><tr><td>Hash</td><td>用户配置、JSON 对象</td><td>✅</td><td>❌</td><td>✅</td></tr><tr><td>List</td><td>队列、消息流</td><td>✅</td><td>❌</td><td>❌（大键风险）</td></tr><tr><td>Set</td><td>去重、集合运算</td><td>✅</td><td>❌</td><td>✅</td></tr><tr><td>ZSet</td><td>排行榜、优先队列</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>Bitmap</td><td>用户标记</td><td>✅</td><td>❌</td><td>✅</td></tr><tr><td>HLL</td><td>UV 去重</td><td>✅</td><td>❌</td><td>✅</td></tr><tr><td>Stream</td><td>日志流、事件系统</td><td>✅</td><td>✅（基于 ID）</td><td>✅</td></tr></tbody></table><hr><h2 id="✅-1-2-Redis-安装部署"><a href="#✅-1-2-Redis-安装部署" class="headerlink" title="✅ 1.2 Redis 安装部署"></a>✅ 1.2 Redis 安装部署</h2><hr><h3 id="💻-在本地安装-Redis"><a href="#💻-在本地安装-Redis" class="headerlink" title="💻 在本地安装 Redis"></a>💻 在本地安装 Redis</h3><h4 id="🧩-Windows-用户（推荐-WSL-或使用-Redis-Windows-版本）"><a href="#🧩-Windows-用户（推荐-WSL-或使用-Redis-Windows-版本）" class="headerlink" title="🧩 Windows 用户（推荐 WSL 或使用 Redis Windows 版本）"></a>🧩 Windows 用户（推荐 WSL 或使用 Redis Windows 版本）</h4><blockquote><p>Redis 官方不维护 Windows 版本，可使用社区维护版本。</p></blockquote><ul><li>GitHub 地址：<a href="https://github.com/microsoftarchive/redis/releases">https://github.com/microsoftarchive/redis/releases</a></li><li>下载 <code>.msi</code> 安装包或压缩包</li><li>安装后启动：<code>redis-server.exe</code></li><li>使用客户端：<code>redis-cli.exe</code></li></ul><h4 id="🍎-macOS-用户"><a href="#🍎-macOS-用户" class="headerlink" title="🍎 macOS 用户"></a>🍎 macOS 用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用 Homebrew 安装</span><br>brew install redis<br><br><span class="hljs-comment"># 启动 Redis</span><br>brew services start redis<br><br><span class="hljs-comment"># 测试连接</span><br>redis-cli ping  <span class="hljs-comment"># 返回 PONG</span><br></code></pre></td></tr></table></figure><h4 id="🐧-Linux-用户（Ubuntu-示例）"><a href="#🐧-Linux-用户（Ubuntu-示例）" class="headerlink" title="🐧 Linux 用户（Ubuntu 示例）"></a>🐧 Linux 用户（Ubuntu 示例）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update<br>sudo apt install redis-server<br><br><span class="hljs-comment"># 修改配置支持外部访问（生产建议设置密码）</span><br>sudo nano /etc/redis/redis.conf<br><br><span class="hljs-comment"># 启动服务</span><br>sudo systemctl start redis<br></code></pre></td></tr></table></figure><hr><h3 id="🐳-Docker-安装-Redis（企业推荐）"><a href="#🐳-Docker-安装-Redis（企业推荐）" class="headerlink" title="🐳 Docker 安装 Redis（企业推荐）"></a>🐳 Docker 安装 Redis（企业推荐）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d --name redis \<br>  -p 6379:6379 \<br>  redis:latest<br></code></pre></td></tr></table></figure><p>📌 持久化挂载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d --name redis \<br>  -v /mydata/redis:/data \<br>  -p 6379:6379 \<br>  redis --appendonly <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><hr><h2 id="🧰-客户端工具介绍"><a href="#🧰-客户端工具介绍" class="headerlink" title="🧰 客户端工具介绍"></a>🧰 客户端工具介绍</h2><h3 id="1️⃣-redis-cli-命令行客户端"><a href="#1️⃣-redis-cli-命令行客户端" class="headerlink" title="1️⃣ redis-cli 命令行客户端"></a>1️⃣ redis-cli 命令行客户端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 连接 Redis</span><br>redis-cli -h 127.0.0.1 -p 6379<br><br><span class="hljs-comment"># 基本命令</span><br>SET name <span class="hljs-string">&quot;Alice&quot;</span><br>GET name<br></code></pre></td></tr></table></figure><h3 id="2️⃣-RedisInsight（可视化客户端）"><a href="#2️⃣-RedisInsight（可视化客户端）" class="headerlink" title="2️⃣ RedisInsight（可视化客户端）"></a>2️⃣ RedisInsight（可视化客户端）</h3><blockquote><p>官网地址：<a href="https://redis.com/redis-enterprise/redis-insight/">https://redis.com/redis-enterprise/redis-insight/</a></p></blockquote><ul><li>支持图形化浏览、键值操作、慢查询分析、集群图可视化</li><li>推荐给初学者与企业运维</li></ul><hr><h2 id="🐍-使用-Python-操作-Redis"><a href="#🐍-使用-Python-操作-Redis" class="headerlink" title="🐍 使用 Python 操作 Redis"></a>🐍 使用 Python 操作 Redis</h2><h3 id="安装-redis-第三方库"><a href="#安装-redis-第三方库" class="headerlink" title="安装 redis 第三方库"></a>安装 <code>redis</code> 第三方库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install redis<br></code></pre></td></tr></table></figure><h3 id="示例：Python-缓存用户信息"><a href="#示例：Python-缓存用户信息" class="headerlink" title="示例：Python 缓存用户信息"></a>示例：Python 缓存用户信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> redis<br><br>r = redis.Redis(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">6379</span>, decode_responses=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 设置缓存数据</span><br>r.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;user:1001:name&quot;</span>, <span class="hljs-string">&quot;Alice&quot;</span>, ex=<span class="hljs-number">60</span>)  <span class="hljs-comment"># ex=60 表示 60秒过期</span><br><br><span class="hljs-comment"># 读取缓存数据</span><br>name = r.get(<span class="hljs-string">&quot;user:1001:name&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;用户名：&quot;</span>, name)<br></code></pre></td></tr></table></figure><h3 id="示例：模拟页面访问计数器"><a href="#示例：模拟页面访问计数器" class="headerlink" title="示例：模拟页面访问计数器"></a>示例：模拟页面访问计数器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">r.incr(<span class="hljs-string">&quot;page:home:views&quot;</span>)   <span class="hljs-comment"># 每访问一次 +1</span><br>count = r.get(<span class="hljs-string">&quot;page:home:views&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;首页访问量：&quot;</span>, count)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
      <category>Redis 教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python async异步代码入门级10个案例！</title>
    <link href="/2025/07/07/async%E5%BC%82%E6%AD%A5%E4%BB%A3%E7%A0%81/"/>
    <url>/2025/07/07/async%E5%BC%82%E6%AD%A5%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-异步代码案例"><a href="#Python-异步代码案例" class="headerlink" title="Python 异步代码案例"></a>Python 异步代码案例</h1><h2 id="初级async-代码案例实现异步"><a href="#初级async-代码案例实现异步" class="headerlink" title="初级async 代码案例实现异步"></a>初级async 代码案例实现异步</h2><h3 id="认识异步代码"><a href="#认识异步代码" class="headerlink" title="认识异步代码"></a>认识异步代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_data</span>(<span class="hljs-params">delay</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Fetching data...&quot;</span>)<br>    <span class="hljs-keyword">await</span> asyncio.sleep(delay)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Data fetched&quot;</span>)<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;data&quot;</span>:<span class="hljs-string">&quot;Some data&quot;</span>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Start of main coroutine&quot;</span>)<br>    task = fetch_data(<span class="hljs-number">2</span>)<br>    result = <span class="hljs-keyword">await</span> task<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Received result: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;End of main coroutine&quot;</span>)<br><br>asyncio.run(main())<br></code></pre></td></tr></table></figure><p>代码解释：</p><p>  fetch_data 模拟一个网络下载的操作，首先异步等待了我们传入的值，然后模拟下载数据成功。</p><p>  main 函数定义了开启异步，我们将异步返回的信息存为一个task，然后通过await然后获取值，然后打印出我们下载的信息。</p><p>运行结果：</p><img src="/2025/07/07/async%E5%BC%82%E6%AD%A5%E4%BB%A3%E7%A0%81/1.png" class=""><h3 id="变换一下异步请求形态"><a href="#变换一下异步请求形态" class="headerlink" title="变换一下异步请求形态"></a>变换一下异步请求形态</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_data</span>(<span class="hljs-params">delay</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Fetching data...&quot;</span>)<br>    <span class="hljs-keyword">await</span> asyncio.sleep(delay)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Data fetched&quot;</span>)<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;data&quot;</span>:<span class="hljs-string">&quot;Some data&quot;</span>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Start of main coroutine&quot;</span>)<br>    task = fetch_data(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;End of main coroutine&quot;</span>)<br>    result = <span class="hljs-keyword">await</span> task<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Received result: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>    <br><br>asyncio.run(main())<br></code></pre></td></tr></table></figure><p>代码解释：<br>   我们更改了下面的部分代码，我们可以看到将结束的信息放置到了前面，那么我们就会得到结束数据查询然后才会得到结束的数据！</p><p>运行结果：</p><img src="/2025/07/07/async%E5%BC%82%E6%AD%A5%E4%BB%A3%E7%A0%81/2.png" class=""><h3 id="异步如果这么写效率还是低下！"><a href="#异步如果这么写效率还是低下！" class="headerlink" title="异步如果这么写效率还是低下！"></a>异步如果这么写效率还是低下！</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_data</span>(<span class="hljs-params">delay,<span class="hljs-built_in">id</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Fetching data.... id:&quot;</span>, <span class="hljs-built_in">id</span>)<br>    <span class="hljs-keyword">await</span> asyncio.sleep(delay)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Data fetched, id:&quot;</span>,<span class="hljs-built_in">id</span>)<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;data&quot;</span>:<span class="hljs-string">&quot;Some data&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-built_in">id</span>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    task1 = fetch_data(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br>    task2 = fetch_data(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br><br>    result1 = <span class="hljs-keyword">await</span> task1<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Received result: <span class="hljs-subst">&#123;result1&#125;</span>&quot;</span>)<br><br>    result2 = <span class="hljs-keyword">await</span> task2<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Received result: <span class="hljs-subst">&#123;result2&#125;</span>&quot;</span>)<br><br>asyncio.run(main())<br></code></pre></td></tr></table></figure><p>代码解释：<br>   从上面可以看出来，我们使用await task1， await task 2 这样的会导致我们只有在task1完成之后，才会去执行task2，效率就会变低！并没有得到效率上的提升。</p><p>运行结果：</p><img src="/2025/07/07/async%E5%BC%82%E6%AD%A5%E4%BB%A3%E7%A0%81/3.png" class=""><h3 id="这样写异步效率嘎嘎的"><a href="#这样写异步效率嘎嘎的" class="headerlink" title="这样写异步效率嘎嘎的"></a>这样写异步效率嘎嘎的</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_data</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>, sleep_time</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Coroutine <span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span> starting to fetch data&quot;</span>)<br>    <span class="hljs-keyword">await</span> asyncio.sleep(sleep_time)<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-built_in">id</span>, <span class="hljs-string">&quot;data&quot;</span>:<span class="hljs-string">f&quot;Same data from coroutine <span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span>&quot;</span>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    task1 = asyncio.create_task(fetch_data(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))<br>    task2 = asyncio.create_task(fetch_data(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>))<br>    task3 = asyncio.create_task(fetch_data(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>))<br><br>    result1 = <span class="hljs-keyword">await</span> task1<br>    result2 = <span class="hljs-keyword">await</span> task2<br>    result3 = <span class="hljs-keyword">await</span> task3<br><br>    <span class="hljs-built_in">print</span>(result1, result2,result3)<br><br>asyncio.run(main())<br></code></pre></td></tr></table></figure><p>代码解释：<br>   此处我们引入了<code>task</code>这个概念，也就是将我们的任务加入到task中这样就会做到异步执行多个代码，提高我们的运行效率！只需要3秒即可完成所有的程序</p><p>运行结果：</p><img src="/2025/07/07/async%E5%BC%82%E6%AD%A5%E4%BB%A3%E7%A0%81/4.png" class=""><h3 id="我想更加优雅的执行task"><a href="#我想更加优雅的执行task" class="headerlink" title="我想更加优雅的执行task"></a>我想更加优雅的执行task</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_data</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>, sleep_time</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Coroutine <span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span> starting to fetch data.&quot;</span>)<br>    <span class="hljs-keyword">await</span> asyncio.sleep(sleep_time)<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-built_in">id</span>,<span class="hljs-string">&quot;data&quot;</span>:<span class="hljs-string">f&quot;Sameple data from coroutine <span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span>&quot;</span>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    results = <span class="hljs-keyword">await</span> asyncio.gather(fetch_data(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),fetch_data(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>),fetch_data(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>))<br>    <span class="hljs-keyword">for</span> result <span class="hljs-keyword">in</span> results:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Received result: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>    <br><br>asyncio.run(main())<br></code></pre></td></tr></table></figure><p>代码解释：<br>   <code>gather</code> 将所有的返回值作为一个对象存储起来，而不需要每个去创建一个<code>task</code>来实现,但是gather并不会处理在程序中出现的错误，<br>   如果其中一个失败了，其他的会继续执行。</p><p>运行结果：</p><img src="/2025/07/07/async%E5%BC%82%E6%AD%A5%E4%BB%A3%E7%A0%81/5.png" class=""><h3 id="出错后怎么自动停止呢？"><a href="#出错后怎么自动停止呢？" class="headerlink" title="出错后怎么自动停止呢？"></a>出错后怎么自动停止呢？</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_data</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>, sleep_time</span>):<br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Coroutine <span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span> starting to fetch data.&quot;</span>)<br>     <span class="hljs-keyword">await</span> asyncio.sleep(sleep_time)<br>     <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-built_in">id</span>,<span class="hljs-string">&quot;data&quot;</span>:<span class="hljs-string">f&quot;Sameple data from coroutine <span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span>&quot;</span>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    tasks =[]<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> asyncio.TaskGroup() <span class="hljs-keyword">as</span> tg:<br>        <span class="hljs-keyword">for</span> i, sleep_time <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>([<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>], start=<span class="hljs-number">1</span>):<br>            task = tg.create_task(fetch_data(i,sleep_time))<br>            tasks.append(task)<br>    <br>    results = [task.result() <span class="hljs-keyword">for</span> task <span class="hljs-keyword">in</span> tasks]<br><br>    <span class="hljs-keyword">for</span> result <span class="hljs-keyword">in</span> results:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Received result: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br><br>asyncio.run(main())<br></code></pre></td></tr></table></figure><p>代码解释：<br>   这里我们新增的叫做事务组，他提供了更加好的对于错误的处理，如果其中一个出错了，那么其他的所有任务也都会停止运行！这里也是用到了上下文管理器来处理！</p><p>运行结果：</p><img src="/2025/07/07/async%E5%BC%82%E6%AD%A5%E4%BB%A3%E7%A0%81/6.png" class=""><h3 id="异步底层的逻辑"><a href="#异步底层的逻辑" class="headerlink" title="异步底层的逻辑"></a>异步底层的逻辑</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_future_result</span>(<span class="hljs-params">future, value</span>):<br>    <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">2</span>)<br>    future.set_result(value) <span class="hljs-comment"># 设置结果</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Set the future&#x27;s result to: <span class="hljs-subst">&#123;value&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    loop = asyncio.get_running_loop() <span class="hljs-comment"># 获取事件循环</span><br>    future = loop.create_future() <span class="hljs-comment"># 创建future</span><br><br>    asyncio.create_task(set_future_result(future,<span class="hljs-string">&quot;Future result is reday&quot;</span>)) <span class="hljs-comment"># 然后创建我们的任务实现未来的结果</span><br><br>    result = <span class="hljs-keyword">await</span> future<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Received the future&#x27;s result is <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>) <span class="hljs-comment"># 等待完成后打印结果</span><br><br>asyncio.run(main())<br></code></pre></td></tr></table></figure><p>代码解释：<br>   上面的代码实际我们不需要掌握，因为在目前都已经被封装好了，属于略微底层实现的代码，我们这里的<code>future</code>实际上是未来的结果，但是你并不知道会在什么时候发生，我们在上面的代码里面就是创建了<code>future</code>，并且等待这个未来的结果</p><p>运行结果：</p><img src="/2025/07/07/async%E5%BC%82%E6%AD%A5%E4%BB%A3%E7%A0%81/7.png" class=""><h3 id="异步锁的实现"><a href="#异步锁的实现" class="headerlink" title="异步锁的实现"></a>异步锁的实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br>shared_resource=<span class="hljs-number">0</span><br><br>lock=asyncio.Lock()<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">modify_shared_resource</span>():<br>    <span class="hljs-keyword">global</span> shared_resource<br><br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> lock:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Resource before modification: <span class="hljs-subst">&#123;shared_resource&#125;</span>&quot;</span>)<br>        shared_resource += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Resource after modification: <span class="hljs-subst">&#123;shared_resource&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">await</span> asyncio.gather(*(modify_shared_resource() <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)))<br><br>asyncio.run(main())<br></code></pre></td></tr></table></figure><p>代码解释：<br>   我们这里引入锁的概念，加上锁可以防止异步访问导致出现的数据问题，例如存储数据库，表格等，异步情况下会出现同时修改数据的情况，所以我们需要加上锁，再同一时间只能有一个进行数据的读写操作！上下文操作使得我们不必关心释放锁的情况。</p><p>运行结果：</p><img src="/2025/07/07/async%E5%BC%82%E6%AD%A5%E4%BB%A3%E7%A0%81/8.png" class=""><h3 id="异步信号量的概念"><a href="#异步信号量的概念" class="headerlink" title="异步信号量的概念"></a>异步信号量的概念</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">access_resource</span>(<span class="hljs-params">semaphore, resource_id</span>):<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> semaphore:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Accessing resource <span class="hljs-subst">&#123;resource_id&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Releasing resource <span class="hljs-subst">&#123;resource_id&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    semaphore = asyncio.Semaphore(<span class="hljs-number">2</span>) <span class="hljs-comment"># 创建2个信号量</span><br>    <span class="hljs-keyword">await</span> asyncio.gather(*(access_resource(semaphore,i)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)))<br><br>asyncio.run(main())<br><br></code></pre></td></tr></table></figure><p>代码解释：<br>  这里我们引入了信号量的概念，它和锁的概念类似，但是它是运行同一时刻候多少个程序可以访问一个对象，我们可以定义我们要使用的数量，可以进行限制，防止资源访问过载，也就是最大一次可以访问多少个。</p><p>运行结果：</p><img src="/2025/07/07/async%E5%BC%82%E6%AD%A5%E4%BB%A3%E7%A0%81/9.png" class=""><h3 id="异步event实现模拟同步"><a href="#异步event实现模拟同步" class="headerlink" title="异步event实现模拟同步"></a>异步event实现模拟同步</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">waiter</span>(<span class="hljs-params">event</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;waiting for the event to be set&quot;</span>)<br>    <span class="hljs-keyword">await</span> event.wait() <span class="hljs-comment"># 等待事件</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;event has been set, continuing execution&quot;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">setter</span>(<span class="hljs-params">event</span>):<br>    <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">2</span>)<br>    event.<span class="hljs-built_in">set</span>() <span class="hljs-comment"># 设置事件</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;event has been set!&quot;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    event = asyncio.Event()<br>    <span class="hljs-keyword">await</span> asyncio.gather(waiter(event), setter(event))<br><br>asyncio.run(main())<br></code></pre></td></tr></table></figure><p>代码解释<br>  这里我们引入了事件<code>Event</code>， 它可以是我们模拟同步的情况，在异步中可能需要暂时的同步的时候可以使用，一旦我们设置了事件，那么我们必须等待事件完成后，才可以继续执行下一步！</p><p>运行结果：</p><img src="/2025/07/07/async%E5%BC%82%E6%AD%A5%E4%BB%A3%E7%A0%81/10.png" class=""><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  当我们以正确的方式打开异步请求我们的效率就会提升很多！</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python async异步代码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python常见函数之rsplit函数用法</title>
    <link href="/2025/06/23/rsplit%E4%BB%8B%E7%BB%8D/"/>
    <url>/2025/06/23/rsplit%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="📘-Python常见函数之rsplit函数用法"><a href="#📘-Python常见函数之rsplit函数用法" class="headerlink" title="📘 Python常见函数之rsplit函数用法"></a>📘 Python常见函数之rsplit函数用法</h1><hr><h2 id="✨-一、rsplit-基础语法"><a href="#✨-一、rsplit-基础语法" class="headerlink" title="✨ 一、rsplit() 基础语法"></a>✨ 一、<code>rsplit()</code> 基础语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>.rsplit(sep=<span class="hljs-literal">None</span>, maxsplit=-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>sep</code></td><td>可选。指定分隔符（默认是任意空白字符）。</td></tr><tr><td><code>maxsplit</code></td><td>可选。最多分割几次，从<strong>右边开始</strong>分割。默认 <code>-1</code> 表示全部分割。</td></tr></tbody></table><hr><h2 id="✅-二、与-split-的区别"><a href="#✅-二、与-split-的区别" class="headerlink" title="✅ 二、与 split() 的区别"></a>✅ 二、与 <code>split()</code> 的区别</h2><table><thead><tr><th>方法</th><th>分割方向</th><th>举例说明</th></tr></thead><tbody><tr><td><code>split()</code></td><td>从左向右</td><td><code>&#39;a-b-c&#39;.split(&#39;-&#39;, 1)</code> → <code>[&#39;a&#39;, &#39;b-c&#39;]</code></td></tr><tr><td><code>rsplit()</code></td><td>从右向左</td><td><code>&#39;a-b-c&#39;.rsplit(&#39;-&#39;, 1)</code> → <code>[&#39;a-b&#39;, &#39;c&#39;]</code></td></tr></tbody></table><hr><h2 id="📌-三、基础示例"><a href="#📌-三、基础示例" class="headerlink" title="📌 三、基础示例"></a>📌 三、基础示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;2024-05-01&quot;</span><br>parts = s.rsplit(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(parts)  <span class="hljs-comment"># [&#x27;2024-05&#x27;, &#x27;01&#x27;]</span><br></code></pre></td></tr></table></figure><p>对日期字符串 <code>YYYY-MM-DD</code> 进行拆分，只取出最后的“日”。</p><hr><h2 id="🚀-四、企业实战示例"><a href="#🚀-四、企业实战示例" class="headerlink" title="🚀 四、企业实战示例"></a>🚀 四、企业实战示例</h2><h3 id="📁-场景一：日志路径解析"><a href="#📁-场景一：日志路径解析" class="headerlink" title="📁 场景一：日志路径解析"></a>📁 场景一：日志路径解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">log_path = <span class="hljs-string">&quot;/var/log/app/2024-06-23-error.log&quot;</span><br>filename = log_path.rsplit(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-number">1</span>)[-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(filename)  <span class="hljs-comment"># 输出: &#x27;2024-06-23-error.log&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>用法说明</strong>：提取日志文件名，适用于自动扫描、归档日志系统。</p><hr><h3 id="📧-场景二：邮箱账号拆分"><a href="#📧-场景二：邮箱账号拆分" class="headerlink" title="📧 场景二：邮箱账号拆分"></a>📧 场景二：邮箱账号拆分</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">email = <span class="hljs-string">&quot;admin@mail.example.com&quot;</span><br>domain = email.rsplit(<span class="hljs-string">&quot;@&quot;</span>, <span class="hljs-number">1</span>)[-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(domain)  <span class="hljs-comment"># 输出: &#x27;mail.example.com&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>企业用途</strong>：用于邮件域名白名单、账号验证、邮件分发系统等。</p><hr><h3 id="🛠️-场景三：用户操作记录解析"><a href="#🛠️-场景三：用户操作记录解析" class="headerlink" title="🛠️ 场景三：用户操作记录解析"></a>🛠️ 场景三：用户操作记录解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">record = <span class="hljs-string">&quot;操作人ID-时间戳-操作描述&quot;</span><br><span class="hljs-comment"># 仅分割最后两个字段</span><br>user_id, timestamp, description = record.rsplit(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p><strong>用途</strong>：在操作记录、审计日志中，能准确提取不同层级的数据，避免前缀变化影响解析。</p><hr><h3 id="🌐-场景四：URL-反向解析"><a href="#🌐-场景四：URL-反向解析" class="headerlink" title="🌐 场景四：URL 反向解析"></a>🌐 场景四：URL 反向解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">url = <span class="hljs-string">&quot;https://example.com/api/v1/resource/12345&quot;</span><br>resource_id = url.rsplit(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-number">1</span>)[-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(resource_id)  <span class="hljs-comment"># 输出: &#x27;12345&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>用途</strong>：在爬虫、日志追踪、API 调试时快速提取资源 ID。</p><hr><h2 id="🔍-五、注意事项"><a href="#🔍-五、注意事项" class="headerlink" title="🔍 五、注意事项"></a>🔍 五、注意事项</h2><ol><li>如果 <code>sep</code> 不存在于字符串中，返回整个字符串为列表元素。</li><li><code>rsplit()</code> 对于<strong>不确定前缀、但格式稳定的后缀结构</strong>，非常有用。</li><li><code>rsplit()</code> 比正则更高效、语义清晰，优先使用。</li></ol><hr><h2 id="🧠-六、总结记忆"><a href="#🧠-六、总结记忆" class="headerlink" title="🧠 六、总结记忆"></a>🧠 六、总结记忆</h2><table><thead><tr><th>功能</th><th>推荐方法</th></tr></thead><tbody><tr><td>从左向右按分隔符拆</td><td><code>split()</code></td></tr><tr><td>从右向左按分隔符拆</td><td>✅ <code>rsplit()</code></td></tr><tr><td>对于文件路径、URL、操作日志等“右侧结构固定”的业务，首选 <code>rsplit()</code></td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python rsplit函数用法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>互联网广告常见算法介绍</title>
    <link href="/2025/05/15/%E5%B9%BF%E5%91%8A%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/"/>
    <url>/2025/05/15/%E5%B9%BF%E5%91%8A%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="互联网广告常见算法介绍"><a href="#互联网广告常见算法介绍" class="headerlink" title="互联网广告常见算法介绍"></a>互联网广告常见算法介绍</h1><h2 id="一、广告系统算法整体结构"><a href="#一、广告系统算法整体结构" class="headerlink" title="一、广告系统算法整体结构"></a>一、广告系统算法整体结构</h2><p>广告算法通常分为以下几个阶段：</p><ol><li>​<strong>召回（Recall）</strong>​：从海量广告中快速筛选出与用户最相关的一小部分候选广告；</li><li>​<strong>粗排（粗略排序）</strong>​：对召回结果进行初步排序，降低排序规模；</li><li>​<strong>精排（精细排序）</strong>​：使用复杂模型对候选广告精准打分；</li><li>​<strong>重排（Re-ranking）</strong>​：引入多样性、新颖性、用户兴趣等特征，最终确定展示顺序；</li><li>​<strong>点击率预估（CTR）、转化率预估（CVR）</strong>​：排序核心模型。</li></ol><hr><h2 id="🔍-一、召回阶段（Recall）"><a href="#🔍-一、召回阶段（Recall）" class="headerlink" title="🔍 一、召回阶段（Recall）"></a>🔍 一、召回阶段（Recall）</h2><h3 id="🎯-目标："><a href="#🎯-目标：" class="headerlink" title="🎯 目标："></a>🎯 目标：</h3><p>从海量广告中快速筛选出与用户最可能感兴趣的一小部分候选广告，减少后续排序的计算量。</p><h3 id="🧠-常见算法："><a href="#🧠-常见算法：" class="headerlink" title="🧠 常见算法："></a>🧠 常见算法：</h3><h4 id="1-基于内容的召回（Content-Based-Recall）"><a href="#1-基于内容的召回（Content-Based-Recall）" class="headerlink" title="1. 基于内容的召回（Content-Based Recall）"></a>1. 基于内容的召回（Content-Based Recall）</h4><p>​<strong>原理</strong>​：根据广告与用户特征的相似性进行召回，例如关键词、类别、向量表示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.metrics.pairwise <span class="hljs-keyword">import</span> cosine_similarity<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 假设用户和广告向量为 300 维</span><br>user_vector = np.random.rand(<span class="hljs-number">1</span>, <span class="hljs-number">300</span>)<br>ad_vectors = np.random.rand(<span class="hljs-number">1000</span>, <span class="hljs-number">300</span>)  <span class="hljs-comment"># 假设 1000 个广告</span><br><br><span class="hljs-comment"># 计算用户与所有广告的相似度</span><br>similarities = cosine_similarity(user_vector, ad_vectors)[<span class="hljs-number">0</span>]<br><br><span class="hljs-comment"># 取前 50 个最相似的广告索引</span><br>top_k_indices = similarities.argsort()[-<span class="hljs-number">50</span>:][::-<span class="hljs-number">1</span>]<br><br><span class="hljs-comment"># 输出召回结果</span><br>recall_ads = [<span class="hljs-string">f&quot;ad_<span class="hljs-subst">&#123;i&#125;</span>&quot;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> top_k_indices]<br></code></pre></td></tr></table></figure><hr><h4 id="2-协同过滤（Collaborative-Filtering）"><a href="#2-协同过滤（Collaborative-Filtering）" class="headerlink" title="2. 协同过滤（Collaborative Filtering）"></a>2. 协同过滤（Collaborative Filtering）</h4><p>​<strong>原理</strong>​：基于历史点击行为，挖掘用户-广告之间的偏好关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> surprise <span class="hljs-keyword">import</span> Dataset, SVD<br><span class="hljs-keyword">from</span> surprise.model_selection <span class="hljs-keyword">import</span> train_test_split<br><br><span class="hljs-comment"># 假设已有 (user, ad, interaction) 的行为数据</span><br>data = Dataset.load_builtin(<span class="hljs-string">&#x27;ml-100k&#x27;</span>)  <span class="hljs-comment"># 实际应用中为广告数据</span><br>trainset, testset = train_test_split(data, test_size=<span class="hljs-number">0.2</span>)<br><br>model = SVD()<br>model.fit(trainset)<br><br><span class="hljs-comment"># 推荐广告给某用户</span><br>uid = <span class="hljs-built_in">str</span>(<span class="hljs-number">196</span>)  <span class="hljs-comment"># 示例用户</span><br>ad_candidates = [<span class="hljs-string">&#x27;101&#x27;</span>, <span class="hljs-string">&#x27;102&#x27;</span>, <span class="hljs-string">&#x27;103&#x27;</span>]  <span class="hljs-comment"># 示例广告 ID</span><br>results = [(iid, model.predict(uid, iid).est) <span class="hljs-keyword">for</span> iid <span class="hljs-keyword">in</span> ad_candidates]<br><br><span class="hljs-comment"># 按评分排序</span><br>sorted_results = <span class="hljs-built_in">sorted</span>(results, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>], reverse=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><hr><h2 id="🧮-二、粗排（初步排序）"><a href="#🧮-二、粗排（初步排序）" class="headerlink" title="🧮 二、粗排（初步排序）"></a>🧮 二、粗排（初步排序）</h2><h3 id="🎯-目标：-1"><a href="#🎯-目标：-1" class="headerlink" title="🎯 目标："></a>🎯 目标：</h3><p>对召回结果进行第一轮排序，通常模型较轻量，快速打分。</p><h3 id="🧠-常见算法：-1"><a href="#🧠-常见算法：-1" class="headerlink" title="🧠 常见算法："></a>🧠 常见算法：</h3><h4 id="1-Logistic-Regression（CTR-粗排）"><a href="#1-Logistic-Regression（CTR-粗排）" class="headerlink" title="1. Logistic Regression（CTR 粗排）"></a>1. Logistic Regression（CTR 粗排）</h4><p>​<strong>原理</strong>​：训练一个二分类模型判断点击概率（CTR）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegression<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><br><span class="hljs-comment"># 示例特征：年龄、性别、广告类别等</span><br>data = pd.read_csv(<span class="hljs-string">&#x27;ad_click_data.csv&#x27;</span>)<br>X = data[[<span class="hljs-string">&#x27;user_age&#x27;</span>, <span class="hljs-string">&#x27;ad_category&#x27;</span>, <span class="hljs-string">&#x27;is_male&#x27;</span>]]<br>y = data[<span class="hljs-string">&#x27;clicked&#x27;</span>]<br><br><span class="hljs-comment"># 拟合模型</span><br>X_train, X_test, y_train, y_test = train_test_split(X, y)<br>model = LogisticRegression()<br>model.fit(X_train, y_train)<br><br><span class="hljs-comment"># 预测候选广告点击概率</span><br>y_pred_prob = model.predict_proba(X_test)[:, <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><hr><h2 id="🧠-三、精排-重排（Fine-Ranking）"><a href="#🧠-三、精排-重排（Fine-Ranking）" class="headerlink" title="🧠 三、精排&#x2F;重排（Fine Ranking）"></a>🧠 三、精排&#x2F;重排（Fine Ranking）</h2><h3 id="🎯-目标：-2"><a href="#🎯-目标：-2" class="headerlink" title="🎯 目标："></a>🎯 目标：</h3><p>使用更复杂模型对候选广告打分排序，实现精准投放。</p><h3 id="🧠-常见算法：-2"><a href="#🧠-常见算法：-2" class="headerlink" title="🧠 常见算法："></a>🧠 常见算法：</h3><h4 id="1-XGBoost-排序模型"><a href="#1-XGBoost-排序模型" class="headerlink" title="1. XGBoost 排序模型"></a>1. XGBoost 排序模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> xgboost <span class="hljs-keyword">as</span> xgb<br><br><span class="hljs-comment"># 假设有用户广告交互特征以及标签</span><br>X = data[[<span class="hljs-string">&#x27;user_age&#x27;</span>, <span class="hljs-string">&#x27;ad_category&#x27;</span>, <span class="hljs-string">&#x27;ad_price&#x27;</span>]]<br>y = data[<span class="hljs-string">&#x27;clicked&#x27;</span>]<br><br>dtrain = xgb.DMatrix(X, label=y)<br>params = &#123;<br>    <span class="hljs-string">&#x27;objective&#x27;</span>: <span class="hljs-string">&#x27;binary:logistic&#x27;</span>,<br>    <span class="hljs-string">&#x27;eval_metric&#x27;</span>: <span class="hljs-string">&#x27;logloss&#x27;</span>,<br>    <span class="hljs-string">&#x27;max_depth&#x27;</span>: <span class="hljs-number">6</span>,<br>    <span class="hljs-string">&#x27;eta&#x27;</span>: <span class="hljs-number">0.1</span><br>&#125;<br><br>bst = xgb.train(params, dtrain, num_boost_round=<span class="hljs-number">100</span>)<br><br><span class="hljs-comment"># 预测打分</span><br>scores = bst.predict(dtrain)<br></code></pre></td></tr></table></figure><hr><h4 id="2-DeepFM-DIN（适合大规模工业推荐系统）"><a href="#2-DeepFM-DIN（适合大规模工业推荐系统）" class="headerlink" title="2. DeepFM &#x2F; DIN（适合大规模工业推荐系统）"></a>2. DeepFM &#x2F; DIN（适合大规模工业推荐系统）</h4><p>​<strong>说明</strong>​：融合了特征组合和深度神经网络，能捕捉复杂的非线性交互关系。</p><p>使用 TensorFlow 或 PyTorch 实现，涉及特征嵌入（Embedding）、多塔结构等。</p><p>简要伪代码结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># DeepFM 结构简图：</span><br><span class="hljs-comment"># 1. Sparse embedding 层</span><br><span class="hljs-comment"># 2. FM 组件处理特征组合</span><br><span class="hljs-comment"># 3. DNN 层处理高阶特征交叉</span><br><span class="hljs-comment"># 4. 输出层为 CTR/Score</span><br><br><span class="hljs-comment"># 推荐使用现成框架如 DeepCTR（https://github.com/shenweichen/DeepCTR）</span><br></code></pre></td></tr></table></figure><hr><h2 id="🧾-四、重排策略（Rerank）"><a href="#🧾-四、重排策略（Rerank）" class="headerlink" title="🧾 四、重排策略（Rerank）"></a>🧾 四、重排策略（Rerank）</h2><h3 id="🎯-目标：-3"><a href="#🎯-目标：-3" class="headerlink" title="🎯 目标："></a>🎯 目标：</h3><p>考虑业务目标（点击率、转化率、GMV、曝光公平性等）进行精细调控。</p><h4 id="示例：点击转化混合目标-多目标重排"><a href="#示例：点击转化混合目标-多目标重排" class="headerlink" title="示例：点击转化混合目标 + 多目标重排"></a>示例：点击转化混合目标 + 多目标重排</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 简化版策略分数</span><br>final_score = <span class="hljs-number">0.7</span> * predicted_ctr + <span class="hljs-number">0.3</span> * predicted_cvr<br></code></pre></td></tr></table></figure><p>也可引入 multi-objective ranking，比如：</p><ul><li>使用强化学习学习排序策略（RL Ranking）</li><li>使用 A&#x2F;B 实验调节权重比例</li></ul><hr><h2 id="五、CTR预估（点击率预测）"><a href="#五、CTR预估（点击率预测）" class="headerlink" title="五、CTR预估（点击率预测）"></a>五、CTR预估（点击率预测）</h2><p>CTR 是排序核心，深度学习（如 DNN、Wide&amp;Deep、DeepFM）在工业界广泛使用。</p><h3 id="DNN-CTR-模型结构简介（伪代码）"><a href="#DNN-CTR-模型结构简介（伪代码）" class="headerlink" title="DNN CTR 模型结构简介（伪代码）"></a>DNN CTR 模型结构简介（伪代码）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleCTRModel</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(SimpleCTRModel, self).__init__()<br>        self.model = nn.Sequential(<br>            nn.Linear(<span class="hljs-number">10</span>, <span class="hljs-number">64</span>),<br>            nn.ReLU(),<br>            nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">1</span>),<br>            nn.Sigmoid()<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-keyword">return</span> self.model(x)<br></code></pre></td></tr></table></figure><h2 id="✅-总结"><a href="#✅-总结" class="headerlink" title="✅ 总结"></a>✅ 总结</h2><table><thead><tr><th>阶段</th><th>目标</th><th>常用方法</th><th>特点</th></tr></thead><tbody><tr><td>召回</td><td>快速缩小候选</td><td>协同过滤、内容匹配</td><td>快速粗粒度</td></tr><tr><td>粗排</td><td>初步排序</td><td>LR、GDBT</td><td>模型轻量，可实时计算</td></tr><tr><td>精排</td><td>精细打分</td><td>XGBoost、DeepFM</td><td>复杂模型，效果最关键</td></tr><tr><td>重排</td><td>战略排序</td><td>多目标融合策略</td><td>平衡转化、点击、GMV 等目标</td></tr><tr><td>CTR&#x2F;CVR</td><td>排序核心模型</td><td>Wide&amp;Deep、DeepFM</td><td>高维组合特征建模</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>测试常见问题</category>
      
      <category>广告测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>广告测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一文讲明白 Python 递归</title>
    <link href="/2025/05/15/python%E9%80%92%E5%BD%92/"/>
    <url>/2025/05/15/python%E9%80%92%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<h1 id="一文讲明白-Python-的递归"><a href="#一文讲明白-Python-的递归" class="headerlink" title="一文讲明白 Python 的递归"></a>一文讲明白 Python 的递归</h1><h2 id="一、📌-什么是递归？"><a href="#一、📌-什么是递归？" class="headerlink" title="一、📌 什么是递归？"></a>一、📌 什么是递归？</h2><p>递归（Recursion）是指在函数内部调用自己本身的编程技巧。它通常用于解决可以分解为子问题的问题，比如树结构、图遍历等。</p><blockquote><p>简单理解：一个问题的解依赖于它更小规模的子问题的解。</p></blockquote><hr><h2 id="二、🧠-递归的基本结构"><a href="#二、🧠-递归的基本结构" class="headerlink" title="二、🧠 递归的基本结构"></a>二、🧠 递归的基本结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">recursive_function</span>(<span class="hljs-params">parameters</span>):<br>    <span class="hljs-keyword">if</span> termination_condition:<br>        <span class="hljs-keyword">return</span> result  <span class="hljs-comment"># 终止条件，防止无限调用</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> recursive_function(smaller_parameters)<br></code></pre></td></tr></table></figure><h3 id="✅-必须包含："><a href="#✅-必须包含：" class="headerlink" title="✅ 必须包含："></a>✅ 必须包含：</h3><ol><li><strong>终止条件（Base Case）</strong></li><li><strong>递归调用（Recursive Case）</strong></li></ol><hr><h2 id="三、🌱-新手入门：经典案例示例"><a href="#三、🌱-新手入门：经典案例示例" class="headerlink" title="三、🌱 新手入门：经典案例示例"></a>三、🌱 新手入门：经典案例示例</h2><h3 id="1-阶乘计算"><a href="#1-阶乘计算" class="headerlink" title="1. 阶乘计算"></a>1. 阶乘计算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">factorial</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>  <span class="hljs-comment"># 基本情况</span><br>    <span class="hljs-keyword">return</span> n * factorial(n - <span class="hljs-number">1</span>)  <span class="hljs-comment"># 递归调用</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(factorial(<span class="hljs-number">5</span>))  <span class="hljs-comment"># 输出 120</span><br></code></pre></td></tr></table></figure><h3 id="2-斐波那契数列（演示递归的效率瓶颈）"><a href="#2-斐波那契数列（演示递归的效率瓶颈）" class="headerlink" title="2. 斐波那契数列（演示递归的效率瓶颈）"></a>2. 斐波那契数列（演示递归的效率瓶颈）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fibonacci</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> n<br>    <span class="hljs-keyword">return</span> fibonacci(n - <span class="hljs-number">1</span>) + fibonacci(n - <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><blockquote><p>❗ 该方法效率低，适合用来演示“重叠子问题”的场景。</p></blockquote><hr><h2 id="四、🔍-递归的应用场景（企业级实战）"><a href="#四、🔍-递归的应用场景（企业级实战）" class="headerlink" title="四、🔍 递归的应用场景（企业级实战）"></a>四、🔍 递归的应用场景（企业级实战）</h2><h3 id="示例1：📂-遍历嵌套文件夹结构"><a href="#示例1：📂-遍历嵌套文件夹结构" class="headerlink" title="示例1：📂 遍历嵌套文件夹结构"></a>示例1：📂 遍历嵌套文件夹结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">traverse_directory</span>(<span class="hljs-params">path</span>):<br>    <span class="hljs-keyword">for</span> entry <span class="hljs-keyword">in</span> os.listdir(path):<br>        full_path = os.path.join(path, entry)<br>        <span class="hljs-keyword">if</span> os.path.isdir(full_path):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;📁 目录：&quot;</span>, full_path)<br>            traverse_directory(full_path)  <span class="hljs-comment"># 递归进入子目录</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;📄 文件：&quot;</span>, full_path)<br></code></pre></td></tr></table></figure><p>📌 实用场景：企业系统自动部署、日志批处理、全盘搜索等。</p><hr><h3 id="示例2：🌳-树形组织架构数据解析（JSON格式）"><a href="#示例2：🌳-树形组织架构数据解析（JSON格式）" class="headerlink" title="示例2：🌳 树形组织架构数据解析（JSON格式）"></a>示例2：🌳 树形组织架构数据解析（JSON格式）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">org_chart = &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;CEO&quot;</span>,<br>    <span class="hljs-string">&quot;children&quot;</span>: [<br>        &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;CTO&quot;</span>, <span class="hljs-string">&quot;children&quot;</span>: [<br>            &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Dev Manager&quot;</span>, <span class="hljs-string">&quot;children&quot;</span>: []&#125;<br>        ]&#125;,<br>        &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;CFO&quot;</span>, <span class="hljs-string">&quot;children&quot;</span>: []&#125;<br>    ]<br>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_org_chart</span>(<span class="hljs-params">node, level=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;  &quot;</span> * level + <span class="hljs-string">f&quot;👤 <span class="hljs-subst">&#123;node[<span class="hljs-string">&#x27;name&#x27;</span>]&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> node.get(<span class="hljs-string">&quot;children&quot;</span>, []):<br>        print_org_chart(child, level + <span class="hljs-number">1</span>)<br><br>print_org_chart(org_chart)<br></code></pre></td></tr></table></figure><p>📌 实用场景：企业HR系统组织管理、后台权限树、菜单树等。</p><hr><h3 id="示例3：🧾-递归计算订单明细的总价（嵌套结构）"><a href="#示例3：🧾-递归计算订单明细的总价（嵌套结构）" class="headerlink" title="示例3：🧾 递归计算订单明细的总价（嵌套结构）"></a>示例3：🧾 递归计算订单明细的总价（嵌套结构）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">order = &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;套餐A&quot;</span>,<br>    <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;items&quot;</span>: [<br>        &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;汉堡&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">20</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;配菜&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;items&quot;</span>: [<br>            &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;薯条&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">10</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;鸡翅&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">12</span>&#125;<br>        ]&#125;<br>    ]<br>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_price</span>(<span class="hljs-params">item</span>):<br>    total = item.get(<span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span> sub <span class="hljs-keyword">in</span> item.get(<span class="hljs-string">&quot;items&quot;</span>, []):<br>        total += calc_price(sub)<br>    <span class="hljs-keyword">return</span> total<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;总价：¥&quot;</span>, calc_price(order))  <span class="hljs-comment"># 输出：¥42</span><br></code></pre></td></tr></table></figure><p>📌 实用场景：ERP系统、商品打包套餐系统等。</p><hr><h2 id="五、⛏️-常见问题及优化"><a href="#五、⛏️-常见问题及优化" class="headerlink" title="五、⛏️ 常见问题及优化"></a>五、⛏️ 常见问题及优化</h2><h3 id="❓-问题1：栈溢出（RecursionError）"><a href="#❓-问题1：栈溢出（RecursionError）" class="headerlink" title="❓ 问题1：栈溢出（RecursionError）"></a>❓ 问题1：栈溢出（RecursionError）</h3><ul><li>默认递归深度：1000（可通过 <code>sys.setrecursionlimit</code> 修改）</li></ul><h3 id="❓-问题2：重复计算（如-Fibonacci）"><a href="#❓-问题2：重复计算（如-Fibonacci）" class="headerlink" title="❓ 问题2：重复计算（如 Fibonacci）"></a>❓ 问题2：重复计算（如 Fibonacci）</h3><ul><li>✅ 可使用 ​<strong>缓存优化</strong>​（如：<code>functools.lru_cache</code>）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> lru_cache<br><br><span class="hljs-meta">@lru_cache()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fibonacci</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> n<br>    <span class="hljs-keyword">return</span> fibonacci(n - <span class="hljs-number">1</span>) + fibonacci(n - <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><hr><h2 id="六、⚙️-企业实战中使用递归的技巧总结"><a href="#六、⚙️-企业实战中使用递归的技巧总结" class="headerlink" title="六、⚙️ 企业实战中使用递归的技巧总结"></a>六、⚙️ 企业实战中使用递归的技巧总结</h2><table><thead><tr><th>技巧</th><th>说明</th></tr></thead><tbody><tr><td>✅ 设定终止条件</td><td>防止死循环或栈溢出</td></tr><tr><td>✅ 添加缓存</td><td>提升性能（如动态规划+备忘录）</td></tr><tr><td>✅ 使用尾递归&#x2F;转循环</td><td>Python不优化尾递归，必要时改用循环</td></tr><tr><td>✅ 日志&#x2F;print辅助调试</td><td>观察递归栈的变化</td></tr></tbody></table><hr><h2 id="七、📌-小结"><a href="#七、📌-小结" class="headerlink" title="七、📌 小结"></a>七、📌 小结</h2><table><thead><tr><th>阶段</th><th>内容</th></tr></thead><tbody><tr><td>入门</td><td>理解递归结构、终止条件</td></tr><tr><td>提升</td><td>掌握递归在树形&#x2F;图结构中的应用</td></tr><tr><td>实战</td><td>构建企业级功能：文件遍历、组织结构、订单价格、权限系统等</td></tr><tr><td>优化</td><td>使用缓存、转换为循环、控制递归深度</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 递归</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chrome mock 请求以及回应</title>
    <link href="/2025/05/15/chromemock%E8%AF%B7%E6%B1%82%E4%BB%A5%E5%8F%8A%E5%9B%9E%E5%BA%94/"/>
    <url>/2025/05/15/chromemock%E8%AF%B7%E6%B1%82%E4%BB%A5%E5%8F%8A%E5%9B%9E%E5%BA%94/</url>
    
    <content type="html"><![CDATA[<h1 id="Chome-如何-mock-请求及回应"><a href="#Chome-如何-mock-请求及回应" class="headerlink" title="Chome 如何 mock 请求及回应"></a>Chome 如何 mock 请求及回应</h1><p>平常我们mock接口或者修改请求或者修改header都是通过fiddler或者charles等工具实现，但是其实chrome已经兼具了这个功能！</p><h2 id="Chrome-mock-返回内容"><a href="#Chrome-mock-返回内容" class="headerlink" title="Chrome mock 返回内容"></a>Chrome mock 返回内容</h2><p>修改返回的数据改为特定的值，那么我们可以通过chrome开发者工具的network，在你想要修改的接口上面右击，然后选择<code>Override content</code></p><img src="/2025/05/15/chromemock%E8%AF%B7%E6%B1%82%E4%BB%A5%E5%8F%8A%E5%9B%9E%E5%BA%94/1.png" class=""><p>此时浏览器会提示你: <code>选择一个文件夹进行存储文件</code>， 也就是将你的信息保存到本地，再次请求的时候如果url一样则会走你的本地这个文件的信息</p><p>当然，在提示需要<code>DevTools的权限获取</code>的时候需要给予允许！</p><p>这时候你就可以看到你可以将返回的信息进行修改了！</p><img src="/2025/05/15/chromemock%E8%AF%B7%E6%B1%82%E4%BB%A5%E5%8F%8A%E5%9B%9E%E5%BA%94/2.png" class=""><p>下面我们来修改一下！</p><img src="/2025/05/15/chromemock%E8%AF%B7%E6%B1%82%E4%BB%A5%E5%8F%8A%E5%9B%9E%E5%BA%94/3.png" class=""><p>我将ads之前的数据全部清空，然后我们看一下请求的返回接口</p><img src="/2025/05/15/chromemock%E8%AF%B7%E6%B1%82%E4%BB%A5%E5%8F%8A%E5%9B%9E%E5%BA%94/4.png" class=""><p>此时我们就看到了已经mock成功了，但是需要注意的是，<code>mock完毕之后记得改回来或者移除mock，因为很长时间忘记后，再次测试可能会让自己觉得是BUG，然后找到开发，最后发现是自己的问题，因为我就出现过，因为无感知！</code></p><h1 id="Chrome-mock-返回的response-header"><a href="#Chrome-mock-返回的response-header" class="headerlink" title="Chrome mock 返回的response header"></a>Chrome mock 返回的response header</h1><p>会了上面的，那么下面的就很简单了，此时我们打开<code>chrome开发者工具</code>，选择<code>network面板</code>，选择对应的接口，然后右击选择<code>Override headers</code></p><img src="/2025/05/15/chromemock%E8%AF%B7%E6%B1%82%E4%BB%A5%E5%8F%8A%E5%9B%9E%E5%BA%94/5.png" class=""><p>此时你会发现，可以在<code>network</code>的<code>Response header</code>下直接进行添加想要的<code>header</code></p><img src="/2025/05/15/chromemock%E8%AF%B7%E6%B1%82%E4%BB%A5%E5%8F%8A%E5%9B%9E%E5%BA%94/6.png" class=""><p>也可以通过右侧的headers文件链接进行在文件中的编辑，这里我们以这样的方式举例！这里我们新增一个返回的<code>header</code>，<code>key:value</code> 为<code>testtraceid:11112222333444</code></p><img src="/2025/05/15/chromemock%E8%AF%B7%E6%B1%82%E4%BB%A5%E5%8F%8A%E5%9B%9E%E5%BA%94/7.png" class=""><p>再次请求接口，发现已经返回了我们新增的header</p><img src="/2025/05/15/chromemock%E8%AF%B7%E6%B1%82%E4%BB%A5%E5%8F%8A%E5%9B%9E%E5%BA%94/8.png" class=""><p>如果想要修改已经存在的response header,则只需要增加相同的key即可,例如修改 tracid</p><img src="/2025/05/15/chromemock%E8%AF%B7%E6%B1%82%E4%BB%A5%E5%8F%8A%E5%9B%9E%E5%BA%94/9.png" class=""><img src="/2025/05/15/chromemock%E8%AF%B7%E6%B1%82%E4%BB%A5%E5%8F%8A%E5%9B%9E%E5%BA%94/10.png" class=""><p>可以看到我们已经将存在的header替换成了我们指定的值</p><h2 id="Chrome-mock的接口会有标识"><a href="#Chrome-mock的接口会有标识" class="headerlink" title="Chrome mock的接口会有标识"></a>Chrome mock的接口会有标识</h2><p>如果接口被<code>mock</code>则<code>chrome</code>会有一个标识在请求的前面展示，用来标记这个接口是被<code>Mock</code>过的</p><img src="/2025/05/15/chromemock%E8%AF%B7%E6%B1%82%E4%BB%A5%E5%8F%8A%E5%9B%9E%E5%BA%94/11.png" class=""><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个用起来蛮方便的就是在我上面提到的一定在用完后移除，要不然到了后期你在用的时候发现会很懵，为什么我的返回和别人的不一样呢？</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Chrome调试</category>
      
      <category>Chrome mock 请求以及回应</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Chrome调试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cloudfare内网穿透效能工具</title>
    <link href="/2025/04/21/cloudfare%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <url>/2025/04/21/cloudfare%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Cloudfare-内网穿透实现"><a href="#Cloudfare-内网穿透实现" class="headerlink" title="Cloudfare 内网穿透实现"></a>Cloudfare 内网穿透实现</h1><p>最近在测试项目中，由于某个需要再测试过程中涉及很多SQL执行的操作，要模拟多个不一样的环境，多种数据，当测试完毕交付给产品走查的时候，发现产品可能不怎么会使用SQL，即使会使用你仍需要耗费大量的精力去告诉每个表的结构以及逻辑等，基于这个场景我基于FastApi开发了一版swagger下的数据库查询接口。<br>但是我是部署在本机的，由于部分时间我们会在家里办公，产品此时就无法访问，虽然可以部署到公司环境中，但是目前评估只是当前需求涉及频繁后续可能都怎么频繁，所以放弃了部署到公司环境中，随后使用cloudfare进行内网穿透，即使产品和我不在一个网络只要我开机，便可以在公开网络上访问到，非常便利！</p><h2 id="cloudfare-上绑定域名"><a href="#cloudfare-上绑定域名" class="headerlink" title="cloudfare 上绑定域名"></a>cloudfare 上绑定域名</h2><p>首先你得有域名，这个应该很简单，你可以从阿里云上购买很多域名，这里就不介绍了，然后你得从cloudfare上进行注册账户，这个也很简单。接下来我们就需要绑定我们的域名了</p><h3 id="添加域名"><a href="#添加域名" class="headerlink" title="添加域名"></a>添加域名</h3><p>进去cloudfare主页后，点击<code>添加域</code></p><img src="/2025/04/21/cloudfare%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/1.png" class=""><p>输入现有的域名</p><img src="/2025/04/21/cloudfare%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/2.png" class=""><p>继续，然后我们选择0元的计划，进行无需付费的使用</p> <img src="/2025/04/21/cloudfare%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/3.png" class=""><p> 滑到页面底部，点击 <code>继续前往激活</code></p> <img src="/2025/04/21/cloudfare%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/4.png" class=""><p> 滑到页面底部，复制cloudfare 给我们分配的两个DNS 服务器。</p> <img src="/2025/04/21/cloudfare%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/5.png" class=""><p> 然后找到你的域名提供商，将你的域名的DNS进行更改，按照cloudfare基于的，改完之后稍等5-10分钟即可看到页面主页的显示已经激活。</p> <img src="/2025/04/21/cloudfare%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/6.png" class=""><p> 此刻我们的域名已经绑定成功。</p><h2 id="申请Zero-Trust"><a href="#申请Zero-Trust" class="headerlink" title="申请Zero Trust"></a>申请Zero Trust</h2><p> 需要进行内网穿透我们要在Zero Trust中进行申请，点击主页的<code>Zero Trust</code></p> <img src="/2025/04/21/cloudfare%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/7.png" class=""><p> 进去后，滑到底部，选择<code>账户和计费</code></p> <img src="/2025/04/21/cloudfare%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/8.png" class=""><p>继续选择<code>免费的计划</code></p><img src="/2025/04/21/cloudfare%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/9.png" class=""><p>此时需要填写一个银行卡信息，当然我们都选择Free的计划 是不会产生任何收费行为的，你写上也不会扣钱的。</p><img src="/2025/04/21/cloudfare%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/10.png" class=""><p>都写完毕后，我们就可以点击购买，然后当然就完成了Free计划的申请。</p><p>然后我们回到首页，点击<code>网络</code> 选择下面的 <code>Tunnels</code>, 然后输入一个团队的名字然后点击创建即可！</p><h2 id="github上下载相关执行文件"><a href="#github上下载相关执行文件" class="headerlink" title="github上下载相关执行文件"></a>github上下载相关执行文件</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>因为我的电脑是Windows的，所以我这边以Windows为例，不过过程的都大同小异的！</p><p>访问github地址：<a href="https://github.com/cloudflare/cloudflared/releases">https://github.com/cloudflare/cloudflared/releases</a></p><p>打开后，点击<code>show all 28 assets</code></p><img src="/2025/04/21/cloudfare%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/13.png" class=""><p>选择对应的系统版本，我这里选择的是<code>cloudflared-windows-amd64.exe</code></p><p>下载完毕后，放到随意的文件夹下，将这个文件名重命名为 <code>cloudflared.exe</code></p><p>然后cmd 到文件夹下执行命令行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">cloudflared.exe login<br></code></pre></td></tr></table></figure><p>浏览器会自动打开一个 <code>Cloudflare</code> 授权页面，让你选择域名并确认。登录成功后，会在你的用户目录下生成一个 .<code>cloudflared</code> 文件夹和<code>cert.pem</code>文件。</p><img src="/2025/04/21/cloudfare%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/14.png" class=""><h2 id="创建Tunnel"><a href="#创建Tunnel" class="headerlink" title="创建Tunnel"></a>创建Tunnel</h2><p>然后命令行创建<code>Tunnel</code>，还是回到刚刚放置<code>cloudfare.exe</code>文件夹下执行cmd命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">cloudflared tunnel create 你的隧道名称<br></code></pre></td></tr></table></figure><p>这将创建一个名为 <code>你的隧道名称</code> 的 <code>Tunnel</code>，同时 <code>Cloudflare</code> 会自动分配一个 <code>Tunnel ID</code>，并在本地生成配置文件。</p><p>此时生成的配置文件仍然在证书生成的那个文件夹下的一个json文件。</p><img src="/2025/04/21/cloudfare%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/15.png" class=""><p>然后我们继续配置执行命令行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">cloudflared.exe tunnel route dns 你刚刚的隧道名称 你的域名<br></code></pre></td></tr></table></figure><p>例如</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">cloudflared.exe tunnel route dns mytunnel mhy.com<br></code></pre></td></tr></table></figure><p>此时执行成功后，对自动创建到<code>cloudfare</code>中的一个<code>CNAME</code>类型的解析</p><img src="/2025/04/21/cloudfare%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/16.png" class=""><p>此时我们就注册了我们的隧道</p><h2 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h2><p>此时仍在<code>cloudfare.exe</code>文件所在的文件夹下创建一个<code>config.yml</code>的配置文件</p><p><code>credentials-file</code> 是你生成的json文件路径</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">tunnel:</span> <span class="hljs-string">你的隧道名称</span><br><span class="hljs-attr">credentials-file:</span> <span class="hljs-string">C:\Users\&lt;你的用户名&gt;\.cloudflared\xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx.json</span><br><br><span class="hljs-attr">ingress:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">hostname:</span> <span class="hljs-string">api.yourdomain.com</span><br>    <span class="hljs-attr">service:</span> <span class="hljs-string">http://localhost:8000</span>   <span class="hljs-comment"># 假设你运行的是 FastAPI 服务</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">service:</span> <span class="hljs-string">http_status:404</span>         <span class="hljs-comment"># 兜底</span><br><br></code></pre></td></tr></table></figure><p>保存完毕后，就完成了配置文件的编写</p><h2 id="运行Tunnel"><a href="#运行Tunnel" class="headerlink" title="运行Tunnel"></a>运行Tunnel</h2><p>运行前先将你本地的项目启动，最好以局域网访问的方式启动，而不只是以<code>loaclhost</code>方式启动。</p><p>然后我们启动Tunnel，仍在<code>cloudfare.exe</code> 文件夹下执行命令行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">cloudflared tunnel --config config文件路径\config.yml run 你的隧道名称<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">cloudflared tunnel --config C:\tools\cloudfare\config.yml run teen<br></code></pre></td></tr></table></figure><p>此时就可以看到启动了，如果弹出提示需要获取网络传输权限，需要给予！</p><h3 id="非常重要！"><a href="#非常重要！" class="headerlink" title="非常重要！"></a>非常重要！</h3><p><code>Cloudflare Tunnel</code> 是通过 <code>QUIC</code>（或 <code>TCP</code>）协议连接到 <code>Cloudflare</code> 的全球节点。如果你看到这个报错：</p><img src="/2025/04/21/cloudfare%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/17.png" class=""><p><code>QUIC</code> 是首选传输协议，但因为网络问题失败了。</p><p>此时不要慌，那是因为你的路由器或者其他的网络设备不支持，此时你在配置文件中加入</p><p>config.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">no-quic:</span> <span class="hljs-literal">true</span><br><br></code></pre></td></tr></table></figure><p>此时<code>Tunnel</code> 会尝试回退到 <code>TCP</code>，但如果两者都失败，就会 <code>503</code>。</p><p>再次启动后，会报通用的错误，此时需要等待3-5分钟，就会成功了！</p><img src="/2025/04/21/cloudfare%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/18.png" class=""><p>然后此刻你就可以访问你的项目了,按照你的域名就可以享受网络访问了！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>cloudfare 可以提供很多免费的项目，大家可以自己选择！当然你也可以做到开机自动启动，都是可以的！</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Cloudfare 相关工具</category>
      
      <category>Cloudfare内网穿透效能工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Cloudfare内网穿透效能工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搜索算法测试入门</title>
    <link href="/2025/04/14/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/"/>
    <url>/2025/04/14/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="🧠-搜索球队算法实现详解（工程级）"><a href="#🧠-搜索球队算法实现详解（工程级）" class="headerlink" title="🧠 搜索球队算法实现详解（工程级）"></a>🧠 搜索球队算法实现详解（工程级）</h1><hr><h2 id="📌-目标回顾"><a href="#📌-目标回顾" class="headerlink" title="📌 目标回顾"></a>📌 目标回顾</h2><p>用户输入一段关键词，如 <code>real</code>, <code>皇马</code>, <code>rmad</code>, <code>马德里</code>，系统应：</p><ul><li>快速从球队库中匹配最相关的球队</li><li>支持拼音、别名、模糊拼写、简称</li><li>排序返回 Top-N 最优匹配项</li></ul><hr><h2 id="🧩-总体流程"><a href="#🧩-总体流程" class="headerlink" title="🧩 总体流程"></a>🧩 总体流程</h2><pre><code class=" mermaid">graph TD    A[用户输入关键词q] --&gt; B[标准化预处理]    B --&gt; C[生成特征Token：简拼/全拼/别名/分词]    C --&gt; D[构建候选池]    D --&gt; E[匹配算法：编辑距离 + BM25/Tfidf]    E --&gt; F[综合排序打分]    F --&gt; G[返回Top-N球队]</code></pre><hr><h2 id="🧱-Step-1：标准化-Token生成"><a href="#🧱-Step-1：标准化-Token生成" class="headerlink" title="🧱 Step 1：标准化 + Token生成"></a>🧱 Step 1：标准化 + Token生成</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> pypinyin <span class="hljs-keyword">import</span> lazy_pinyin, Style<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">normalize_query</span>(<span class="hljs-params">q: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;清洗搜索关键词，去空格、统一大小写&quot;&quot;&quot;</span><br>    q = q.lower().strip()<br>    q = re.sub(<span class="hljs-string">r&#x27;[^\u4e00-\u9fa5a-z0-9]&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, q)<br>    <span class="hljs-keyword">return</span> q<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_tokens</span>(<span class="hljs-params">q: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;生成多种token形式：全拼、简拼、分词&quot;&quot;&quot;</span><br>    full_pinyin = <span class="hljs-string">&#x27;&#x27;</span>.join(lazy_pinyin(q))<br>    simple_pinyin = <span class="hljs-string">&#x27;&#x27;</span>.join(lazy_pinyin(q, style=Style.FIRST_LETTER))<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&#x27;original&#x27;</span>: q,<br>        <span class="hljs-string">&#x27;full_pinyin&#x27;</span>: full_pinyin,<br>        <span class="hljs-string">&#x27;simple_pinyin&#x27;</span>: simple_pinyin,<br>    &#125;<br></code></pre></td></tr></table></figure><hr><h2 id="📦-Step-2：构建候选池（离线构建-内存加载）"><a href="#📦-Step-2：构建候选池（离线构建-内存加载）" class="headerlink" title="📦 Step 2：构建候选池（离线构建 + 内存加载）"></a>📦 Step 2：构建候选池（离线构建 + 内存加载）</h2><p>每支球队结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">team_index = [<br>    &#123;<br>        <span class="hljs-string">&quot;team_id&quot;</span>: <span class="hljs-number">1001</span>,<br>        <span class="hljs-string">&quot;name_zh&quot;</span>: <span class="hljs-string">&quot;皇家马德里&quot;</span>,<br>        <span class="hljs-string">&quot;name_en&quot;</span>: <span class="hljs-string">&quot;Real Madrid&quot;</span>,<br>        <span class="hljs-string">&quot;alias&quot;</span>: [<span class="hljs-string">&quot;real&quot;</span>, <span class="hljs-string">&quot;rmad&quot;</span>, <span class="hljs-string">&quot;皇马&quot;</span>],<br>        <span class="hljs-string">&quot;full_pinyin&quot;</span>: <span class="hljs-string">&quot;huangjiamadelie&quot;</span>,<br>        <span class="hljs-string">&quot;simple_pinyin&quot;</span>: <span class="hljs-string">&quot;hjmdl&quot;</span><br>    &#125;,<br>    ...<br>]<br></code></pre></td></tr></table></figure><blockquote><p>建议提前用 Redis 缓存简拼索引，提高首次命中率。</p></blockquote><hr><h2 id="🔍-Step-3：匹配算法核心实现"><a href="#🔍-Step-3：匹配算法核心实现" class="headerlink" title="🔍 Step 3：匹配算法核心实现"></a>🔍 Step 3：匹配算法核心实现</h2><h3 id="方法1：编辑距离（Levenshtein）"><a href="#方法1：编辑距离（Levenshtein）" class="headerlink" title="方法1：编辑距离（Levenshtein）"></a>方法1：编辑距离（Levenshtein）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> Levenshtein<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fuzzy_score</span>(<span class="hljs-params">a: <span class="hljs-built_in">str</span>, b: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;返回字符串相似度，1分为满分&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> a <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> b:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> - Levenshtein.distance(a, b) / <span class="hljs-built_in">max</span>(<span class="hljs-built_in">len</span>(a), <span class="hljs-built_in">len</span>(b))<br></code></pre></td></tr></table></figure><h3 id="方法2：TF-IDF-向量相似度"><a href="#方法2：TF-IDF-向量相似度" class="headerlink" title="方法2：TF-IDF 向量相似度"></a>方法2：TF-IDF 向量相似度</h3><p>用于处理多词场景，如 “manchester united”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.feature_extraction.text <span class="hljs-keyword">import</span> TfidfVectorizer<br><span class="hljs-keyword">from</span> sklearn.metrics.pairwise <span class="hljs-keyword">import</span> cosine_similarity<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tfidf_match</span>(<span class="hljs-params">query, docs</span>):<br>    vectorizer = TfidfVectorizer()<br>    tfidf = vectorizer.fit_transform([query] + docs)<br>    sim = cosine_similarity(tfidf[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>], tfidf[<span class="hljs-number">1</span>:]).flatten()<br>    <span class="hljs-keyword">return</span> sim<br></code></pre></td></tr></table></figure><hr><h2 id="📊-Step-4：综合评分逻辑"><a href="#📊-Step-4：综合评分逻辑" class="headerlink" title="📊 Step 4：综合评分逻辑"></a>📊 Step 4：综合评分逻辑</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">score_team</span>(<span class="hljs-params">query_tokens, team</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;对一支球队进行多种字段匹配，并计算最终得分&quot;&quot;&quot;</span><br>    scores = []<br><br>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;name_zh&#x27;</span>, <span class="hljs-string">&#x27;name_en&#x27;</span>, <span class="hljs-string">&#x27;full_pinyin&#x27;</span>, <span class="hljs-string">&#x27;simple_pinyin&#x27;</span>]:<br>        <span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> team:<br>            scores.append(fuzzy_score(query_tokens[<span class="hljs-string">&#x27;original&#x27;</span>], team[key]))<br>            scores.append(fuzzy_score(query_tokens[<span class="hljs-string">&#x27;full_pinyin&#x27;</span>], team[key]))<br>            scores.append(fuzzy_score(query_tokens[<span class="hljs-string">&#x27;simple_pinyin&#x27;</span>], team[key]))<br><br>    <span class="hljs-comment"># 别名匹配</span><br>    <span class="hljs-keyword">for</span> alias <span class="hljs-keyword">in</span> team.get(<span class="hljs-string">&#x27;alias&#x27;</span>, []):<br>        scores.append(fuzzy_score(query_tokens[<span class="hljs-string">&#x27;original&#x27;</span>], alias))<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(scores)  <span class="hljs-comment"># 或使用加权平均</span><br></code></pre></td></tr></table></figure><hr><h2 id="🧪-Step-5：主函数-测试样例"><a href="#🧪-Step-5：主函数-测试样例" class="headerlink" title="🧪 Step 5：主函数 + 测试样例"></a>🧪 Step 5：主函数 + 测试样例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">search_teams</span>(<span class="hljs-params">query, index, top_n=<span class="hljs-number">5</span></span>):<br>    q_norm = normalize_query(query)<br>    q_tokens = generate_tokens(q_norm)<br><br>    scored = []<br>    <span class="hljs-keyword">for</span> team <span class="hljs-keyword">in</span> index:<br>        score = score_team(q_tokens, team)<br>        <span class="hljs-keyword">if</span> score &gt; <span class="hljs-number">0.3</span>:<br>            scored.append((score, team))<br><br>    scored.sort(key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">0</span>], reverse=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> [team <span class="hljs-keyword">for</span> _, team <span class="hljs-keyword">in</span> scored[:top_n]]<br><br><span class="hljs-comment"># 示例：</span><br>results = search_teams(<span class="hljs-string">&quot;皇马&quot;</span>, team_index)<br><span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> results:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;✅ <span class="hljs-subst">&#123;r[<span class="hljs-string">&#x27;name_zh&#x27;</span>]&#125;</span> - <span class="hljs-subst">&#123;r[<span class="hljs-string">&#x27;name_en&#x27;</span>]&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><hr><h2 id="🚀-提升建议（大数据版本）"><a href="#🚀-提升建议（大数据版本）" class="headerlink" title="🚀 提升建议（大数据版本）"></a>🚀 提升建议（大数据版本）</h2><ol><li>替换为 ElasticSearch 词向量匹配，实时搜索更强</li><li>引入 Query 重写器（Spell Correction）</li><li>用户画像词权重（基于行为分数加权）</li></ol><hr><h2 id="✅-最终总结"><a href="#✅-最终总结" class="headerlink" title="✅ 最终总结"></a>✅ 最终总结</h2><table><thead><tr><th>阶段</th><th>关键任务</th></tr></thead><tbody><tr><td>标准化输入</td><td>清洗、拼音提取、编码统一</td></tr><tr><td>候选匹配</td><td>简拼、全拼、别名、中文名等多维匹配</td></tr><tr><td>相似度计算</td><td>Levenshtein 编辑距离、TF-IDF 语义匹配</td></tr><tr><td>排序与过滤</td><td>按分数降序过滤、返回Top-N</td></tr></tbody></table><h1 id="🧠-搜索球队算法（升级版）-接入-ElasticSearch-完整实现-架构说明-测试方法"><a href="#🧠-搜索球队算法（升级版）-接入-ElasticSearch-完整实现-架构说明-测试方法" class="headerlink" title="🧠 搜索球队算法（升级版）- 接入 ElasticSearch 完整实现 + 架构说明 + 测试方法"></a>🧠 搜索球队算法（升级版）- 接入 ElasticSearch 完整实现 + 架构说明 + 测试方法</h1><hr><h2 id="🌐-一、整体架构图（引入-ES）"><a href="#🌐-一、整体架构图（引入-ES）" class="headerlink" title="🌐 一、整体架构图（引入 ES）"></a>🌐 一、整体架构图（引入 ES）</h2><pre><code class=" mermaid">graph TD  A[用户输入关键词] --&gt; B[标准化 + 拼音/简拼生成]  B --&gt; C[ES 查询构建器（Query Builder）]  C --&gt; D[ElasticSearch 执行查询]  D --&gt; E[获取初步结果 Top-K]  E --&gt; F[后处理：拼音/别名/语义二次打分]  F --&gt; G[Top-N结果返回前端展示]</code></pre><hr><h2 id="🧩-二、ElasticSearch-在架构中的角色"><a href="#🧩-二、ElasticSearch-在架构中的角色" class="headerlink" title="🧩 二、ElasticSearch 在架构中的角色"></a>🧩 二、ElasticSearch 在架构中的角色</h2><table><thead><tr><th>模块</th><th>说明</th></tr></thead><tbody><tr><td><strong>ES 索引（Index）</strong></td><td>存储所有球队信息，字段包括原名、拼音、别名、英文名等</td></tr><tr><td><strong>Query DSL</strong></td><td>用于构建多字段、模糊、权重查询</td></tr><tr><td><strong>初筛任务</strong></td><td>使用<code>match</code>,<code>multi_match</code>,<code>should</code>查询快速拉取 200 个 Top 候选</td></tr><tr><td><strong>性能优化</strong></td><td>借助倒排索引 + 分词器，轻量搜索毫秒级返回</td></tr></tbody></table><hr><h2 id="🔌-三、数据库如何与-ElasticSearch-交互"><a href="#🔌-三、数据库如何与-ElasticSearch-交互" class="headerlink" title="🔌 三、数据库如何与 ElasticSearch 交互"></a>🔌 三、数据库如何与 ElasticSearch 交互</h2><h3 id="1️⃣-索引结构设计（Mapping）"><a href="#1️⃣-索引结构设计（Mapping）" class="headerlink" title="1️⃣ 索引结构设计（Mapping）"></a>1️⃣ 索引结构设计（Mapping）</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /team_index<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;team_id&quot;</span><span class="hljs-punctuation">:</span>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;name_zh&quot;</span><span class="hljs-punctuation">:</span>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;name_en&quot;</span><span class="hljs-punctuation">:</span>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;alias&quot;</span><span class="hljs-punctuation">:</span>      <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;simple_pinyin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;full_pinyin&quot;</span><span class="hljs-punctuation">:</span>   <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span> <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>建议中文字段用 <code>ik</code> 分词器（可用自定义），拼音字段用 <code>keyword</code> 精确匹配。</p><hr><h3 id="2️⃣-数据同步策略"><a href="#2️⃣-数据同步策略" class="headerlink" title="2️⃣ 数据同步策略"></a>2️⃣ 数据同步策略</h3><p>可选 2 种方式同步数据库到 ES：</p><h4 id="🌀-后台定时同步"><a href="#🌀-后台定时同步" class="headerlink" title="🌀 后台定时同步"></a>🌀 后台定时同步</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sync_mysql_to_es</span>():<br>    teams = mysql.query(<span class="hljs-string">&quot;SELECT * FROM teams&quot;</span>)<br>    <span class="hljs-keyword">for</span> team <span class="hljs-keyword">in</span> teams:<br>        es.index(index=<span class="hljs-string">&#x27;team_index&#x27;</span>, <span class="hljs-built_in">id</span>=team[<span class="hljs-string">&#x27;id&#x27;</span>], body=team)<br></code></pre></td></tr></table></figure><h4 id="⚡-实时触发式（如Django-Celery）"><a href="#⚡-实时触发式（如Django-Celery）" class="headerlink" title="⚡ 实时触发式（如Django + Celery）"></a>⚡ 实时触发式（如Django + Celery）</h4><p>监听新增&#x2F;更新球队时：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@receiver(<span class="hljs-params">post_save, sender=Team</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update_es_index</span>(<span class="hljs-params">sender, instance, **kwargs</span>):<br>    es.index(index=<span class="hljs-string">&#x27;team_index&#x27;</span>, <span class="hljs-built_in">id</span>=instance.<span class="hljs-built_in">id</span>, body=model_to_dict(instance))<br></code></pre></td></tr></table></figure><hr><h2 id="🔍-四、ES-查询实现（Python-示例）"><a href="#🔍-四、ES-查询实现（Python-示例）" class="headerlink" title="🔍 四、ES 查询实现（Python 示例）"></a>🔍 四、ES 查询实现（Python 示例）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> elasticsearch <span class="hljs-keyword">import</span> Elasticsearch<br><br>es = Elasticsearch(<span class="hljs-string">&quot;http://localhost:9200&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search_teams_es</span>(<span class="hljs-params">query: <span class="hljs-built_in">str</span>, size=<span class="hljs-number">20</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;在ES中搜索球队&quot;&quot;&quot;</span><br>    q = query.strip().lower()<br><br>    body = &#123;<br>        <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;should&quot;</span>: [<br>                    &#123; <span class="hljs-string">&quot;match&quot;</span>: &#123; <span class="hljs-string">&quot;name_zh&quot;</span>: q &#125;&#125;,<br>                    &#123; <span class="hljs-string">&quot;match&quot;</span>: &#123; <span class="hljs-string">&quot;name_en&quot;</span>: q &#125;&#125;,<br>                    &#123; <span class="hljs-string">&quot;match&quot;</span>: &#123; <span class="hljs-string">&quot;alias&quot;</span>: q &#125;&#125;,<br>                    &#123; <span class="hljs-string">&quot;term&quot;</span>:  &#123; <span class="hljs-string">&quot;simple_pinyin&quot;</span>: q &#125;&#125;,<br>                    &#123; <span class="hljs-string">&quot;term&quot;</span>:  &#123; <span class="hljs-string">&quot;full_pinyin&quot;</span>: q &#125;&#125;<br>                ]<br>            &#125;<br>        &#125;,<br>        <span class="hljs-string">&quot;size&quot;</span>: size<br>    &#125;<br><br>    resp = es.search(index=<span class="hljs-string">&quot;team_index&quot;</span>, body=body)<br>    <span class="hljs-keyword">return</span> [hit[<span class="hljs-string">&quot;_source&quot;</span>] <span class="hljs-keyword">for</span> hit <span class="hljs-keyword">in</span> resp[<span class="hljs-string">&quot;hits&quot;</span>][<span class="hljs-string">&quot;hits&quot;</span>]]<br></code></pre></td></tr></table></figure><blockquote><p>若你要做 Typo 容错或拼写修正，也可引入 <code>fuzzy</code>, <code>match_phrase_prefix</code>, <code>suggest</code> 查询器。</p></blockquote><hr><h2 id="🧪-五、测试方案设计"><a href="#🧪-五、测试方案设计" class="headerlink" title="🧪 五、测试方案设计"></a>🧪 五、测试方案设计</h2><h3 id="✅-1-单元测试"><a href="#✅-1-单元测试" class="headerlink" title="✅ 1. 单元测试"></a>✅ 1. 单元测试</h3><ul><li>使用固定的 query 如 <code>&quot;皇马&quot;</code>, <code>&quot;real&quot;</code>, <code>&quot;rmad&quot;</code>, <code>&quot;huangjiamadelie&quot;</code></li><li>验证返回是否包含 <code>Real Madrid</code> 且排序靠前</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_search_real_madrid</span>():<br>    results = search_teams_es(<span class="hljs-string">&quot;皇马&quot;</span>)<br>    names = [r[<span class="hljs-string">&#x27;name_zh&#x27;</span>] <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> results]<br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&quot;皇家马德里&quot;</span> <span class="hljs-keyword">in</span> names<br></code></pre></td></tr></table></figure><h3 id="✅-2-召回率测试（离线评估）"><a href="#✅-2-召回率测试（离线评估）" class="headerlink" title="✅ 2. 召回率测试（离线评估）"></a>✅ 2. 召回率测试（离线评估）</h3><ul><li>建立一个 query -&gt; ground truth 映射表</li><li>测试 N 条 query 的 Top-K 召回是否正确</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;皇马&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;皇家马德里&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;man u&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;曼彻斯特联&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;acmilan&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;AC米兰&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>使用 Python 脚本统计召回率、命中率、排序质量。</p><hr><h2 id="🎯-性能测试建议"><a href="#🎯-性能测试建议" class="headerlink" title="🎯 性能测试建议"></a>🎯 性能测试建议</h2><ul><li>使用 <code>ab</code> 或 <code>wrk</code> 模拟高并发搜索请求，测试 ES 吞吐</li><li>每次拉取 20 条候选，后端再执行二次重排打分</li></ul><hr><h2 id="⚒️-工程建议"><a href="#⚒️-工程建议" class="headerlink" title="⚒️ 工程建议"></a>⚒️ 工程建议</h2><table><thead><tr><th>模块</th><th>实践建议</th></tr></thead><tbody><tr><td>数据建模</td><td>拼音字段冗余建模写入 ES</td></tr><tr><td>多语言支持</td><td>name_en、alias 等字段提前预处理</td></tr><tr><td>SpellCheck</td><td>可用<code>elasticsearch-suggest</code>模块集成</td></tr><tr><td>搜索日志分析</td><td>日志中记录 query + 返回 top3，训练热度模型</td></tr></tbody></table><h1 id="🧩-拼音生成器（简拼-全拼）集成"><a href="#🧩-拼音生成器（简拼-全拼）集成" class="headerlink" title="🧩 拼音生成器（简拼&#x2F;全拼）集成"></a>🧩 拼音生成器（简拼&#x2F;全拼）集成</h1><hr><h2 id="🔧-1-引入依赖"><a href="#🔧-1-引入依赖" class="headerlink" title="🔧 1. 引入依赖"></a>🔧 1. 引入依赖</h2><p>使用阿里巴巴的 <a href="https://github.com/belerweb/pinyin4j">pinyin4j</a>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.belerweb<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pinyin4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h2 id="🧠-2-拼音工具类实现"><a href="#🧠-2-拼音工具类实现" class="headerlink" title="🧠 2. 拼音工具类实现"></a>🧠 2. 拼音工具类实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PinyinUtil</span> &#123;<br><br>    <span class="hljs-comment">// 获取全拼，如：北京 → beijing</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getFullPinyin</span><span class="hljs-params">(String chinese)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : chinese.toCharArray()) &#123;<br>            <span class="hljs-keyword">if</span> (Character.toString(c).matches(<span class="hljs-string">&quot;[\\u4E00-\\u9FA5]+&quot;</span>)) &#123;<br>                String[] pinyinArray = PinyinHelper.toHanyuPinyinStringArray(c);<br>                <span class="hljs-keyword">if</span> (pinyinArray != <span class="hljs-literal">null</span>) &#123;<br>                    sb.append(pinyinArray[<span class="hljs-number">0</span>].replaceAll(<span class="hljs-string">&quot;\\d&quot;</span>, <span class="hljs-string">&quot;&quot;</span>));<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                sb.append(c);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sb.toString().toLowerCase();<br>    &#125;<br><br>    <span class="hljs-comment">// 获取简拼，如：北京 → bj</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSimplePinyin</span><span class="hljs-params">(String chinese)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : chinese.toCharArray()) &#123;<br>            <span class="hljs-keyword">if</span> (Character.toString(c).matches(<span class="hljs-string">&quot;[\\u4E00-\\u9FA5]+&quot;</span>)) &#123;<br>                String[] pinyinArray = PinyinHelper.toHanyuPinyinStringArray(c);<br>                <span class="hljs-keyword">if</span> (pinyinArray != <span class="hljs-literal">null</span> &amp;&amp; pinyinArray.length &gt; <span class="hljs-number">0</span>) &#123;<br>                    sb.append(pinyinArray[<span class="hljs-number">0</span>].charAt(<span class="hljs-number">0</span>));<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                sb.append(c.charAt(<span class="hljs-number">0</span>));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sb.toString().toLowerCase();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="📝-3-实体保存或更新时自动生成拼音字段"><a href="#📝-3-实体保存或更新时自动生成拼音字段" class="headerlink" title="📝 3. 实体保存或更新时自动生成拼音字段"></a>📝 3. 实体保存或更新时自动生成拼音字段</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Team <span class="hljs-title function_">preProcessTeam</span><span class="hljs-params">(Team team)</span> &#123;<br>    team.setSimplePinyin(PinyinUtil.getSimplePinyin(team.getNameZh()));<br>    team.setFullPinyin(PinyinUtil.getFullPinyin(team.getNameZh()));<br>    <span class="hljs-keyword">return</span> team;<br>&#125;<br></code></pre></td></tr></table></figure><p>建议在：</p><ul><li>后台录入</li><li>数据库定时同步</li><li>Kafka 消费端</li></ul><p>统一调用此逻辑。</p><hr><h1 id="🔄-实时数据同步机制：MySQL-Kafka-Debezium-→-ES-自动更新"><a href="#🔄-实时数据同步机制：MySQL-Kafka-Debezium-→-ES-自动更新" class="headerlink" title="🔄 实时数据同步机制：MySQL + Kafka + Debezium → ES 自动更新"></a>🔄 实时数据同步机制：MySQL + Kafka + Debezium → ES 自动更新</h1><hr><h2 id="📦-1-核心组件说明"><a href="#📦-1-核心组件说明" class="headerlink" title="📦 1. 核心组件说明"></a>📦 1. 核心组件说明</h2><table><thead><tr><th>组件</th><th>作用</th></tr></thead><tbody><tr><td>MySQL</td><td>数据源</td></tr><tr><td>Debezium</td><td>监听 MySQL binlog，实时捕捉数据变更</td></tr><tr><td>Kafka</td><td>接收 binlog 事件</td></tr><tr><td>Kafka Consumer（Spring）</td><td>消费事件、同步数据</td></tr><tr><td>Elasticsearch</td><td>接收索引更新</td></tr></tbody></table><hr><h2 id="🧰-2-Debezium-监听-MySQL-配置（Docker-方式示例）"><a href="#🧰-2-Debezium-监听-MySQL-配置（Docker-方式示例）" class="headerlink" title="🧰 2. Debezium 监听 MySQL 配置（Docker 方式示例）"></a>🧰 2. Debezium 监听 MySQL 配置（Docker 方式示例）</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">zookeeper:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">zookeeper:3.6</span><br>    <span class="hljs-attr">ports:</span> [<span class="hljs-string">&quot;2181:2181&quot;</span>]<br><br>  <span class="hljs-attr">kafka:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">confluentinc/cp-kafka</span><br>    <span class="hljs-attr">ports:</span> [<span class="hljs-string">&quot;9092:9092&quot;</span>]<br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">KAFKA_ZOOKEEPER_CONNECT:</span> <span class="hljs-string">zookeeper:2181</span><br>      <span class="hljs-attr">KAFKA_ADVERTISED_LISTENERS:</span> <span class="hljs-string">PLAINTEXT://kafka:9092</span><br><br>  <span class="hljs-attr">mysql:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:8</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">root</span><br><br>  <span class="hljs-attr">debezium:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">debezium/connect:2.6</span><br>    <span class="hljs-attr">ports:</span> [<span class="hljs-string">&quot;8083:8083&quot;</span>]<br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">BOOTSTRAP_SERVERS:</span> <span class="hljs-string">kafka:9092</span><br>      <span class="hljs-attr">GROUP_ID:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">CONFIG_STORAGE_TOPIC:</span> <span class="hljs-string">my_connect_configs</span><br>      <span class="hljs-attr">OFFSET_STORAGE_TOPIC:</span> <span class="hljs-string">my_connect_offsets</span><br>      <span class="hljs-attr">STATUS_STORAGE_TOPIC:</span> <span class="hljs-string">my_connect_statuses</span><br></code></pre></td></tr></table></figure><p>注册 MySQL 监听器（POST 到 <a href="http://localhost:8083/connectors%EF%BC%89%EF%BC%9A">http://localhost:8083/connectors）：</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mysql-team-connector&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;config&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;connector.class&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;io.debezium.connector.mysql.MySqlConnector&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;database.hostname&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mysql&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;database.port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3306&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;database.user&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;root&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;database.password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;root&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;database.server.id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;database.include.list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sports_db&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;table.include.list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sports_db.teams&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;database.server.name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mysqlserver1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;database.history.kafka.bootstrap.servers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kafka:9092&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;database.history.kafka.topic&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dbhistory.full&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>Kafka 会推送 <code>mysqlserver1.sports_db.teams</code> 主题。</p><hr><h2 id="🧑‍💻-3-Java-消费-Kafka-→-自动更新-Elasticsearch"><a href="#🧑‍💻-3-Java-消费-Kafka-→-自动更新-Elasticsearch" class="headerlink" title="🧑‍💻 3. Java 消费 Kafka → 自动更新 Elasticsearch"></a>🧑‍💻 3. Java 消费 Kafka → 自动更新 Elasticsearch</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TeamKafkaConsumer</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ObjectMapper objectMapper;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> TeamESRepository teamESRepository;<br><br>    <span class="hljs-meta">@KafkaListener(topics = &quot;mysqlserver1.sports_db.teams&quot;, groupId = &quot;team-sync&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">consumeTeamChange</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">JsonNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> objectMapper.readTree(message);<br>            <span class="hljs-type">JsonNode</span> <span class="hljs-variable">after</span> <span class="hljs-operator">=</span> root.path(<span class="hljs-string">&quot;payload&quot;</span>).path(<span class="hljs-string">&quot;after&quot;</span>);<br><br>            <span class="hljs-keyword">if</span> (!after.isMissingNode()) &#123;<br>                <span class="hljs-type">TeamDocument</span> <span class="hljs-variable">doc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TeamDocument</span>();<br>                doc.setId(after.get(<span class="hljs-string">&quot;id&quot;</span>).asLong());<br>                doc.setNameZh(after.get(<span class="hljs-string">&quot;nameZh&quot;</span>).asText());<br>                doc.setNameEn(after.get(<span class="hljs-string">&quot;nameEn&quot;</span>).asText());<br>                doc.setAlias(after.get(<span class="hljs-string">&quot;alias&quot;</span>).asText());<br><br>                doc.setSimplePinyin(PinyinUtil.getSimplePinyin(doc.getNameZh()));<br>                doc.setFullPinyin(PinyinUtil.getFullPinyin(doc.getNameZh()));<br><br>                teamESRepository.save(doc);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;Failed to sync team from Kafka&quot;</span>, e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="🔍-测试建议"><a href="#🔍-测试建议" class="headerlink" title="🔍 测试建议"></a>🔍 测试建议</h2><ul><li>使用 Kafka MockServer + 单元测试验证消费是否正确写入 ES。</li><li>写入数据库模拟新增球队名，检查 ES 索引是否自动更新。</li><li>修改已有球队名，测试拼音字段是否重新生成。</li></ul>]]></content>
    
    
    <categories>
      
      <category>测试常见问题</category>
      
      <category>算法测试</category>
      
      <category>搜索算法测试入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>测试知识</tag>
      
      <tag>搜索算法测试入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python sorted函数详细介绍</title>
    <link href="/2025/04/14/sorted%E5%87%BD%E6%95%B0%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/"/>
    <url>/2025/04/14/sorted%E5%87%BD%E6%95%B0%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-sorted-函数详细介绍"><a href="#Python-sorted-函数详细介绍" class="headerlink" title="Python sorted 函数详细介绍"></a>Python sorted 函数详细介绍</h1><h1 id="📌-Python-中的-sorted-函数详解（从入门到高阶）"><a href="#📌-Python-中的-sorted-函数详解（从入门到高阶）" class="headerlink" title="📌 Python 中的 sorted() 函数详解（从入门到高阶）"></a><strong>📌 Python 中的 <code>sorted()</code> 函数详解（从入门到高阶）</strong></h1><hr><h2 id="✅-1-什么是-sorted-？"><a href="#✅-1-什么是-sorted-？" class="headerlink" title="✅ 1. 什么是 sorted()？"></a>✅ 1. 什么是 <code>sorted()</code>？</h2><p><code>sorted()</code> 是 Python 内置的​<strong>排序函数</strong>​，可以对​<strong>任意可迭代对象（如列表、元组、集合、字典等）</strong>进行排序，并<strong>返回一个新的有序列表</strong>​，​<strong>不会修改原始数据</strong>​。</p><h3 id="🔹-基本语法："><a href="#🔹-基本语法：" class="headerlink" title="🔹 基本语法："></a><strong>🔹 基本语法：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">sorted</span>(iterable, *, key=<span class="hljs-literal">None</span>, reverse=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>iterable</code></td><td>可迭代对象，如<code>list</code>、<code>tuple</code>、<code>dict</code>等</td></tr><tr><td><code>key</code></td><td>排序函数，用于指定排序依据</td></tr><tr><td><code>reverse</code></td><td>是否反向排序，默认为<code>False</code>（升序）</td></tr></tbody></table><hr><h2 id="✅-2-基础用法：对列表排序"><a href="#✅-2-基础用法：对列表排序" class="headerlink" title="✅ 2. 基础用法：对列表排序"></a>✅ 2. 基础用法：对列表排序</h2><h3 id="📌-示例-1：数字升序排序"><a href="#📌-示例-1：数字升序排序" class="headerlink" title="📌 示例 1：数字升序排序"></a><strong>📌 示例 1：数字升序排序</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">numbers = [<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>]<br>result = <span class="hljs-built_in">sorted</span>(numbers)<br><span class="hljs-built_in">print</span>(result)  <span class="hljs-comment"># ✅ [1, 1, 2, 3, 4, 5, 9]</span><br></code></pre></td></tr></table></figure><h3 id="📌-示例-2：字符串排序（按字母）"><a href="#📌-示例-2：字符串排序（按字母）" class="headerlink" title="📌 示例 2：字符串排序（按字母）"></a><strong>📌 示例 2：字符串排序（按字母）</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">words = [<span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;cherry&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(words))  <span class="hljs-comment"># ✅ [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="✅-注意：原始列表未被修改"><a href="#✅-注意：原始列表未被修改" class="headerlink" title="✅ 注意：原始列表未被修改"></a>✅ <strong>注意：原始列表未被修改</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(numbers)  <span class="hljs-comment"># ✅ [3, 1, 4, 1, 5, 9, 2]</span><br></code></pre></td></tr></table></figure><hr><h2 id="✅-3-与-sort-的区别"><a href="#✅-3-与-sort-的区别" class="headerlink" title="✅ 3. 与 .sort() 的区别"></a>✅ 3. 与 <code>.sort()</code> 的区别</h2><table><thead><tr><th>特性</th><th><code>sorted()</code></th><th><code>list.sort()</code></th></tr></thead><tbody><tr><td>返回新列表</td><td>✅ 是</td><td>❌ 否（就地排序）</td></tr><tr><td>适用于所有可迭代对象</td><td>✅ 是</td><td>❌ 仅限<code>list</code></td></tr><tr><td>更推荐在函数式编程中使用</td><td>✅ 是</td><td>❌ 否</td></tr><tr><td>是否破坏原数据</td><td>❌ 不破坏</td><td>✅ 修改原对象</td></tr></tbody></table><hr><h2 id="✅-4-使用-reverse-True-实现降序排序"><a href="#✅-4-使用-reverse-True-实现降序排序" class="headerlink" title="✅ 4. 使用 reverse=True 实现降序排序"></a>✅ 4. 使用 <code>reverse=True</code> 实现降序排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">scores = [<span class="hljs-number">60</span>, <span class="hljs-number">75</span>, <span class="hljs-number">90</span>, <span class="hljs-number">88</span>, <span class="hljs-number">70</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(scores, reverse=<span class="hljs-literal">True</span>))  <span class="hljs-comment"># ✅ [90, 88, 75, 70, 60]</span><br></code></pre></td></tr></table></figure><hr><h2 id="✅-5-使用-key-指定排序依据"><a href="#✅-5-使用-key-指定排序依据" class="headerlink" title="✅ 5. 使用 key 指定排序依据"></a>✅ 5. 使用 <code>key</code> 指定排序依据</h2><h3 id="📌-示例-1：按字符串长度排序"><a href="#📌-示例-1：按字符串长度排序" class="headerlink" title="📌 示例 1：按字符串长度排序"></a><strong>📌 示例 1：按字符串长度排序</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">words = [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;pear&#x27;</span>, <span class="hljs-string">&#x27;kiwi&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(words, key=<span class="hljs-built_in">len</span>))  <span class="hljs-comment"># ✅ [&#x27;kiwi&#x27;, &#x27;pear&#x27;, &#x27;apple&#x27;, &#x27;banana&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="📌-示例-2：忽略大小写排序"><a href="#📌-示例-2：忽略大小写排序" class="headerlink" title="📌 示例 2：忽略大小写排序"></a><strong>📌 示例 2：忽略大小写排序</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">words = [<span class="hljs-string">&#x27;Banana&#x27;</span>, <span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;Cherry&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(words, key=<span class="hljs-built_in">str</span>.lower))  <span class="hljs-comment"># ✅ [&#x27;apple&#x27;, &#x27;Banana&#x27;, &#x27;Cherry&#x27;]</span><br></code></pre></td></tr></table></figure><hr><h2 id="✅-6-排序字典列表（企业常用）"><a href="#✅-6-排序字典列表（企业常用）" class="headerlink" title="✅ 6. 排序字典列表（企业常用）"></a>✅ 6. 排序字典列表（企业常用）</h2><h3 id="📌-示例-1：按年龄排序员工列表"><a href="#📌-示例-1：按年龄排序员工列表" class="headerlink" title="📌 示例 1：按年龄排序员工列表"></a><strong>📌 示例 1：按年龄排序员工列表</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">employees = [<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">30</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">25</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">35</span>&#125;<br>]<br><br><span class="hljs-comment"># 使用 key=lambda 获取字典中的 age 值</span><br>sorted_employees = <span class="hljs-built_in">sorted</span>(employees, key=<span class="hljs-keyword">lambda</span> emp: emp[<span class="hljs-string">&quot;age&quot;</span>])<br><span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> sorted_employees:<br>    <span class="hljs-built_in">print</span>(e[<span class="hljs-string">&quot;name&quot;</span>], e[<span class="hljs-string">&quot;age&quot;</span>])<br></code></pre></td></tr></table></figure><p>✅ 输出：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Bob</span> <span class="hljs-number">25</span><br><span class="hljs-attribute">Alice</span> <span class="hljs-number">30</span><br><span class="hljs-attribute">Tom</span> <span class="hljs-number">35</span><br></code></pre></td></tr></table></figure><hr><h3 id="📌-示例-2：按多个字段排序（先按年龄，再按姓名）"><a href="#📌-示例-2：按多个字段排序（先按年龄，再按姓名）" class="headerlink" title="📌 示例 2：按多个字段排序（先按年龄，再按姓名）"></a><strong>📌 示例 2：按多个字段排序（先按年龄，再按姓名）</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">employees = [<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">30</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">25</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">25</span>&#125;<br>]<br><br><span class="hljs-comment"># 多条件排序：先按 age 升序，再按 name 升序</span><br>sorted_employees = <span class="hljs-built_in">sorted</span>(employees, key=<span class="hljs-keyword">lambda</span> e: (e[<span class="hljs-string">&quot;age&quot;</span>], e[<span class="hljs-string">&quot;name&quot;</span>]))<br><span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> sorted_employees:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;e[<span class="hljs-string">&quot;name&quot;</span>]&#125;</span> - <span class="hljs-subst">&#123;e[<span class="hljs-string">&quot;age&quot;</span>]&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><h2 id="✅-7-复杂数据结构排序（企业实战）"><a href="#✅-7-复杂数据结构排序（企业实战）" class="headerlink" title="✅ 7. 复杂数据结构排序（企业实战）"></a>✅ 7. 复杂数据结构排序（企业实战）</h2><h3 id="📌-按文件大小排序（模拟文件信息）"><a href="#📌-按文件大小排序（模拟文件信息）" class="headerlink" title="📌 按文件大小排序（模拟文件信息）"></a><strong>📌 按文件大小排序（模拟文件信息）</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">files = [<br>    &#123;<span class="hljs-string">&quot;filename&quot;</span>: <span class="hljs-string">&quot;report.docx&quot;</span>, <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2400</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;filename&quot;</span>: <span class="hljs-string">&quot;data.xlsx&quot;</span>, <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">5000</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;filename&quot;</span>: <span class="hljs-string">&quot;image.png&quot;</span>, <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">3200</span>&#125;,<br>]<br><br><span class="hljs-comment"># 按 size 降序排序</span><br>largest_first = <span class="hljs-built_in">sorted</span>(files, key=<span class="hljs-keyword">lambda</span> f: f[<span class="hljs-string">&quot;size&quot;</span>], reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> largest_first:<br>    <span class="hljs-built_in">print</span>(f[<span class="hljs-string">&quot;filename&quot;</span>], f[<span class="hljs-string">&quot;size&quot;</span>])<br></code></pre></td></tr></table></figure><p>✅ 输出：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">data</span>.xlsx <span class="hljs-number">5000</span><br><span class="hljs-attribute">image</span>.png <span class="hljs-number">3200</span><br><span class="hljs-attribute">report</span>.docx <span class="hljs-number">2400</span><br></code></pre></td></tr></table></figure><hr><h2 id="✅-8-与自定义函数结合"><a href="#✅-8-与自定义函数结合" class="headerlink" title="✅ 8. 与自定义函数结合"></a>✅ 8. 与自定义函数结合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_last_digit</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-keyword">return</span> num % <span class="hljs-number">10</span><br><br>nums = [<span class="hljs-number">23</span>, <span class="hljs-number">41</span>, <span class="hljs-number">56</span>, <span class="hljs-number">77</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(nums, key=get_last_digit))  <span class="hljs-comment"># ✅ [41, 23, 56, 77]</span><br></code></pre></td></tr></table></figure><hr><h2 id="✅-9-使用-operator-模块简化排序"><a href="#✅-9-使用-operator-模块简化排序" class="headerlink" title="✅ 9. 使用 operator 模块简化排序"></a>✅ 9. 使用 <code>operator</code> 模块简化排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> operator <span class="hljs-keyword">import</span> itemgetter<br><br>employees = [<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">30</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">25</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">35</span>&#125;<br>]<br><br><span class="hljs-comment"># itemgetter(&#x27;age&#x27;) 等同于 lambda e: e[&#x27;age&#x27;]</span><br>sorted_list = <span class="hljs-built_in">sorted</span>(employees, key=itemgetter(<span class="hljs-string">&quot;age&quot;</span>))<br></code></pre></td></tr></table></figure><hr><h2 id="✅-10-不使用-sorted-的影响"><a href="#✅-10-不使用-sorted-的影响" class="headerlink" title="✅ 10. 不使用 sorted() 的影响"></a>✅ 10. 不使用 <code>sorted()</code> 的影响</h2><h3 id="❌-手动排序效率低-不安全"><a href="#❌-手动排序效率低-不安全" class="headerlink" title="❌ 手动排序效率低 &amp; 不安全"></a>❌ 手动排序效率低 &amp; 不安全</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 模拟手动排序逻辑（不推荐）</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(scores)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(scores)):<br>        <span class="hljs-keyword">if</span> scores[i] &gt; scores[j]:<br>            scores[i], scores[j] = scores[j], scores[i]<br></code></pre></td></tr></table></figure><p>🔴 问题：</p><ul><li>❌ 手写排序容易出错</li><li>❌ 可读性差</li><li>❌ 无法快速切换排序依据</li><li>✅ <code>sorted()</code> 性能优化好、支持多条件、key 定制灵活</li></ul><hr><h2 id="✅-11-函数式编程中的-sorted"><a href="#✅-11-函数式编程中的-sorted" class="headerlink" title="✅ 11. 函数式编程中的 sorted()"></a>✅ 11. 函数式编程中的 <code>sorted()</code></h2><p>结合 <code>map</code>、<code>filter</code>、<code>lambda</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">products = [<span class="hljs-string">&quot;book&quot;</span>, <span class="hljs-string">&quot;TV&quot;</span>, <span class="hljs-string">&quot;laptop&quot;</span>, <span class="hljs-string">&quot;pen&quot;</span>, <span class="hljs-string">&quot;speaker&quot;</span>]<br><span class="hljs-comment"># 过滤出长度 &gt; 3 的，并按字母排序</span><br>result = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">len</span>(x) &gt; <span class="hljs-number">3</span>, products))<br><span class="hljs-built_in">print</span>(result)  <span class="hljs-comment"># ✅ [&#x27;book&#x27;, &#x27;laptop&#x27;, &#x27;speaker&#x27;]</span><br></code></pre></td></tr></table></figure><hr><h2 id="✅-12-总结：sorted-的强大之处"><a href="#✅-12-总结：sorted-的强大之处" class="headerlink" title="✅ 12. 总结：sorted() 的强大之处"></a>✅ 12. 总结：<code>sorted()</code> 的强大之处</h2><table><thead><tr><th>功能</th><th>使用方式</th><th>优点</th></tr></thead><tbody><tr><td>基本排序</td><td><code>sorted(list)</code></td><td>升序、稳定排序</td></tr><tr><td>降序排序</td><td><code>sorted(list, reverse=True)</code></td><td>快速实现降序</td></tr><tr><td>自定义排序</td><td><code>key=lambda x: ...</code></td><td>灵活</td></tr><tr><td>多字段排序</td><td><code>key=lambda x: (a, b)</code></td><td>企业数据处理场景</td></tr><tr><td>不修改原始数据</td><td><code>返回新列表</code></td><td>更安全</td></tr><tr><td>可排序任意可迭代对象</td><td><code>dict, tuple, set</code>等</td><td>更通用</td></tr></tbody></table><hr><h3 id="✅-企业场景建议"><a href="#✅-企业场景建议" class="headerlink" title="✅ 企业场景建议"></a>✅ 企业场景建议</h3><table><thead><tr><th>场景</th><th>推荐方式</th></tr></thead><tbody><tr><td>排序列表中的数字或字符串</td><td><code>sorted(list)</code></td></tr><tr><td>对复杂对象如字典排序</td><td><code>key=lambda x: x[&quot;key&quot;]</code></td></tr><tr><td>多字段排序</td><td><code>key=lambda x: (x[&quot;a&quot;], x[&quot;b&quot;])</code></td></tr><tr><td>处理大数据列表</td><td><code>sorted()</code>+<code>key</code>+<code>reverse</code>组合</td></tr><tr><td>工具型模块</td><td>使用<code>operator.itemgetter</code>提高效率</td></tr></tbody></table><hr><p>🧠 ​<strong>记住</strong>​：<code>sorted()</code> 是 Python 数据处理的​<strong>必备工具</strong>​，写清楚排序逻辑，让你的代码更清晰、更安全、更优雅。掌握 <code>key</code> 和 <code>reverse</code>，你就掌握了数据排序的核心。</p><p>🚀 <strong>从现在开始，让你的排序从手动实现 → Pythonic 优雅！</strong></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python sorted函数介绍</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python sorted函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 反转字符串并按照长度排序</title>
    <link href="/2025/04/08/python%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2025/04/08/python%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-反转字符串并按照长度排序"><a href="#Python-反转字符串并按照长度排序" class="headerlink" title="Python 反转字符串并按照长度排序"></a>Python 反转字符串并按照长度排序</h1><h1 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h1><p>根据单词长度由高到低进行排序，相同长度的单词保持原顺序，首字母大写，<code>e.g. ，输入：I am a student，输出： Student am i a</code></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sort</span>(<span class="hljs-params">str_name</span>):<br>    <span class="hljs-keyword">if</span> str_name:<br>        str_name = str_name.split()<br>        str_name = <span class="hljs-built_in">sorted</span>(str_name, key=<span class="hljs-built_in">len</span>, reverse=<span class="hljs-literal">True</span>)<br>        str_name[<span class="hljs-number">0</span>] = str_name[<span class="hljs-number">0</span>].capitalize()<br>        <span class="hljs-built_in">print</span>(str_name)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27; &#x27;</span>.join(str_name)<br><br><br><span class="hljs-built_in">print</span>(sort(<span class="hljs-string">&quot;I am a student&quot;</span>))<br><br></code></pre></td></tr></table></figure><h1 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h1><p>这里首先使用<code>split</code> 进行按照空格分隔，从而生成列表，然后使用<code>sorted</code>函数实现按照<code>len</code>的长度并且反转输出，也就实现了题目的要求按照从高到低的顺序，然后我们将首字母实现大写使用的是<code>capitalize()</code>这个函数，最后使用<code>join</code>将其组装成一个新的句子输出！</p>]]></content>
    
    
    <categories>
      
      <category>面试题目搜集</category>
      
      <category>Python 算法题目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>互联网广告测试全面指南</title>
    <link href="/2025/04/02/%E4%B8%B4%E6%97%B6/"/>
    <url>/2025/04/02/%E4%B8%B4%E6%97%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="互联网广告测试全面指南"><a href="#互联网广告测试全面指南" class="headerlink" title="互联网广告测试全面指南"></a>互联网广告测试全面指南</h1><h1 id="互联网广告测试全面指南（企业实战）"><a href="#互联网广告测试全面指南（企业实战）" class="headerlink" title="互联网广告测试全面指南（企业实战）"></a><strong>互联网广告测试全面指南（企业实战）</strong></h1><h2 id="📌-1-互联网广告测试的核心目标"><a href="#📌-1-互联网广告测试的核心目标" class="headerlink" title="📌 1. 互联网广告测试的核心目标"></a><strong>📌 1. 互联网广告测试的核心目标</strong></h2><p>互联网广告测试的主要目的是​<strong>优化广告效果，提高ROI（投资回报率），确保广告系统稳定运行</strong>​。核心测试方向包括：</p><ul><li>​<strong>功能测试</strong>​：确保广告投放系统功能正常</li><li>​<strong>性能测试</strong>​：评估广告系统在高并发下的稳定性</li><li>​<strong>数据准确性测试</strong>​：验证广告曝光、点击、转化等数据的准确性</li><li>​<strong>用户体验测试</strong>​：检查广告在不同设备、浏览器上的展示效果</li><li>​<strong>AB测试</strong>​：优化广告内容，提高转化率</li><li>​<strong>安全与合规测试</strong>​：确保数据隐私、广告内容合法</li></ul><hr><h2 id="📌-2-互联网广告的关键测试类型"><a href="#📌-2-互联网广告的关键测试类型" class="headerlink" title="📌 2. 互联网广告的关键测试类型"></a><strong>📌 2. 互联网广告的关键测试类型</strong></h2><p>企业在广告投放过程中，通常会涉及以下几个方面的测试：</p><h3 id="🔹-2-1-功能测试"><a href="#🔹-2-1-功能测试" class="headerlink" title="🔹 2.1 功能测试"></a><strong>🔹 2.1 功能测试</strong></h3><p>确保广告投放平台的​<strong>基础功能完整可用</strong>​，主要包括：</p><table><thead><tr><th><strong>测试项</strong></th><th><strong>测试内容</strong></th></tr></thead><tbody><tr><td><strong>广告创建</strong></td><td>确保广告创建界面正常，支持各种广告类型（图文、视频、横幅等）</td></tr><tr><td><strong>广告投放规则</strong></td><td>按照地域、用户兴趣、关键词、设备类型等正确筛选用户</td></tr><tr><td><strong>预算与竞价</strong></td><td>预算消耗符合预期，竞价模式（CPC、CPM、CPA）正常运行</td></tr><tr><td><strong>广告审核流程</strong></td><td>确保违规广告能够被自动&#x2F;人工审核拒绝</td></tr><tr><td><strong>广告展示</strong></td><td>在指定页面正确展示广告，不影响页面布局</td></tr><tr><td><strong>点击跳转</strong></td><td>确保点击广告后跳转到正确的目标页面（落地页）</td></tr><tr><td><strong>广告关闭</strong></td><td>关闭广告按钮正常工作，不影响用户体验</td></tr></tbody></table><hr><h3 id="🔹-2-2-广告数据准确性测试"><a href="#🔹-2-2-广告数据准确性测试" class="headerlink" title="🔹 2.2 广告数据准确性测试"></a><strong>🔹 2.2 广告数据准确性测试</strong></h3><p>确保广告数据采集​<strong>真实、准确、无误</strong>​，包括：</p><table><thead><tr><th><strong>测试项</strong></th><th><strong>测试内容</strong></th></tr></thead><tbody><tr><td><strong>曝光数据</strong></td><td>确保每次广告展示均被记录（匹配浏览器控制台 Network 请求）</td></tr><tr><td><strong>点击数据</strong></td><td>点击数与日志记录、分析平台（GA、Firebase等）数据一致</td></tr><tr><td><strong>转化数据</strong></td><td>计算转化率（购买、注册、表单提交等）是否合理</td></tr><tr><td><strong>PV &#x2F; UV</strong></td><td>统计广告投放页面的访问次数与独立访客数</td></tr><tr><td><strong>Cookie &amp; User ID</strong></td><td>确保用户标识正确，不重复计算</td></tr></tbody></table><p>✅ ​<strong>测试方法</strong>​：</p><ul><li>​<strong>对比日志 &amp; 数据库记录</strong>​：手动&#x2F;自动验证广告日志与数据库数据是否一致</li><li>​<strong>日志埋点 &amp; A&#x2F;B 测试</strong>​：使用 Google Tag Manager、Mixpanel、Adobe Analytics 等监控</li><li>​<strong>异常数据检测</strong>​：检查数据是否有异常突增或下降</li></ul><hr><h3 id="🔹-2-3-性能测试"><a href="#🔹-2-3-性能测试" class="headerlink" title="🔹 2.3 性能测试"></a><strong>🔹 2.3 性能测试</strong></h3><p>评估广告投放系统的高并发处理能力、加载速度等：</p><table><thead><tr><th><strong>测试项</strong></th><th><strong>测试内容</strong></th></tr></thead><tbody><tr><td><strong>广告系统负载</strong></td><td>并发投放1W+广告是否影响系统响应</td></tr><tr><td><strong>广告加载速度</strong></td><td>确保广告在1秒内加载完成</td></tr><tr><td><strong>CDN缓存</strong></td><td>静态广告资源是否正确使用CDN缓存</td></tr><tr><td><strong>API性能</strong></td><td>投放 API、曝光 API、点击 API 是否稳定</td></tr></tbody></table><p>✅ ​<strong>测试工具</strong>​：</p><ul><li>​<strong>JMeter &#x2F; Locust</strong>​：模拟大规模并发流量</li><li>​<strong>Lighthouse &#x2F; WebPageTest</strong>​：测试广告加载速度</li></ul><hr><h3 id="🔹-2-4-兼容性测试"><a href="#🔹-2-4-兼容性测试" class="headerlink" title="🔹 2.4 兼容性测试"></a><strong>🔹 2.4 兼容性测试</strong></h3><p>广告投放要确保<strong>不同设备、不同浏览器、不同网络环境</strong>下都能正常展示：</p><table><thead><tr><th><strong>测试项</strong></th><th><strong>测试内容</strong></th></tr></thead><tbody><tr><td><strong>跨浏览器</strong></td><td>Chrome &#x2F; Safari &#x2F; Firefox &#x2F; Edge 兼容性测试</td></tr><tr><td><strong>移动端适配</strong></td><td>iOS &#x2F; Android 手机、平板的广告展示效果</td></tr><tr><td><strong>网络环境</strong></td><td>2G&#x2F;3G&#x2F;4G&#x2F;5G&#x2F;WiFi 下广告加载情况</td></tr></tbody></table><p>✅ ​<strong>测试工具</strong>​：</p><ul><li>​<strong>BrowserStack &#x2F; SauceLabs</strong>​：跨浏览器测试</li><li>​<strong>Fiddler &#x2F; Charles</strong>​：测试广告请求是否正常返回</li></ul><hr><h3 id="🔹-2-5-用户体验测试"><a href="#🔹-2-5-用户体验测试" class="headerlink" title="🔹 2.5 用户体验测试"></a><strong>🔹 2.5 用户体验测试</strong></h3><p>广告需要平衡<strong>商业目标</strong>与​<strong>用户体验</strong>​，避免广告影响用户浏览：</p><table><thead><tr><th><strong>测试项</strong></th><th><strong>测试内容</strong></th></tr></thead><tbody><tr><td><strong>广告频次控制</strong></td><td>同一用户一天内不会看到过多相同广告</td></tr><tr><td><strong>广告侵入性</strong></td><td>避免广告挡住主页面内容或难以关闭</td></tr><tr><td><strong>交互体验</strong></td><td>用户能方便地查看广告详情、返回主页面</td></tr></tbody></table><p>✅ ​<strong>用户反馈</strong>​：</p><ul><li>进行​<strong>问卷调查</strong>​，收集用户对广告体验的反馈</li><li>监控​<strong>广告点击率、跳出率</strong>​，优化广告投放策略</li></ul><hr><h3 id="🔹-2-6-AB测试（广告优化）"><a href="#🔹-2-6-AB测试（广告优化）" class="headerlink" title="🔹 2.6 AB测试（广告优化）"></a><strong>🔹 2.6 AB测试（广告优化）</strong></h3><p>A&#x2F;B 测试可以​<strong>优化广告内容，提高转化率</strong>​：</p><table><thead><tr><th><strong>测试项</strong></th><th><strong>测试内容</strong></th></tr></thead><tbody><tr><td><strong>不同文案对比</strong></td><td>例如 A 广告：“买1送1”，B 广告：“限时8折”</td></tr><tr><td><strong>图片 vs 视频</strong></td><td>观察图片广告和视频广告的效果对比</td></tr><tr><td><strong>CTA 按钮颜色</strong></td><td>测试不同颜色的按钮对点击率的影响</td></tr><tr><td><strong>落地页优化</strong></td><td>设计不同的落地页（长 vs 短）对转化率的影响</td></tr></tbody></table><p>✅ ​<strong>测试工具</strong>​：</p><ul><li><strong>Google Optimize</strong></li><li><strong>Optimizely</strong></li><li><strong>Adobe Target</strong></li></ul><hr><h3 id="🔹-2-7-安全-反作弊测试"><a href="#🔹-2-7-安全-反作弊测试" class="headerlink" title="🔹 2.7 安全 &amp; 反作弊测试"></a><strong>🔹 2.7 安全 &amp; 反作弊测试</strong></h3><p>防止恶意点击、广告欺诈：</p><table><thead><tr><th><strong>测试项</strong></th><th><strong>测试内容</strong></th></tr></thead><tbody><tr><td><strong>点击欺诈</strong></td><td>检测同一IP短时间多次点击</td></tr><tr><td><strong>爬虫拦截</strong></td><td>过滤非正常访问</td></tr><tr><td><strong>恶意广告拦截</strong></td><td>防止投放带有病毒、色情、赌博等内容的广告</td></tr></tbody></table><p>✅ ​<strong>测试工具</strong>​：</p><ul><li><strong>Google reCAPTCHA</strong></li><li><strong>AWS WAF</strong></li><li><strong>第三方反作弊服务（如 White Ops）</strong></li></ul><hr><h2 id="📌-3-互联网广告测试的最佳实践"><a href="#📌-3-互联网广告测试的最佳实践" class="headerlink" title="📌 3. 互联网广告测试的最佳实践"></a><strong>📌 3. 互联网广告测试的最佳实践</strong></h2><p>✅ <strong>1. 采用自动化测试</strong></p><ul><li>使用 <strong>Selenium &#x2F; Cypress</strong> 进行广告展示、跳转等自动化测试</li><li>使用 <strong>Postman &#x2F; RestAssured</strong> 测试广告 API 接口</li></ul><p>✅ <strong>2. 数据监控</strong></p><ul><li><strong>使用 ELK &#x2F; Prometheus</strong> 监控广告数据异常</li><li><strong>对接 Google Analytics &#x2F; Firebase</strong> 进行数据分析</li></ul><p>✅ <strong>3. 持续优化</strong></p><ul><li>​<strong>定期调整投放策略</strong>​（基于 A&#x2F;B 测试结果）</li><li><strong>减少广告干扰，提高用户体验</strong></li></ul><p>✅ <strong>4. 定期进行安全审计</strong></p><ul><li><strong>防止恶意广告投放</strong></li><li><strong>监测用户隐私合规性（GDPR、CCPA）</strong></li></ul><hr><h2 id="📌-4-结论"><a href="#📌-4-结论" class="headerlink" title="📌 4. 结论"></a><strong>📌 4. 结论</strong></h2><p>互联网广告测试覆盖<strong>功能、数据、性能、安全、用户体验、优化</strong>等多个维度。企业在进行广告测试时，应结合<strong>自动化测试、数据分析、A&#x2F;B测试、安全防护</strong>等方法，确保广告投放精准、高效、合规。</p><p>💡 ​<strong>企业实战建议</strong>​：</p><ul><li><strong>测试从广告创建到投放的全流程</strong></li><li><strong>使用自动化工具提高测试效率</strong></li><li><strong>基于数据分析持续优化广告效果</strong></li></ul><p>🚀 <strong>良好的广告测试可以大幅提升 ROI，让广告投放更精准、更有效！</strong></p><h1 id="竞价模式（CPC、CPM、CPA）详细介绍"><a href="#竞价模式（CPC、CPM、CPA）详细介绍" class="headerlink" title="竞价模式（CPC、CPM、CPA）详细介绍"></a><strong>竞价模式（CPC、CPM、CPA）详细介绍</strong></h1><p>在互联网广告投放中，竞价模式是广告主支付广告费用的基础方式。常见的竞价模式包括<strong>CPC（Cost Per Click）、CPM（Cost Per Mille）、CPA（Cost Per Action）</strong>，它们分别适用于不同的广告投放目标。下面详细介绍这三种模式的概念、计算方式、优缺点及适用场景。  </p><hr><h2 id="1-CPC（Cost-Per-Click，按点击付费）"><a href="#1-CPC（Cost-Per-Click，按点击付费）" class="headerlink" title="1. CPC（Cost Per Click，按点击付费）"></a><strong>1. CPC（Cost Per Click，按点击付费）</strong></h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a><strong>1.1 概念</strong></h3><p>CPC（按点击付费）是一种以<strong>广告被用户点击的次数</strong>来计费的模式。广告主只有在用户点击广告时才需要支付费用，而不管广告展示了多少次。  </p><h3 id="1-2-计算公式"><a href="#1-2-计算公式" class="headerlink" title="1.2 计算公式"></a><strong>1.2 计算公式</strong></h3><p>[<br>\text{广告费用} &#x3D; \text{点击次数} \times \text{CPC单价}<br>]</p><p>例如，如果CPC单价是<strong>1元</strong>，广告被点击了<strong>100次</strong>，那么广告主需要支付的费用是：<br>[<br>100 \times 1 &#x3D; 100 \text{元}<br>]</p><h3 id="1-3-优缺点"><a href="#1-3-优缺点" class="headerlink" title="1.3 优缺点"></a><strong>1.3 优缺点</strong></h3><p>✅ <strong>优点</strong>：</p><ul><li>适用于<strong>转化率高的广告</strong>（如电商、应用下载）。</li><li><strong>精准投放</strong>，广告主只为有效的点击付费，减少无效曝光的成本。  </li><li>适合<strong>竞价排名</strong>（如Google Ads、百度竞价广告）。</li></ul><p>❌ <strong>缺点</strong>：</p><ul><li><strong>点击欺诈风险</strong>：部分恶意竞争者可能通过点击广告增加广告主成本。</li><li><strong>转化不稳定</strong>：点击后用户不一定会完成购买或注册，可能造成成本浪费。</li></ul><h3 id="1-4-适用场景"><a href="#1-4-适用场景" class="headerlink" title="1.4 适用场景"></a><strong>1.4 适用场景</strong></h3><ul><li><strong>搜索广告（SEM）</strong>：如Google Ads、百度推广，用户在搜索关键词后会看到广告，点击后跳转到广告主的网站。  </li><li><strong>电商广告</strong>：适用于淘宝直通车、京东快车等，以吸引精准用户点击并完成购买。  </li><li><strong>社交广告</strong>：如Facebook Ads、微博广告，用户看到广告后点击进入商家主页或落地页。</li></ul><hr><h2 id="2-CPM（Cost-Per-Mille，按展示付费）"><a href="#2-CPM（Cost-Per-Mille，按展示付费）" class="headerlink" title="2. CPM（Cost Per Mille，按展示付费）"></a><strong>2. CPM（Cost Per Mille，按展示付费）</strong></h2><h3 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a><strong>2.1 概念</strong></h3><p>CPM（按千次展示付费）是一种<strong>按广告被展示的次数</strong>来计费的模式，广告主不管用户是否点击广告，只要广告被曝光就需要付费。  </p><h3 id="2-2-计算公式"><a href="#2-2-计算公式" class="headerlink" title="2.2 计算公式"></a><strong>2.2 计算公式</strong></h3><p>[<br>\text{广告费用} &#x3D; \frac{\text{展示次数} \times \text{CPM单价}}{1000}<br>]</p><p>例如，如果CPM单价是<strong>10元</strong>，广告展示了<strong>100,000次</strong>，那么广告主的费用计算如下：<br>[<br>\frac{100,000 \times 10}{1000} &#x3D; 1000 \text{元}<br>]</p><h3 id="2-3-优缺点"><a href="#2-3-优缺点" class="headerlink" title="2.3 优缺点"></a><strong>2.3 优缺点</strong></h3><p>✅ <strong>优点</strong>：</p><ul><li>适用于<strong>品牌曝光</strong>，有助于提高品牌知名度和影响力。</li><li>适合<strong>展示类广告</strong>，如横幅广告、信息流广告。  </li><li>费用相对稳定，避免了恶意点击的问题。</li></ul><p>❌ <strong>缺点</strong>：</p><ul><li><strong>转化率较低</strong>，可能会有大量用户看到广告但不点击，导致投资回报率（ROI）不稳定。  </li><li><strong>对精准投放要求较高</strong>，如果投放策略不佳，可能会浪费预算。</li></ul><h3 id="2-4-适用场景"><a href="#2-4-适用场景" class="headerlink" title="2.4 适用场景"></a><strong>2.4 适用场景</strong></h3><ul><li><strong>品牌广告</strong>：适用于需要增加品牌曝光度的企业，如奢侈品、汽车、金融等行业。  </li><li><strong>社交媒体广告</strong>：如Facebook、Instagram、微博的广告推送，主要目的是增加用户触达率。  </li><li><strong>视频广告</strong>：如YouTube前贴片广告，广告主只需按展示次数付费。</li></ul><hr><h2 id="3-CPA（Cost-Per-Action，按转化付费）"><a href="#3-CPA（Cost-Per-Action，按转化付费）" class="headerlink" title="3. CPA（Cost Per Action，按转化付费）"></a><strong>3. CPA（Cost Per Action，按转化付费）</strong></h2><h3 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a><strong>3.1 概念</strong></h3><p>CPA（按转化付费）是一种<strong>以用户完成特定目标（转化）</strong>来计费的模式，只有当用户完成<strong>购买、注册、下载、填写表单</strong>等行为后，广告主才需要支付费用。  </p><h3 id="3-2-计算公式"><a href="#3-2-计算公式" class="headerlink" title="3.2 计算公式"></a><strong>3.2 计算公式</strong></h3><p>[<br>\text{广告费用} &#x3D; \text{转化次数} \times \text{CPA单价}<br>]</p><p>例如，如果CPA单价是<strong>50元</strong>，广告带来了<strong>10个注册用户</strong>，那么广告费用为：<br>[<br>10 \times 50 &#x3D; 500 \text{元}<br>]</p><h3 id="3-3-优缺点"><a href="#3-3-优缺点" class="headerlink" title="3.3 优缺点"></a><strong>3.3 优缺点</strong></h3><p>✅ <strong>优点</strong>：</p><ul><li>广告主只需为<strong>有效用户付费</strong>，降低无效点击成本。  </li><li>适用于电商、应用推广等需要<strong>实际成交</strong>的业务模式。  </li><li>ROI（投资回报率）更稳定，可预测。</li></ul><p>❌ <strong>缺点</strong>：</p><ul><li><strong>转化成本较高</strong>，比CPC&#x2F;CPM模式更贵。  </li><li><strong>转化数据监测要求高</strong>，需要配合<strong>转化跟踪工具</strong>（如Google Analytics、Facebook Pixel）。  </li><li><strong>适用行业有限</strong>，对于品牌推广类广告不太适合。</li></ul><h3 id="3-4-适用场景"><a href="#3-4-适用场景" class="headerlink" title="3.4 适用场景"></a><strong>3.4 适用场景</strong></h3><ul><li><strong>电商推广</strong>：如京东、淘宝的<strong>按成交付费</strong>（CPS，Cost Per Sale）。  </li><li><strong>应用下载</strong>：App Store 和 Google Play 广告，只有当用户下载并安装应用后才计费。  </li><li><strong>金融行业</strong>：如信用卡申请、贷款申请等，用户提交表单或完成开户后广告主才付费。</li></ul><hr><h1 id="4-CPC、CPM、CPA对比总结"><a href="#4-CPC、CPM、CPA对比总结" class="headerlink" title="4. CPC、CPM、CPA对比总结"></a><strong>4. CPC、CPM、CPA对比总结</strong></h1><table><thead><tr><th>竞价模式</th><th>计费方式</th><th>计算方式</th><th>适用场景</th><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td><strong>CPC（按点击付费）</strong></td><td>用户点击广告时计费</td><td>总费用 &#x3D; 点击次数 × CPC单价</td><td>搜索广告、电商广告、社交广告</td><td>精准投放、节省预算</td><td>可能被恶意点击、转化率不稳定</td></tr><tr><td><strong>CPM（按展示付费）</strong></td><td>每展示1000次计费</td><td>总费用 &#x3D;（展示次数 × CPM单价）&#x2F;1000</td><td>品牌推广、视频广告、社交媒体广告</td><td>增强品牌曝光、成本可控</td><td>点击率低、转化率难预测</td></tr><tr><td><strong>CPA（按转化付费）</strong></td><td>用户完成特定动作后计费</td><td>总费用 &#x3D; 转化次数 × CPA单价</td><td>电商、应用下载、金融行业</td><td>费用精准、ROI可控</td><td>成本较高、数据监测要求高</td></tr></tbody></table><hr><h1 id="5-选择哪种模式？"><a href="#5-选择哪种模式？" class="headerlink" title="5. 选择哪种模式？"></a><strong>5. 选择哪种模式？</strong></h1><ol><li><strong>如果目标是获取流量，提高网站点击率</strong> → 选择 <strong>CPC</strong></li><li><strong>如果目标是品牌曝光，提高知名度</strong> → 选择 <strong>CPM</strong></li><li><strong>如果目标是获取高质量用户，提升转化率</strong> → 选择 <strong>CPA</strong></li></ol><h3 id="最终建议"><a href="#最终建议" class="headerlink" title="最终建议"></a><strong>最终建议</strong></h3><ul><li><strong>短期</strong>：若预算有限，可先选择 <strong>CPC</strong>，精准获取流量。  </li><li><strong>长期</strong>：如果品牌推广为主，可采用 <strong>CPM</strong>。  </li><li><strong>高ROI目标</strong>：对转化要求高的业务，如金融、电商，则选 <strong>CPA</strong>。</li></ul><hr><p>💡 <strong>总结</strong>：不同的竞价模式适用于不同的广告目标，广告主需要根据<strong>自身预算、推广目标和用户群体</strong>选择合适的竞价模式，以最大化广告效果和ROI。</p>]]></content>
    
    
    <categories>
      
      <category>测试常见问题</category>
      
      <category>广告测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>广告测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python中的类方法和静态方法以及普通实例方法的区别</title>
    <link href="/2025/03/31/python%E7%B1%BB%E6%96%B9%E6%B3%95%E5%92%8C%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95/"/>
    <url>/2025/03/31/python%E7%B1%BB%E6%96%B9%E6%B3%95%E5%92%8C%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Python中的类方法和静态方法以及普通实例方法的区别"><a href="#Python中的类方法和静态方法以及普通实例方法的区别" class="headerlink" title="Python中的类方法和静态方法以及普通实例方法的区别"></a>Python中的类方法和静态方法以及普通实例方法的区别</h1><p>在 <code>Python</code> 中，类方法<code>（@classmethod）</code>和静态方法<code>（@staticmethod）</code>是两种常见的方法修饰符，它们与普通的实例方法不同。掌握它们有助于编写更加清晰、结构化、可复用的代码，在企业级开发中应用广泛。</p><h1 id="Python-中的三种方法"><a href="#Python-中的三种方法" class="headerlink" title="Python 中的三种方法"></a>Python 中的三种方法</h1><table><thead><tr><th>方法类型</th><th>定义方式</th><th>作用</th><th>访问权限</th></tr></thead><tbody><tr><td><strong>实例方法</strong></td><td><code>def method(self)</code></td><td>作用于​<strong>实例</strong>​，可以访问<code>self</code></td><td>访问<strong>实例变量</strong>和<strong>类变量</strong></td></tr><tr><td><strong>类方法</strong></td><td><code>@classmethod def method(cls)</code></td><td>作用于​<strong>类</strong>​，可以访问<code>cls</code></td><td>访问​<strong>类变量</strong>​，但不能访问实例变量</td></tr><tr><td><strong>静态方法</strong></td><td><code>@staticmethod def method()</code></td><td>仅是​<strong>普通函数</strong>​，与类无直接关系</td><td><strong>不能</strong>访问实例变量和类变量</td></tr></tbody></table><h1 id="实例方法（Instance-Method）"><a href="#实例方法（Instance-Method）" class="headerlink" title="实例方法（Instance Method）"></a>实例方法（Instance Method）</h1><p>📌 实例方法是最常见的方法，它属于某个对象（实例），可以访问实例变量 <code>(self.attribute) </code>和类变量 <code>(self.__class__.attribute)</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, salary</span>):<br>        self.name = name  <span class="hljs-comment"># 实例变量</span><br>        self.salary = salary  <span class="hljs-comment"># 实例变量</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_info</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 实例方法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;员工: <span class="hljs-subst">&#123;self.name&#125;</span>, 薪资: <span class="hljs-subst">&#123;self.salary&#125;</span>&quot;</span><br><br><span class="hljs-comment"># 创建对象</span><br>emp1 = Employee(<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">5000</span>)<br><br><span class="hljs-comment"># 调用实例方法</span><br><span class="hljs-built_in">print</span>(emp1.get_info())  <span class="hljs-comment"># ✅ 输出: 员工: Alice, 薪资: 5000</span><br><br></code></pre></td></tr></table></figure><p>🔹 特点</p><p>🟢需要 <code>self</code> 作为第一个参数，指向当前实例。<br>🟢只能通过对象调用，不能直接用类调用。<br>🟢可以访问实例变量，也可以访问类变量。</p><h1 id="类方法（-classmethod）"><a href="#类方法（-classmethod）" class="headerlink" title="类方法（@classmethod）"></a>类方法（@classmethod）</h1><p>📌 类方法作用于类，而非实例，可以访问和修改类变量，但无法访问实例变量。使用 <code>@classmethod</code> 装饰器，并且第一个参数 <code>cls</code> 代表类本身。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>:<br>    company = <span class="hljs-string">&quot;Tech Corp&quot;</span>  <span class="hljs-comment"># 类变量</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, salary</span>):<br>        self.name = name<br>        self.salary = salary<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_company</span>(<span class="hljs-params">cls, new_name</span>):<br>        cls.company = new_name  <span class="hljs-comment"># 修改类变量</span><br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_company</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-keyword">return</span> cls.company<br><br><span class="hljs-comment"># 调用类方法</span><br><span class="hljs-built_in">print</span>(Employee.get_company())  <span class="hljs-comment"># ✅ Tech Corp</span><br>Employee.set_company(<span class="hljs-string">&quot;NewTech&quot;</span>)<br><span class="hljs-built_in">print</span>(Employee.get_company())  <span class="hljs-comment"># ✅ NewTech</span><br><br></code></pre></td></tr></table></figure><p>🔹 特点</p><p>🟢需要 @classmethod 装饰器，第一个参数 cls 代表类本身。<br>🟢通过 cls 访问和修改类变量，而不能访问实例变量。<br>🟢可以通过类调用，也可以通过实例调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">emp = Employee(<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-number">4000</span>)<br><span class="hljs-built_in">print</span>(emp.get_company())  <span class="hljs-comment"># ✅ 也能调用</span><br></code></pre></td></tr></table></figure><h1 id="静态方法（-staticmethod）"><a href="#静态方法（-staticmethod）" class="headerlink" title="静态方法（@staticmethod）"></a>静态方法（@staticmethod）</h1><p>📌 静态方法独立于类和实例，只是类中的一个普通函数，它不会访问 <code>self</code> 或 <code>cls</code>，因此不能访问实例变量和类变量。使用 <code>@staticmethod</code> 装饰器，不需要 <code>self</code> 或 <code>cls</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MathUtils</span>:<br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):<br>        <span class="hljs-keyword">return</span> x + y<br><br><span class="hljs-comment"># 直接通过类名调用</span><br><span class="hljs-built_in">print</span>(MathUtils.add(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>))  <span class="hljs-comment"># ✅ 输出: 8</span><br><br></code></pre></td></tr></table></figure><p>🔹 特点</p><p>🟢需要 <code>@staticmethod</code> 装饰器。<br>🟢不能访问 <code>self</code> 和 <code>cls</code>，即不能访问实例变量或类变量。<br>🟢既可以通过类名调用，也可以通过实例调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">math_util = MathUtils()<br><span class="hljs-built_in">print</span>(math_util.add(<span class="hljs-number">4</span>, <span class="hljs-number">6</span>))  <span class="hljs-comment"># ✅ 输出: 10</span><br></code></pre></td></tr></table></figure><h1 id="三者的对比"><a href="#三者的对比" class="headerlink" title="三者的对比"></a>三者的对比</h1><table><thead><tr><th>方法类型</th><th><code>self</code></th><th><code>cls</code></th><th>访问实例变量</th><th>访问类变量</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>实例方法</strong></td><td>✅</td><td>❌</td><td>✅</td><td>✅</td><td>需要操作实例数据</td></tr><tr><td><strong>类方法</strong></td><td>❌</td><td>✅</td><td>❌</td><td>✅</td><td>需要操作类数据（如修改类变量）</td></tr><tr><td><strong>静态方法</strong></td><td>❌</td><td>❌</td><td>❌</td><td>❌</td><td>与实例和类无关的工具方法</td></tr></tbody></table><h1 id="企业实战案例"><a href="#企业实战案例" class="headerlink" title="企业实战案例"></a>企业实战案例</h1><p>🔹 通过类方法创建对象</p><p>📌 在企业开发中，我们通常需要不同的方式创建对象，例如从数据库、<code>JSON</code> 文件等获取数据。这时可以使用 <code>@classmethod</code> 作为工厂方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, salary</span>):<br>        self.name = name<br>        self.salary = salary<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">from_string</span>(<span class="hljs-params">cls, emp_str</span>):<br>        name, salary = emp_str.split(<span class="hljs-string">&quot;-&quot;</span>)<br>        <span class="hljs-keyword">return</span> cls(name, <span class="hljs-built_in">int</span>(salary))  <span class="hljs-comment"># 通过类方法创建对象</span><br><br><span class="hljs-comment"># 通过类方法创建对象</span><br>emp = Employee.from_string(<span class="hljs-string">&quot;Alice-6000&quot;</span>)<br><span class="hljs-built_in">print</span>(emp.name, emp.salary)  <span class="hljs-comment"># ✅ Alice 6000</span><br><br></code></pre></td></tr></table></figure><p>🔹 统计实例个数（类方法）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>:<br>    count = <span class="hljs-number">0</span>  <span class="hljs-comment"># 统计员工数量</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        self.name = name<br>        Employee.count += <span class="hljs-number">1</span><br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_count</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-keyword">return</span> cls.count<br><br><span class="hljs-comment"># 创建多个员工</span><br>emp1 = Employee(<span class="hljs-string">&quot;Alice&quot;</span>)<br>emp2 = Employee(<span class="hljs-string">&quot;Bob&quot;</span>)<br><br><span class="hljs-comment"># 获取员工总数</span><br><span class="hljs-built_in">print</span>(Employee.get_count())  <span class="hljs-comment"># ✅ 2</span><br><br></code></pre></td></tr></table></figure><p>🔹 使用静态方法实现日期校验</p><p>📌 在企业开发中，我们可能需要一些通用工具函数，如日期校验。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DateUtils</span>:<br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_valid_date</span>(<span class="hljs-params">date_str</span>):<br>        <span class="hljs-keyword">try</span>:<br>            datetime.strptime(date_str, <span class="hljs-string">&quot;%Y-%m-%d&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">except</span> ValueError:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 调用静态方法</span><br><span class="hljs-built_in">print</span>(DateUtils.is_valid_date(<span class="hljs-string">&quot;2024-03-31&quot;</span>))  <span class="hljs-comment"># ✅ True</span><br><span class="hljs-built_in">print</span>(DateUtils.is_valid_date(<span class="hljs-string">&quot;2024-02-30&quot;</span>))  <span class="hljs-comment"># ✅ False</span><br><br></code></pre></td></tr></table></figure><h1 id="什么时候用类方法-vs-静态方法？"><a href="#什么时候用类方法-vs-静态方法？" class="headerlink" title="什么时候用类方法 vs 静态方法？"></a>什么时候用类方法 vs 静态方法？</h1><table><thead><tr><th><strong>场景</strong></th><th><strong>类方法（@classmethod）</strong></th><th><strong>静态方法（@staticmethod）</strong></th></tr></thead><tbody><tr><td>需要访问&#x2F;修改类变量</td><td>✅</td><td>❌</td></tr><tr><td>需要创建对象的工厂方法</td><td>✅</td><td>❌</td></tr><tr><td>只执行独立逻辑，不访问类或实例</td><td>❌</td><td>✅</td></tr><tr><td>需要访问实例变量</td><td>❌</td><td>❌</td></tr></tbody></table><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>✅ 实例方法<code>（self）</code>：操作实例数据，访问实例变量。<br>✅ 类方法<code>（cls）</code>：操作类数据，访问和修改类变量。<br>✅ 静态方法（无 <code>self</code> 和 <code>cls</code>）：工具函数，与实例和类无关。</p><p>💡 企业级开发建议</p><p>🟢需要修改类变量 ➝ 用 <code>@classmethod</code><br>🟢工具方法，不依赖类和实例 ➝ 用<code> @staticmethod</code><br>🟢操作实例变量 ➝ 用普通方法</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python中的类方法和静态方法以及普通实例方法的区别</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 函数的 -&gt; 及参数的强类型注解详解</title>
    <link href="/2025/03/28/Python%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E5%BC%BA%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3%E8%AF%A6%E8%A7%A3/"/>
    <url>/2025/03/28/Python%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E5%BC%BA%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-函数的-及参数的强类型注解详解"><a href="#Python-函数的-及参数的强类型注解详解" class="headerlink" title="Python 函数的 -&gt; 及参数的强类型注解详解"></a>Python 函数的 -&gt; 及参数的强类型注解详解</h1><h1 id="什么是类型注解？"><a href="#什么是类型注解？" class="headerlink" title="什么是类型注解？"></a>什么是类型注解？</h1><p>📌 <code>Python</code> 从 3.5 开始支持类型注解<code>（Type Hinting）</code>，用于指定函数参数和返回值的类型，使代码更可读、可维护，并可使用 <code>mypy</code> 等工具进行静态类型检查。</p><p>💡 语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">函数名</span>(<span class="hljs-params">参数<span class="hljs-number">1</span>: 类型, 参数<span class="hljs-number">2</span>: 类型</span>) -&gt; 返回类型:<br>    代码块<br></code></pre></td></tr></table></figure><p>🔹 示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x: <span class="hljs-built_in">int</span>, y: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">return</span> x + y<br></code></pre></td></tr></table></figure><p>✅ 这里 <code>x: int </code>和 <code>y: int </code>指定参数类型，<code>-&gt; int </code>指定返回值类型。</p><h1 id="为什么要使用类型注解？"><a href="#为什么要使用类型注解？" class="headerlink" title="为什么要使用类型注解？"></a>为什么要使用类型注解？</h1><table><thead><tr><th>特点</th><th>无类型注解</th><th>有类型注解</th></tr></thead><tbody><tr><td>代码可读性</td><td>低</td><td>高</td></tr><tr><td>静态错误检测</td><td>❌ 运行时报错</td><td>✅ 提前检查</td></tr><tr><td>IDE 支持</td><td>较差，提示不精准</td><td>✅ 自动补全更准确</td></tr><tr><td>适用于大型项目</td><td>❌ 维护困难</td><td>✅ 代码更稳定</td></tr></tbody></table><h1 id="基础类型注解"><a href="#基础类型注解" class="headerlink" title="基础类型注解"></a>基础类型注解</h1><p>📌 <code>Python</code> 中常见的类型：</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>注解方式</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>整数</td><td><code>int</code></td><td><code>x: int = 10</code></td></tr><tr><td>浮点数</td><td><code>float</code></td><td><code>y: float = 3.14</code></td></tr><tr><td>字符串</td><td><code>str</code></td><td><code>name: str = &quot;Tom&quot;</code></td></tr><tr><td>布尔值</td><td><code>bool</code></td><td><code>flag: bool = True</code></td></tr><tr><td>列表</td><td><code>List[类型]</code></td><td><code>scores: List[int] = [90, 80, 70]</code></td></tr><tr><td>元组</td><td><code>Tuple[类型1, 类型2]</code></td><td><code>data: Tuple[int, str] = (1, &quot;hello&quot;)</code></td></tr><tr><td>字典</td><td><code>Dict[键类型, 值类型]</code></td><td><code>info: Dict[str, int] = &#123;&quot;age&quot;: 25&#125;</code></td></tr><tr><td>集合</td><td><code>Set[类型]</code></td><td><code>nums: Set[int] = &#123;1, 2, 3&#125;</code></td></tr></tbody></table><h1 id="进阶：可选参数-Optional"><a href="#进阶：可选参数-Optional" class="headerlink" title="进阶：可选参数 (Optional)"></a>进阶：可选参数 (Optional)</h1><p>📌 有些参数可能是 <code>None</code>，可以使用 <code>Optional</code>（等价于 <code>Union[类型, None]</code>）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_username</span>(<span class="hljs-params">user_id: <span class="hljs-built_in">int</span>, nickname: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-keyword">return</span> nickname <span class="hljs-keyword">if</span> nickname <span class="hljs-keyword">else</span> <span class="hljs-string">f&quot;User-<span class="hljs-subst">&#123;user_id&#125;</span>&quot;</span><br><br><span class="hljs-built_in">print</span>(get_username(<span class="hljs-number">1</span>))  <span class="hljs-comment"># ✅ 输出: User-1</span><br><span class="hljs-built_in">print</span>(get_username(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;Tom&quot;</span>))  <span class="hljs-comment"># ✅ 输出: Tom</span><br><br></code></pre></td></tr></table></figure><h1 id="进阶：多个返回类型（Union）"><a href="#进阶：多个返回类型（Union）" class="headerlink" title="进阶：多个返回类型（Union）"></a>进阶：多个返回类型（Union）</h1><p>📌 如果函数可能返回多种类型，如 <code>int</code> 或 <code>str</code>，可以使用 <code>Union</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Union</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_discount</span>(<span class="hljs-params">price: <span class="hljs-built_in">float</span></span>) -&gt; <span class="hljs-type">Union</span>[<span class="hljs-built_in">float</span>, <span class="hljs-built_in">str</span>]:<br>    <span class="hljs-keyword">return</span> price * <span class="hljs-number">0.9</span> <span class="hljs-keyword">if</span> price &gt; <span class="hljs-number">100</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;无折扣&quot;</span><br><br><span class="hljs-built_in">print</span>(get_discount(<span class="hljs-number">120</span>))  <span class="hljs-comment"># ✅ 输出: 108.0</span><br><span class="hljs-built_in">print</span>(get_discount(<span class="hljs-number">80</span>))   <span class="hljs-comment"># ✅ 输出: 无折扣</span><br></code></pre></td></tr></table></figure><h1 id="高级：泛型-Generics"><a href="#高级：泛型-Generics" class="headerlink" title="高级：泛型 (Generics)"></a>高级：泛型 (Generics)</h1><p>📌 当参数或返回值的类型不确定时，可以使用泛型<code>（TypeVar）</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> TypeVar, <span class="hljs-type">List</span><br><br>T = TypeVar(<span class="hljs-string">&quot;T&quot;</span>)  <span class="hljs-comment"># 定义泛型变量</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">first_element</span>(<span class="hljs-params">elements: <span class="hljs-type">List</span>[T]</span>) -&gt; T:<br>    <span class="hljs-keyword">return</span> elements[<span class="hljs-number">0</span>]<br><br><span class="hljs-built_in">print</span>(first_element([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]))  <span class="hljs-comment"># ✅ 1</span><br><span class="hljs-built_in">print</span>(first_element([<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]))  <span class="hljs-comment"># ✅ &#x27;a&#x27;</span><br><br></code></pre></td></tr></table></figure><h1 id="Callable（函数类型）"><a href="#Callable（函数类型）" class="headerlink" title="Callable（函数类型）"></a>Callable（函数类型）</h1><p>📌 有时，我们需要传递函数作为参数，可以使用 <code>Callable</code> 指定函数的参数和返回类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Callable</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">execute_twice</span>(<span class="hljs-params">func: <span class="hljs-type">Callable</span>[[<span class="hljs-built_in">int</span>], <span class="hljs-built_in">int</span>], value: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">return</span> func(func(value))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">square</span>(<span class="hljs-params">x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">return</span> x * x<br><br><span class="hljs-built_in">print</span>(execute_twice(square, <span class="hljs-number">2</span>))  <span class="hljs-comment"># ✅ 16</span><br></code></pre></td></tr></table></figure><h1 id="Any（任意类型）"><a href="#Any（任意类型）" class="headerlink" title="Any（任意类型）"></a>Any（任意类型）</h1><p>📌 如果参数或返回值可以是任意类型，使用<code> Any</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Any</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_value</span>(<span class="hljs-params">value: <span class="hljs-type">Any</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-built_in">print</span>(value)<br><br>print_value(<span class="hljs-number">123</span>)        <span class="hljs-comment"># ✅ 输出: 123</span><br>print_value(<span class="hljs-string">&quot;hello&quot;</span>)    <span class="hljs-comment"># ✅ 输出: hello</span><br>print_value([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])  <span class="hljs-comment"># ✅ 输出: [1, 2, 3]</span><br></code></pre></td></tr></table></figure><h1 id="企业实战：数据库查询"><a href="#企业实战：数据库查询" class="headerlink" title="企业实战：数据库查询"></a>企业实战：数据库查询</h1><p>📌 在企业开发中，我们常用类型注解来约束数据库返回的数据结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Dict</span>, <span class="hljs-type">Union</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_user_info</span>(<span class="hljs-params">user_id: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, <span class="hljs-built_in">int</span>]]:<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;id&quot;</span>: user_id, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">25</span>&#125;<br><br><span class="hljs-built_in">print</span>(get_user_info(<span class="hljs-number">1</span>))  <span class="hljs-comment"># ✅ &#123;&#x27;id&#x27;: 1, &#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 25&#125;</span><br><br></code></pre></td></tr></table></figure><h1 id="结合-mypy-进行静态类型检查"><a href="#结合-mypy-进行静态类型检查" class="headerlink" title="结合 mypy 进行静态类型检查"></a>结合 mypy 进行静态类型检查</h1><p>📌 <code>Python</code> 本身不会强制类型检查，但可以使用 <code>mypy </code>进行静态检查：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install mypy<br>mypy my_script.py<br></code></pre></td></tr></table></figure><p>⚠️ 如果 <code>my_script.py</code> 里有错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x: <span class="hljs-built_in">int</span>, y: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">return</span> x + y<br><br><span class="hljs-built_in">print</span>(add(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-number">5</span>))  <span class="hljs-comment"># ❌ TypeError</span><br></code></pre></td></tr></table></figure><p>🔴 <code>mypy</code> 会报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">error: Argument 1 to <span class="hljs-string">&quot;add&quot;</span> has incompatible <span class="hljs-built_in">type</span> <span class="hljs-string">&quot;str&quot;</span>; expected <span class="hljs-string">&quot;int&quot;</span><br></code></pre></td></tr></table></figure><h1 id="使用-overload-进行重载"><a href="#使用-overload-进行重载" class="headerlink" title="使用 @overload 进行重载"></a>使用 @overload 进行重载</h1><p>📌 在 <code>Python</code> 中，函数可以有不同的参数和返回值，使用 <code>@overload</code> 提供更精准的类型提示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> overload<br><br><span class="hljs-meta">@overload</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_data</span>(<span class="hljs-params">data: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>: ...<br><span class="hljs-meta">@overload</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_data</span>(<span class="hljs-params">data: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">str</span>: ...<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_data</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(data) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(data, <span class="hljs-built_in">str</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">str</span>(data)<br><br><span class="hljs-built_in">print</span>(process_data(<span class="hljs-string">&quot;hello&quot;</span>))  <span class="hljs-comment"># ✅ 5</span><br><span class="hljs-built_in">print</span>(process_data(<span class="hljs-number">123</span>))      <span class="hljs-comment"># ✅ &#x27;123&#x27;</span><br><br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table><thead><tr><th><strong>概念</strong></th><th><strong>作用</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>参数类型注解</td><td>指定函数参数类型</td><td><code>def func(a: int):</code></td></tr><tr><td>返回值注解</td><td>指定返回值类型</td><td><code>-&gt; int</code></td></tr><tr><td><code>Optional</code></td><td>允许<code>None</code>值</td><td><code>Optional[str]</code></td></tr><tr><td><code>Union</code></td><td>多种可能类型</td><td><code>Union[int, str]</code></td></tr><tr><td><code>List</code>&#x2F;<code>Dict</code></td><td>复杂数据类型</td><td><code>List[int]</code>&#x2F;<code>Dict[str, int]</code></td></tr><tr><td>泛型<code>TypeVar</code></td><td>适配多个类型</td><td><code>T = TypeVar(&quot;T&quot;)</code></td></tr><tr><td><code>Callable</code></td><td>传递函数</td><td><code>Callable[[int], int]</code></td></tr><tr><td><code>Any</code></td><td>任意类型</td><td><code>Any</code></td></tr><tr><td><code>mypy</code></td><td>静态类型检查</td><td><code>mypy script.py</code></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 函数的 -&gt; 及参数的强类型注解详解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python脚本中的__main__中的作用</title>
    <link href="/2025/03/28/python%E8%84%9A%E6%9C%AC%E4%B8%AD%E7%9A%84main%E6%96%B9%E6%B3%95/"/>
    <url>/2025/03/28/python%E8%84%9A%E6%9C%AC%E4%B8%AD%E7%9A%84main%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Python脚本中的-main-中的作用"><a href="#Python脚本中的-main-中的作用" class="headerlink" title="Python脚本中的__main__中的作用"></a>Python脚本中的__main__中的作用</h1><p>在 <code>Python</code> 中，<code>if __name__ == &quot;__main__&quot;</code>: 是一个常见的结构，主要用于控制代码的执行方式，确保代码只有在直接运行当前文件时才会执行，而不会在被其他模块导入时执行。</p><h1 id="什么是-name-？"><a href="#什么是-name-？" class="headerlink" title="什么是 __name__？"></a>什么是 __name__？</h1><p>📌 在 <code>Python</code> 中，每个模块（文件）在运行时都会有一个特殊的变量<code> __name__</code>，它的值取决于模块是直接执行还是被导入。</p><p>✅当 <code>Python</code> 直接运行文件时，<code>__name__</code> 的值是 <code>&quot;__main__&quot;</code>。</p><p>✅当 <code>Python</code> 文件被作为模块导入时，<code>__name__</code> 取的是文件的模块名（不带 .py）。</p><p>🔹 示例：检查 <code>__name__</code> 的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># my_module.py</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前模块的 __name__ 变量值是: <span class="hljs-subst">&#123;__name__&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>如果直接运行 <code>my_module.py</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">python my_module.py<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">当前模块的 __name__ 变量值是: __main__<br></code></pre></td></tr></table></figure><p>如果这个文件被其他 <code>Python</code> 文件 <code>import</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># another_script.py</span><br><span class="hljs-keyword">import</span> my_module<br><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">当前模块的 __name__ 变量值是: my_module<br></code></pre></td></tr></table></figure><h1 id="为什么要用-if-name-main-？"><a href="#为什么要用-if-name-main-？" class="headerlink" title="为什么要用 if __name__ == &quot;__main__&quot;:？"></a>为什么要用 <code>if __name__ == &quot;__main__&quot;:</code>？</h1><p>📌 在 <code>Python</code> 中，我们通常使用 <code>if __name__ == &quot;__main__&quot;</code>: 来避免导入时执行不必要的代码。</p><p>🔹 示例：没有 <code>if __name__ == &quot;__main__&quot;</code> 的问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># my_script.py</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这个文件被运行了！&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, World!&quot;</span>)<br><br>greet()<br><br></code></pre></td></tr></table></figure><p>如果直接运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">python my_script.py<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">这个文件被运行了！<br>Hello, World!<br></code></pre></td></tr></table></figure><p>但如果被 <code>import</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> my_script  <span class="hljs-comment"># 这里仅仅是导入</span><br></code></pre></td></tr></table></figure><p>仍然会输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">这个文件被运行了！<br>Hello, World!<br></code></pre></td></tr></table></figure><p>⚠️ 问题：</p><p>⛔️意外执行：我们只是想导入 <code>greet()</code> 函数，但文件里的所有代码都被执行了！</p><p>⛔️可能导致错误：如果 <code>my_script.py</code> 里包含数据库操作或 <code>IO</code> 操作，会被意外触发。</p><h1 id="正确使用-if-name-main"><a href="#正确使用-if-name-main" class="headerlink" title="正确使用 if __name__ == &quot;__main__&quot;:"></a>正确使用 <code>if __name__ == &quot;__main__&quot;</code>:</h1><p>🔹 继续上个例子,添加 <code>if __name__ == &quot;__main__&quot;:</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># my_script.py</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这个文件被运行了！&quot;</span>)  <span class="hljs-comment"># 这个仍然会在导入时执行</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, World!&quot;</span>)<br><br><span class="hljs-comment"># 只有直接运行时才会执行</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    greet()<br><br></code></pre></td></tr></table></figure><p>✅ 改进后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> my_script  <span class="hljs-comment"># 仅仅导入，不会执行 greet()</span><br></code></pre></td></tr></table></figure><p>输出（没有不必要的执行）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">这个文件被运行了！<br></code></pre></td></tr></table></figure><p><code>greet()</code> 不会执行，除非显式调用 <code>my_script.greet()</code>。</p><h1 id="企业实战案例"><a href="#企业实战案例" class="headerlink" title="企业实战案例"></a>企业实战案例</h1><p>📌 在实际项目中，<code>if __name__ == &quot;__main__&quot;</code>: 主要用于：</p><p>✅ 编写可复用的模块</p><p>✅ 防止导入时的副作用</p><p>✅ 让 <code>Python</code> 脚本既能独立运行，又能作为模块使用</p><p>🔹 案例 1：数据库初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># database.py</span><br><span class="hljs-keyword">import</span> sqlite3<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_db</span>():<br>    conn = sqlite3.connect(<span class="hljs-string">&quot;example.db&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数据库初始化完成！&quot;</span>)<br>    conn.close()<br><br><span class="hljs-comment"># 只有在直接运行 database.py 时才会初始化数据库</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    init_db()<br><br></code></pre></td></tr></table></figure><p>🟢 好处：</p><p>🟢 其他模块可以 <code>import database</code> 而不会初始化数据库。</p><p>🟢 只有直接运行 <code>python database.py</code> 时才会初始化数据库。</p><p>🔹 案例 2：命令行工具</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># cli_tool.py</span><br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;你输入的参数是：<span class="hljs-subst">&#123;sys.argv[<span class="hljs-number">1</span>]&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请提供参数！&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><p>直接运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">python cli_tool.py hello<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">你输入的参数是：hello<br></code></pre></td></tr></table></figure><p>⚠️ 导入时不会自动运行 <code>main()</code>。</p><p>🔹 案例 3：Web 服务器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app.py</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">home</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, Flask!&quot;</span><br><br><span class="hljs-comment"># 仅当直接运行时才启动 Flask 服务器</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br><br></code></pre></td></tr></table></figure><p>✔️ 这样就不会在 <code>import app</code> 时启动 <code>Flask</code> 服务器！</p><h1 id="if-name-main-VS-main-py"><a href="#if-name-main-VS-main-py" class="headerlink" title="if __name__ == &quot;__main__&quot;: VS __main__.py"></a><code>if __name__ == &quot;__main__&quot;: VS __main__.py</code></h1><p>📌 有时，我们也可以使用 <code>__main__.py</code> 作为项目入口。</p><p>🔹 示例：Python 包执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">python -m my_package<br></code></pre></td></tr></table></figure><p>🔴 如果 <code>my_package/__main__.py</code> 存在，它就会执行，效果类似 <code>if __name__ == &quot;__main__&quot;</code>:。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table><thead><tr><th>场景</th><th><code>if __name__ == &quot;__main__&quot;:</code> 的作用</th></tr></thead><tbody><tr><td>直接运行 Python 文件</td><td>代码会执行</td></tr><tr><td>Python 文件被导入</td><td>代码不会执行</td></tr><tr><td>适用于脚本工具</td><td>让 Python 文件既可独立运行，又可导入</td></tr><tr><td>适用于 Flask、Django</td><td>避免 import 时启动服务器</td></tr><tr><td>适用于数据库操作</td><td>避免 import 时创建连接</td></tr></tbody></table><p>✅ 建议始终使用 <code>if __name__ == &quot;__main__&quot;:</code>，以确保<code> Python</code> 文件可复用且无副作用。🚀</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python脚本中的__main__中的作用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python常见模块之os模块详解</title>
    <link href="/2025/03/27/python%E5%B8%B8%E8%A7%81os%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/"/>
    <url>/2025/03/27/python%E5%B8%B8%E8%A7%81os%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Python常见模块之os模块详解"><a href="#Python常见模块之os模块详解" class="headerlink" title="Python常见模块之os模块详解"></a>Python常见模块之os模块详解</h1><p><code>os</code> 是 <code>Python</code> 内置的 操作系统接口模块，用于：</p><p>✅ 文件和目录操作（创建、删除、移动）<br>✅ 环境变量管理<br>✅ 权限控制（修改文件权限、用户组）<br>✅ 进程管理（多进程、shell 命令执行）<br>✅ 企业实战应用：批量文件管理、日志分析、定时任务</p><h1 id="导入-os-模块"><a href="#导入-os-模块" class="headerlink" title="导入 os 模块"></a>导入 os 模块</h1><p>📌 获取当前工作目录，动态加载配置文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 查看操作系统类型</span><br><span class="hljs-built_in">print</span>(os.name)  <span class="hljs-comment"># Windows: &#x27;nt&#x27;, Linux/Mac: &#x27;posix&#x27;</span><br><br><span class="hljs-comment"># 获取当前 Python 运行的目录</span><br><span class="hljs-built_in">print</span>(os.getcwd())  <br></code></pre></td></tr></table></figure><h1 id="文件和目录操作"><a href="#文件和目录操作" class="headerlink" title="文件和目录操作"></a>文件和目录操作</h1><p>🔹 获取当前目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 获取当前目录</span><br>current_dir = os.getcwd()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前目录: <span class="hljs-subst">&#123;current_dir&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>📌 企业应用：动态获取路径，避免硬编码</p><p>🔹 列出目录内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 获取当前目录下的所有文件和文件夹</span><br>files = os.listdir(<span class="hljs-string">&quot;.&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;目录内容: <span class="hljs-subst">&#123;files&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>📌 企业应用：批量读取文件夹中的数据文件</p><p>🔹 创建新目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 创建单层目录</span><br>os.mkdir(<span class="hljs-string">&quot;new_folder&quot;</span>)<br><br><span class="hljs-comment"># 创建多层目录</span><br>os.makedirs(<span class="hljs-string">&quot;new_folder/sub_folder&quot;</span>)<br></code></pre></td></tr></table></figure><p>📌 企业应用：创建日志存放目录</p><p>🔹 删除目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 删除空目录</span><br>os.rmdir(<span class="hljs-string">&quot;new_folder&quot;</span>)<br><br><span class="hljs-comment"># 删除多级目录</span><br>os.removedirs(<span class="hljs-string">&quot;new_folder/sub_folder&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>📌 企业应用：清理临时文件夹</p><p>🔹 判断文件&#x2F;目录是否存在</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">if</span> os.path.exists(<span class="hljs-string">&quot;test.txt&quot;</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件存在&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件不存在&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>📌 企业应用：防止文件读写错误</p><p>🔹 递归遍历目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> os.walk(<span class="hljs-string">&quot;.&quot;</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;目录: <span class="hljs-subst">&#123;root&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;子目录: <span class="hljs-subst">&#123;dirs&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;文件: <span class="hljs-subst">&#123;files&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>📌 企业应用：快速列出父子目录</p><p>🔹 拆分文件扩展名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>file_name, ext = os.path.splitext(<span class="hljs-string">&quot;test.txt&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;文件名: <span class="hljs-subst">&#123;file_name&#125;</span>, 扩展名: <span class="hljs-subst">&#123;ext&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>🔹 拼接路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br>path = os.path.join(<span class="hljs-string">&quot;home&quot;</span>, <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;file.txt&quot;</span>)<br><span class="hljs-built_in">print</span>(path)  <span class="hljs-comment"># &quot;home/user/file.txt&quot;</span><br></code></pre></td></tr></table></figure><h1 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h1><p>🔹 创建和写入文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(<span class="hljs-string">&quot;Hello, os module!&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>📌 企业应用：自动化日志生成</p><p>🔹 读取文件内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    content = f.read()<br>    <span class="hljs-built_in">print</span>(content)<br></code></pre></td></tr></table></figure><p>📌 企业应用：读取配置文件、日志分析</p><p>🔹 删除文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> os.path.exists(<span class="hljs-string">&quot;test.txt&quot;</span>):<br>    os.remove(<span class="hljs-string">&quot;test.txt&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件已删除&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>📌 企业应用：定期清理无用文件</p><h1 id="修改文件名和路径"><a href="#修改文件名和路径" class="headerlink" title="修改文件名和路径"></a>修改文件名和路径</h1><p>🔹 获取文件路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br>file_path = os.path.abspath(<span class="hljs-string">&quot;test.txt&quot;</span>) <span class="hljs-comment"># os.path.abspath()：获取绝对路径</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;文件路径: <span class="hljs-subst">&#123;file_path&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>📌 企业应用：日志分析、数据处理</p><p>🔹 拆分文件路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br>path = <span class="hljs-string">&quot;/home/user/data/file.txt&quot;</span><br>dirname, filename = os.path.split(path)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;目录: <span class="hljs-subst">&#123;dirname&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;文件名: <span class="hljs-subst">&#123;filename&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>📌 企业应用：动态管理文件路径</p><p>🔹 修改文件名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>os.rename(<span class="hljs-string">&quot;old_name.txt&quot;</span>, <span class="hljs-string">&quot;new_name.txt&quot;</span>)<br></code></pre></td></tr></table></figure><p>📌 企业应用：批量重命名文件</p><h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><p>🔹 获取当前进程 ID</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前进程 ID: <span class="hljs-subst">&#123;os.getpid()&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>📌 企业应用：监控程序运行状态</p><p>🔹 运行系统命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br>os.system(<span class="hljs-string">&quot;ls&quot;</span>)  <span class="hljs-comment"># Linux/macOS</span><br>os.system(<span class="hljs-string">&quot;dir&quot;</span>)  <span class="hljs-comment"># Windows</span><br><br></code></pre></td></tr></table></figure><p>📌 企业应用：自动执行系统任务</p><p>🔹 获取系统环境变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-built_in">print</span>(os.environ.get(<span class="hljs-string">&quot;HOME&quot;</span>))  <span class="hljs-comment"># macOS/Linux</span><br><span class="hljs-built_in">print</span>(os.environ.get(<span class="hljs-string">&quot;USERPROFILE&quot;</span>))  <span class="hljs-comment"># Windows</span><br><br></code></pre></td></tr></table></figure><p>📌 企业应用：动态读取系统配置</p><h1 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h1><p>🔹 修改文件权限</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br>os.chmod(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-number">0o777</span>)  <span class="hljs-comment"># 赋予所有权限</span><br><br></code></pre></td></tr></table></figure><p>📌 企业应用：批量修改权限</p><p>🔹 修改文件所有者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> shutil<br>shutil.chown(<span class="hljs-string">&quot;test.txt&quot;</span>, user=<span class="hljs-string">&quot;username&quot;</span>, group=<span class="hljs-string">&quot;groupname&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>📌 企业应用：管理服务器文件权限</p><h1 id="批量处理企业级任务"><a href="#批量处理企业级任务" class="headerlink" title="批量处理企业级任务"></a>批量处理企业级任务</h1><p>🔹 批量重命名文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br>folder = <span class="hljs-string">&quot;data&quot;</span><br><span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> os.listdir(folder):<br>    old_path = os.path.join(folder, filename)<br>    new_path = os.path.join(folder, <span class="hljs-string">&quot;new_&quot;</span> + filename)<br>    os.rename(old_path, new_path)<br></code></pre></td></tr></table></figure><p>📌 企业应用：批量重命名日志文件</p><p>🔹 批量删除大文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br>folder = <span class="hljs-string">&quot;backup&quot;</span><br><span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> os.listdir(folder):<br>    file_path = os.path.join(folder, filename)<br>    <span class="hljs-keyword">if</span> os.path.getsize(file_path) &gt; <span class="hljs-number">100</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>:  <span class="hljs-comment"># 删除大于 100MB 的文件</span><br>        os.remove(file_path)<br><br></code></pre></td></tr></table></figure><p>📌 企业应用：清理磁盘空间</p><h1 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h1><p>🔹 获取磁盘使用情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> shutil<br><br>total, used, free = shutil.disk_usage(<span class="hljs-string">&quot;/&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;总大小: <span class="hljs-subst">&#123;total // (<span class="hljs-number">1024</span>**<span class="hljs-number">3</span>)&#125;</span> GB&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;已使用: <span class="hljs-subst">&#123;used // (<span class="hljs-number">1024</span>**<span class="hljs-number">3</span>)&#125;</span> GB&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;可用: <span class="hljs-subst">&#123;free // (<span class="hljs-number">1024</span>**<span class="hljs-number">3</span>)&#125;</span> GB&quot;</span>)<br></code></pre></td></tr></table></figure><p>📌 企业应用：服务器磁盘监控</p><p>🔹 执行命令</p><p>1️⃣ 使用 <code>os.system()</code> 执行 <code>CMD</code> 命令</p><p><code>os.system()</code> 直接执行命令，但它不会捕获命令的输出，只能返回命令的退出状态（0 表示成功，其他值表示失败）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 执行 Windows 命令</span><br>os.system(<span class="hljs-string">&quot;dir&quot;</span>)  <span class="hljs-comment"># 列出当前目录下的文件（Windows）</span><br><br><span class="hljs-comment"># 执行 Linux / macOS 命令</span><br>os.system(<span class="hljs-string">&quot;ls -la&quot;</span>)  <span class="hljs-comment"># 列出当前目录的详细信息</span><br><br></code></pre></td></tr></table></figure><p>🔹 缺点：</p><p>✅不能获取命令执行的结果<br>✅不能传递参数<br>✅安全性较差</p><p>2️⃣ 使用 <code>os.popen()</code> 获取命令输出</p><p><code>os.popen()</code> 执行命令并获取返回的输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># Windows 下执行 &quot;dir&quot; 命令并读取输出</span><br>cmd_output = os.popen(<span class="hljs-string">&quot;dir&quot;</span>).read()<br><span class="hljs-built_in">print</span>(cmd_output)<br><br><span class="hljs-comment"># Linux / macOS 下执行 &quot;ls -la&quot; 命令并读取输出</span><br>cmd_output = os.popen(<span class="hljs-string">&quot;ls -la&quot;</span>).read()<br><span class="hljs-built_in">print</span>(cmd_output)<br><br></code></pre></td></tr></table></figure><p>🔹 优点：</p><p>✅ 能够捕获输出<br>✅ 适用于简单的命令</p><p>🔹 缺点：</p><p>🚫 <code>os.popen()</code> 在某些情况下可能阻塞进程<br>🚫 安全性较低，建议用 &#96;&#96;subprocess&#96; 代替</p><p>3️⃣ 推荐使用 <code>subprocess</code> 执行 CMD 命令</p><p><code>subprocess.run()</code> 和 <code>subprocess.Popen()</code> 是更安全、现代的方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<br><br><span class="hljs-comment"># Windows: 执行 &quot;dir&quot; 并获取输出</span><br>result = subprocess.run(<span class="hljs-string">&quot;dir&quot;</span>, shell=<span class="hljs-literal">True</span>, capture_output=<span class="hljs-literal">True</span>, text=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(result.stdout)  <span class="hljs-comment"># 输出命令执行结果</span><br><br><span class="hljs-comment"># Linux/macOS: 执行 &quot;ls -la&quot;</span><br>result = subprocess.run(<span class="hljs-string">&quot;ls -la&quot;</span>, shell=<span class="hljs-literal">True</span>, capture_output=<span class="hljs-literal">True</span>, text=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(result.stdout)<br><br></code></pre></td></tr></table></figure><p>🔹 优点：</p><p>✅ <code>capture_output=True</code> 可以获取命令输出<br>✅ <code>text=True</code> 自动解码成字符串</p><p>🔹 <code>subprocess.Popen()</code>（更灵活）</p><p>如果你想异步执行 <code>CMD</code> 命令，可以使用 <code>Popen()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<br><br>process = subprocess.Popen(<span class="hljs-string">&quot;dir&quot;</span>, shell=<span class="hljs-literal">True</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=<span class="hljs-literal">True</span>)<br>stdout, stderr = process.communicate()  <span class="hljs-comment"># 获取输出和错误信息</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;标准输出:&quot;</span>, stdout)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;标准错误:&quot;</span>, stderr)<br><br></code></pre></td></tr></table></figure><p>🔹 优点：</p><p>✅ 可以执行多个命令<br>✅ 可以流式处理输出<br>✅ 不会阻塞主线程</p><p>4️⃣ 在 <code>CMD</code> 运行 <code>Python</code> 脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> subprocess<br><br><span class="hljs-comment"># 运行 test.py</span><br>os.system(<span class="hljs-string">&quot;python test.py&quot;</span>)<br><br><span class="hljs-comment"># 或者用 subprocess</span><br>subprocess.run(<span class="hljs-string">&quot;python test.py&quot;</span>, shell=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table><thead><tr><th>功能</th><th>代码示例</th></tr></thead><tbody><tr><td>获取当前目录</td><td><code>os.getcwd()</code></td></tr><tr><td>列出目录内容</td><td><code>os.listdir()</code></td></tr><tr><td>创建目录</td><td><code> os.mkdir() / os.makedirs()</code></td></tr><tr><td>删除目录</td><td><code> ros.rmdir() / os.removedirs()</code></td></tr><tr><td>修改文件权限</td><td><code> os.chmod()</code></td></tr><tr><td>执行 shell 命令</td><td><code> os.system()</code></td></tr><tr><td>批量重命名文件</td><td><code>os.rename()</code></td></tr><tr><td>监控磁盘使用情况</td><td><code> shutil.disk_usage()</code></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 常见模块之os模块详解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python requests 模块的使用</title>
    <link href="/2025/03/27/python%E5%B8%B8%E8%A7%81request%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2025/03/27/python%E5%B8%B8%E8%A7%81request%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-requests-模块的使用"><a href="#Python-requests-模块的使用" class="headerlink" title="Python requests 模块的使用"></a>Python requests 模块的使用</h1><p><code>requests</code> 是 <code>Python</code> 最流行的 <code>HTTP </code>客户端，用于： </p><p>✅ 发送 <code>GET、POST、PUT、DELETE</code> 等请求<br>✅ 处理 <code>JSON</code> 数据<br>✅ 设置<code> Headers、Cookies、</code>代理、认证<br>✅ 文件上传、下载<br>✅ 超时、重试、并发请求<br>✅ 结合 <code>pytest</code> 进行 <code>API</code> 测试</p><p>🔹 安装 requests</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install requests<br></code></pre></td></tr></table></figure><p>检查是否安装成功：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-built_in">print</span>(requests.__version__)  <span class="hljs-comment"># 输出版本号</span><br></code></pre></td></tr></table></figure><h1 id="requests-入门：基本-GET、POST-请求"><a href="#requests-入门：基本-GET、POST-请求" class="headerlink" title="requests 入门：基本 GET、POST 请求"></a>requests 入门：基本 GET、POST 请求</h1><p>🔹 发送 <code>GET</code> 请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># 发送 GET 请求</span><br>response = requests.get(<span class="hljs-string">&quot;https://jsonplaceholder.typicode.com/posts/1&quot;</span>)<br><br><span class="hljs-comment"># 输出响应状态码</span><br><span class="hljs-built_in">print</span>(response.status_code)  <span class="hljs-comment"># 200</span><br><br><span class="hljs-comment"># 输出 JSON 响应内容</span><br><span class="hljs-built_in">print</span>(response.json())  <br><br></code></pre></td></tr></table></figure><p>🔹 发送带参数的 <code>GET</code> 请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>params = &#123;<span class="hljs-string">&quot;q&quot;</span>: <span class="hljs-string">&quot;Python&quot;</span>, <span class="hljs-string">&quot;sort&quot;</span>: <span class="hljs-string">&quot;stars&quot;</span>&#125;<br>response = requests.get(<span class="hljs-string">&quot;https://api.github.com/search/repositories&quot;</span>, params=params)<br><span class="hljs-built_in">print</span>(response.json())  <br></code></pre></td></tr></table></figure><p>🔹 发送 <code>POST</code> 请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># 发送 POST 请求</span><br>data = &#123;<span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;Python&quot;</span>, <span class="hljs-string">&quot;body&quot;</span>: <span class="hljs-string">&quot;requests 模块&quot;</span>, <span class="hljs-string">&quot;userId&quot;</span>: <span class="hljs-number">1</span>&#125;<br>response = requests.post(<span class="hljs-string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span>, json=data)<br><br><span class="hljs-comment"># 输出返回的 JSON 数据</span><br><span class="hljs-built_in">print</span>(response.json())  <br><br></code></pre></td></tr></table></figure><p>🔹 自定义 Headers</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>headers = &#123;<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64)&quot;</span><br>&#125;<br>response = requests.get(<span class="hljs-string">&quot;https://httpbin.org/headers&quot;</span>, headers=headers)<br><span class="hljs-built_in">print</span>(response.json())  <br><br></code></pre></td></tr></table></figure><p>📌 企业应用：模拟浏览器访问、避免反爬</p><p>🔹 设置 Cookies</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>cookies = &#123;<span class="hljs-string">&quot;session_id&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>&#125;<br>response = requests.get(<span class="hljs-string">&quot;https://httpbin.org/cookies&quot;</span>, cookies=cookies)<br><span class="hljs-built_in">print</span>(response.json())  <br></code></pre></td></tr></table></figure><p>📌 企业应用：模拟登录后的请求</p><p>📌 除此之外，<code>requests</code> 还支持<code>put、delete</code>等 <code>Http</code>请求大同小异，这里不在赘述</p><h1 id="处理Json数据"><a href="#处理Json数据" class="headerlink" title="处理Json数据"></a>处理Json数据</h1><p>🔹 发送 JSON 数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>data = &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>&#125;<br>response = requests.post(<span class="hljs-string">&quot;https://httpbin.org/post&quot;</span>, json=data)<br><br><span class="hljs-built_in">print</span>(response.json())  <br><br></code></pre></td></tr></table></figure><p>📌 企业应用：用户登录、API 测试</p><p>🔹 解析 JSON 响应</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>response = requests.get(<span class="hljs-string">&quot;https://jsonplaceholder.typicode.com/users/1&quot;</span>)<br>data = response.json()<br><span class="hljs-built_in">print</span>(data[<span class="hljs-string">&quot;name&quot;</span>])  <span class="hljs-comment"># 解析 JSON 数据</span><br><br></code></pre></td></tr></table></figure><p>📌 企业应用：获取 API 返回的用户数据</p><h1 id="处理文件"><a href="#处理文件" class="headerlink" title="处理文件"></a>处理文件</h1><p>🔹 上传文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>files = &#123;<span class="hljs-string">&quot;file&quot;</span>: <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)&#125;<br>response = requests.post(<span class="hljs-string">&quot;https://httpbin.org/post&quot;</span>, files=files)<br><span class="hljs-built_in">print</span>(response.json())  <br></code></pre></td></tr></table></figure><p>📌 企业应用：图片上传、Excel 数据上传</p><p>🔹 下载文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>response = requests.get(<span class="hljs-string">&quot;https://www.example.com/image.jpg&quot;</span>)<br><br><span class="hljs-comment"># 保存图片</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;image.jpg&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(response.content)<br><br></code></pre></td></tr></table></figure><p>📌 企业应用：爬取图片、文档</p><h1 id="超时、重试、代理"><a href="#超时、重试、代理" class="headerlink" title="超时、重试、代理"></a>超时、重试、代理</h1><p>🔹 设置超时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">try</span>:<br>    response = requests.get(<span class="hljs-string">&quot;https://httpbin.org/delay/5&quot;</span>, timeout=<span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(response.text)<br><span class="hljs-keyword">except</span> requests.Timeout:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求超时！&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>📌 企业应用：避免卡死，设定 API 超时时间</p><p>🔹 代理请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>proxies = &#123;<br>    <span class="hljs-string">&quot;http&quot;</span>: <span class="hljs-string">&quot;http://127.0.0.1:8080&quot;</span>,<br>    <span class="hljs-string">&quot;https&quot;</span>: <span class="hljs-string">&quot;https://127.0.0.1:8080&quot;</span>,<br>&#125;<br>response = requests.get(<span class="hljs-string">&quot;https://httpbin.org/ip&quot;</span>, proxies=proxies)<br><span class="hljs-built_in">print</span>(response.json())  <br><br></code></pre></td></tr></table></figure><p>📌 企业应用：突破 IP 限制、反爬虫绕过</p><h1 id="结合-pytest-进行-API-测试"><a href="#结合-pytest-进行-API-测试" class="headerlink" title="结合 pytest 进行 API 测试"></a>结合 pytest 进行 API 测试</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> pytest<br><br>BASE_URL = <span class="hljs-string">&quot;https://jsonplaceholder.typicode.com&quot;</span><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;user_id&quot;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_get_user</span>(<span class="hljs-params">user_id</span>):<br>    response = requests.get(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;BASE_URL&#125;</span>/users/<span class="hljs-subst">&#123;user_id&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">assert</span> response.status_code == <span class="hljs-number">200</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&quot;name&quot;</span> <span class="hljs-keyword">in</span> response.json()<br><br></code></pre></td></tr></table></figure><p>📌 企业应用：自动化 API 测试</p><h1 id="结合-allure-生成-API-测试报告"><a href="#结合-allure-生成-API-测试报告" class="headerlink" title="结合 allure 生成 API 测试报告"></a>结合 allure 生成 API 测试报告</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> allure<br><br>BASE_URL = <span class="hljs-string">&quot;https://jsonplaceholder.typicode.com&quot;</span><br><br><span class="hljs-meta">@allure.feature(<span class="hljs-params"><span class="hljs-string">&quot;用户信息&quot;</span></span>)</span><br><span class="hljs-meta">@allure.story(<span class="hljs-params"><span class="hljs-string">&quot;获取用户数据&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_get_user</span>():<br>    <span class="hljs-keyword">with</span> allure.step(<span class="hljs-string">&quot;发送 API 请求&quot;</span>):<br>        response = requests.get(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;BASE_URL&#125;</span>/users/1&quot;</span>)<br>    <br>    <span class="hljs-keyword">with</span> allure.step(<span class="hljs-string">&quot;校验返回状态码&quot;</span>):<br>        <span class="hljs-keyword">assert</span> response.status_code == <span class="hljs-number">200</span><br><br>    <span class="hljs-keyword">with</span> allure.step(<span class="hljs-string">&quot;校验 JSON 数据&quot;</span>):<br>        <span class="hljs-keyword">assert</span> <span class="hljs-string">&quot;name&quot;</span> <span class="hljs-keyword">in</span> response.json()<br><br>    allure.attach(response.text, name=<span class="hljs-string">&quot;API Response&quot;</span>, attachment_type=allure.attachment_type.JSON)<br><br></code></pre></td></tr></table></figure><p>📌 企业应用：生成美观的 API 测试报告</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table><thead><tr><th>功能</th><th>代码示例</th></tr></thead><tbody><tr><td>发送 <code>GET</code> 请求</td><td><code>requests.get(url)</code></td></tr><tr><td>发送 <code>POST</code> 请求</td><td><code>requests.post(url, json=data)</code></td></tr><tr><td>设置 <code>Headers</code></td><td><code> wronrequests.get(url, headers=headers)</code></td></tr><tr><td>超时设置</td><td><code> requests.get(url, timeout=3)</code></td></tr><tr><td>代理请求</td><td><code> requests.get(url, proxies=proxies)</code></td></tr><tr><td>文件上传</td><td><code> requests.post(url, files=files)</code></td></tr><tr><td>文件下载</td><td><code> requests.get(url).content</code></td></tr><tr><td>自动重试</td><td><code> requests.Session().mount(&quot;https://&quot;, adapter)</code></td></tr><tr><td>API 测试</td><td><code> pytest + requests</code></td></tr><tr><td>测试报告</td><td><code> pytest + allure</code></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python requests 模块的使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
      <tag>requests</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytest入门系列之pytest和Allure结合详细指南</title>
    <link href="/2025/03/26/pytest%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%9710/"/>
    <url>/2025/03/26/pytest%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%9710/</url>
    
    <content type="html"><![CDATA[<h1 id="Pytest入门系列之pytest和Allure结合详细指南"><a href="#Pytest入门系列之pytest和Allure结合详细指南" class="headerlink" title="Pytest入门系列之pytest和Allure结合详细指南"></a>Pytest入门系列之pytest和Allure结合详细指南</h1><p>在企业级测试中，<code>pytest + Allure</code> 是生成 美观、详细、可交互测试报告 的最佳实践。<br>它适用于：</p><p>✅ <code>API</code> 自动化测试</p><p>✅ <code>UI</code> 自动化测试<code>（Selenium、Appium）</code></p><p>✅ 数据库测试</p><p>✅ <code>CI/CD</code> 持续集成<code>（Jenkins、GitLab CI/CD）</code></p><h1 id="安装-pytest-allure"><a href="#安装-pytest-allure" class="headerlink" title="安装 pytest-allure"></a>安装 pytest-allure</h1><p>📌 安装 <code>allure-pytest</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install allure-pytest<br></code></pre></td></tr></table></figure><p>📌 安装 Allure Commandline</p><p><code>Windows</code>: <a href="https://github.com/allure-framework/allure2/releases">https://github.com/allure-framework/allure2/releases</a></p><p><code>Mac/Linux</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew install allure<br></code></pre></td></tr></table></figure><p>📌 windows 下的环境变量配置</p><img src="/2025/03/26/pytest%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%9710/1.png" class=""><p>📌 验证安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">allure --version<br></code></pre></td></tr></table></figure><p>✅ 显示版本号，说明安装成功！</p><h1 id="运行测试并生成-Allure-报告"><a href="#运行测试并生成-Allure-报告" class="headerlink" title="运行测试并生成 Allure 报告"></a>运行测试并生成 Allure 报告</h1><p>📌 执行 <code>Pytest</code> 并生成 <code>allure</code> 结果</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pytest --alluredir=./allure-results<br></code></pre></td></tr></table></figure><p>📌 生成 <code>HTML</code> 报告</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">allure serve ./allure-results<br></code></pre></td></tr></table></figure><p>✅ 浏览器自动打开 <code>Allure</code> 报告！</p><p>📌 静态资源文件报告（带<code>index.html、css、js</code>等文件），需要将报告布置到<code>web</code>服务器上。</p><p>✅生成报告。</p><p><code>--clean</code>：如果报告路径重复，清理上一次的报告</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">allure generate ./results --clean<br></code></pre></td></tr></table></figure><p>✅<code>-o</code>：将测试报告生成指定的目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">allure generate ./results --clean -o ./reports<br></code></pre></td></tr></table></figure><p>✅打开报告</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">allure open allure-report<br></code></pre></td></tr></table></figure><p>✅打开报告指定IP地址和端口号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">allure open ./reports -h 127.0.0.1 -p 8888<br></code></pre></td></tr></table></figure><p>✅ pytest.ini 中的配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[pytest]</span><br><span class="hljs-attr">addopts</span> = -v -s --tb=short --alluredir=./allure-results --clean-alluredir<br><span class="hljs-attr">python_files</span> = check_*.py test_*.py *_test.py<br><span class="hljs-attr">log_level</span> = DEBUG     <br><span class="hljs-attr">log_cli</span> = <span class="hljs-literal">true</span>        <br><span class="hljs-attr">log_format</span> = <span class="hljs-string">&quot;%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)&quot;</span>  <br><span class="hljs-attr">log_date_format</span> = <span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span> <br><span class="hljs-attr">log_file</span> = logs/pytest.log  <br><span class="hljs-attr">log_file_level</span> = INF<br></code></pre></td></tr></table></figure><p>📌 如果需要每次运行完毕后打开报告，可以在<code>conftest.py</code> 中定义一个钩子函数，在执行完毕后打开我们的测试报告。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># conftest.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pytest_unconfigure</span>(<span class="hljs-params">config</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;打开allure报告.&quot;</span>)<br>    <span class="hljs-keyword">import</span> subprocess<br>    subprocess.run(<span class="hljs-string">&quot;allure serve allure-results&quot;</span>, shell=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h1 id="使用-allure-feature-和-allure-story-分类-API-测试"><a href="#使用-allure-feature-和-allure-story-分类-API-测试" class="headerlink" title="使用 @allure.feature 和 @allure.story 分类 API 测试"></a>使用 @allure.feature 和 @allure.story 分类 API 测试</h1><p>📌 作用：</p><p><code>@allure.feature()</code> → 模块级别</p><p><code>@allure.story()</code> → 功能级别</p><p>🔹 代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> allure<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-meta">@allure.feature(<span class="hljs-params"><span class="hljs-string">&quot;用户管理&quot;</span></span>)</span><br><span class="hljs-meta">@allure.story(<span class="hljs-params"><span class="hljs-string">&quot;用户登录&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>():<br>    response = requests.post(<span class="hljs-string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span>, json=&#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>&#125;)<br>    <span class="hljs-keyword">assert</span> response.status_code == <span class="hljs-number">201</span>  <span class="hljs-comment"># 断言请求成功</span><br><br></code></pre></td></tr></table></figure><p>📌 在 <code>Allure</code> 报告中，测试会按照 <code>feature</code> 和 <code>story</code> 分类</p><h1 id="使用-allure-step-记录-API-请求步骤"><a href="#使用-allure-step-记录-API-请求步骤" class="headerlink" title="使用 @allure.step() 记录 API 请求步骤"></a>使用 @allure.step() 记录 API 请求步骤</h1><p>📌 作用：</p><p>✅记录 API 请求的关键步骤<br>✅测试失败时，提供详细日志</p><p>🔹 代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@allure.feature(<span class="hljs-params"><span class="hljs-string">&quot;API 测试&quot;</span></span>)</span><br><span class="hljs-meta">@allure.story(<span class="hljs-params"><span class="hljs-string">&quot;获取用户信息&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_get_user</span>():<br>    <span class="hljs-keyword">with</span> allure.step(<span class="hljs-string">&quot;发送 GET 请求&quot;</span>):<br>        response = requests.get(<span class="hljs-string">&quot;https://jsonplaceholder.typicode.com/users/1&quot;</span>)<br><br>    <span class="hljs-keyword">with</span> allure.step(<span class="hljs-string">&quot;校验 HTTP 状态码&quot;</span>):<br>        <span class="hljs-keyword">assert</span> response.status_code == <span class="hljs-number">200</span><br><br>    <span class="hljs-keyword">with</span> allure.step(<span class="hljs-string">&quot;校验返回数据&quot;</span>):<br>        data = response.json()<br>        <span class="hljs-keyword">assert</span> data[<span class="hljs-string">&quot;id&quot;</span>] == <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p>📌 <code>Allure</code> 报告会清晰展示 <code>API</code> 请求的步骤</p><h1 id="使用-allure-attach-记录请求-响应数据"><a href="#使用-allure-attach-记录请求-响应数据" class="headerlink" title="使用 @allure.attach() 记录请求&#x2F;响应数据"></a>使用 @allure.attach() 记录请求&#x2F;响应数据</h1><p>📌 作用：</p><p>✅记录 <code>API</code> 请求参数、响应数据<br>✅测试失败时，方便排查问题</p><p>🔹 代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@allure.feature(<span class="hljs-params"><span class="hljs-string">&quot;API 测试&quot;</span></span>)</span><br><span class="hljs-meta">@allure.story(<span class="hljs-params"><span class="hljs-string">&quot;创建用户&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_create_user</span>():<br>    url = <span class="hljs-string">&quot;https://jsonplaceholder.typicode.com/users&quot;</span><br>    payload = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;John Doe&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;john@example.com&quot;</span>&#125;<br><br>    <span class="hljs-keyword">with</span> allure.step(<span class="hljs-string">&quot;发送 POST 请求&quot;</span>):<br>        allure.attach(<span class="hljs-built_in">str</span>(payload), name=<span class="hljs-string">&quot;请求数据&quot;</span>, attachment_type=allure.attachment_type.JSON)<br>        response = requests.post(url, json=payload)<br><br>    <span class="hljs-keyword">with</span> allure.step(<span class="hljs-string">&quot;校验 HTTP 状态码&quot;</span>):<br>        allure.attach(<span class="hljs-built_in">str</span>(response.status_code), name=<span class="hljs-string">&quot;响应状态码&quot;</span>, attachment_type=allure.attachment_type.TEXT)<br>        <span class="hljs-keyword">assert</span> response.status_code == <span class="hljs-number">201</span><br><br>    <span class="hljs-keyword">with</span> allure.step(<span class="hljs-string">&quot;校验返回数据&quot;</span>):<br>        allure.attach(response.text, name=<span class="hljs-string">&quot;响应数据&quot;</span>, attachment_type=allure.attachment_type.JSON)<br>        <span class="hljs-keyword">assert</span> response.json()[<span class="hljs-string">&quot;name&quot;</span>] == <span class="hljs-string">&quot;John Doe&quot;</span><br><br></code></pre></td></tr></table></figure><p>📌 <code>Allure</code> 报告会显示 <code>API</code> 请求的 <code>JSON</code> </p><h1 id="allure-attach-file-添加文件（Excel、日志、截图）"><a href="#allure-attach-file-添加文件（Excel、日志、截图）" class="headerlink" title="allure.attach.file() 添加文件（Excel、日志、截图）"></a>allure.attach.file() 添加文件（Excel、日志、截图）</h1><p>📌 作用：</p><p>✅上传 <code>Excel</code>、日志文件</p><p>✅<code>Selenium</code> 失败时截图</p><p>🔹 代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> allure<br><br><span class="hljs-meta">@allure.feature(<span class="hljs-params"><span class="hljs-string">&quot;数据导入&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_upload_excel</span>():<br>    allure.attach.file(<span class="hljs-string">&quot;test_data.xlsx&quot;</span>, name=<span class="hljs-string">&quot;Excel 数据&quot;</span>, attachment_type=allure.attachment_type.CSV)<br>    <span class="hljs-keyword">assert</span> <span class="hljs-literal">True</span><br><br></code></pre></td></tr></table></figure><p>📌 <code>Allure</code> 报告中，<code>Excel</code> 文件可下载查看</p><p>📌 <code>Selenium </code>结合 <code>allure.attach.file()</code>进行截图</p><p>🔹 代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><br><span class="hljs-meta">@allure.feature(<span class="hljs-params"><span class="hljs-string">&quot;UI 测试&quot;</span></span>)</span><br><span class="hljs-meta">@allure.story(<span class="hljs-params"><span class="hljs-string">&quot;登录页面&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_ui_login</span>():<br>    driver = webdriver.Chrome()<br>    driver.get(<span class="hljs-string">&quot;https://example.com&quot;</span>)<br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">assert</span> <span class="hljs-string">&quot;登录成功&quot;</span> <span class="hljs-keyword">in</span> driver.page_source<br>    <span class="hljs-keyword">except</span> AssertionError:<br>        driver.save_screenshot(<span class="hljs-string">&quot;failure.png&quot;</span>)<br>        allure.attach.file(<span class="hljs-string">&quot;failure.png&quot;</span>, name=<span class="hljs-string">&quot;失败截图&quot;</span>, attachment_type=allure.attachment_type.PNG)<br>        <span class="hljs-keyword">raise</span><br>    <span class="hljs-keyword">finally</span>:<br>        driver.quit()<br></code></pre></td></tr></table></figure><p>📌 测试失败时，<code>Allure </code>报告会自动添加截图</p><h1 id="使用-allure-severity-设置测试优先级"><a href="#使用-allure-severity-设置测试优先级" class="headerlink" title="使用 @allure.severity() 设置测试优先级"></a>使用 @allure.severity() 设置测试优先级</h1><p>📌 <code>Allure </code>提供 5 个严重级别</p><p>✅<code>BLOCKER</code>：关键问题，必须修复<br>✅<code>CRITICAL</code>：严重缺陷<br>✅<code>NORMAL</code>：普通问题<br>✅<code>MINOR</code>：次要问题<br>✅<code>TRIVIAL</code>：提示信息</p><p>🔹 代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@allure.severity(<span class="hljs-params">allure.severity_level.CRITICAL</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_critical_bug</span>():<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> == <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>📌 <code>Allure</code> 报告会突出显示 <code>CRITICAL</code> 级别的失败测试</p><h1 id="结合-pytest-mark-parametrize-进行-API-测试"><a href="#结合-pytest-mark-parametrize-进行-API-测试" class="headerlink" title="结合 pytest.mark.parametrize 进行 API 测试"></a>结合 pytest.mark.parametrize 进行 API 测试</h1><p>📌 作用：</p><p>✅批量测试 <code>API</code> 请求<br>✅不同参数自动生成多组测试</p><p>🔹 代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><br><span class="hljs-meta">@allure.feature(<span class="hljs-params"><span class="hljs-string">&quot;API 测试&quot;</span></span>)</span><br><span class="hljs-meta">@allure.story(<span class="hljs-params"><span class="hljs-string">&quot;不同用户获取信息&quot;</span></span>)</span><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;user_id&quot;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_get_users</span>(<span class="hljs-params">user_id</span>):<br>    <span class="hljs-keyword">with</span> allure.step(<span class="hljs-string">f&quot;查询用户 ID: <span class="hljs-subst">&#123;user_id&#125;</span>&quot;</span>):<br>        response = requests.get(<span class="hljs-string">f&quot;https://jsonplaceholder.typicode.com/users/<span class="hljs-subst">&#123;user_id&#125;</span>&quot;</span>)<br>        allure.attach(response.text, name=<span class="hljs-string">&quot;响应数据&quot;</span>, attachment_type=allure.attachment_type.JSON)<br>        <span class="hljs-keyword">assert</span> response.status_code == <span class="hljs-number">200</span><br><br></code></pre></td></tr></table></figure><p>📌 <code>Allure</code> 报告会显示多个用户请求结果</p><h1 id="失败时自动截图（适用于-UI-测试）"><a href="#失败时自动截图（适用于-UI-测试）" class="headerlink" title="失败时自动截图（适用于 UI 测试）"></a>失败时自动截图（适用于 UI 测试）</h1><p>📌 适用于 <code>Selenium</code> 自动化测试</p><p>🔹 代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><br><span class="hljs-meta">@allure.feature(<span class="hljs-params"><span class="hljs-string">&quot;UI 测试&quot;</span></span>)</span><br><span class="hljs-meta">@allure.story(<span class="hljs-params"><span class="hljs-string">&quot;登录页面&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_ui_login</span>():<br>    driver = webdriver.Chrome()<br>    driver.get(<span class="hljs-string">&quot;https://example.com&quot;</span>)<br><br>    <span class="hljs-keyword">with</span> allure.step(<span class="hljs-string">&quot;输入用户名&quot;</span>):<br>        driver.find_element(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;username&quot;</span>).send_keys(<span class="hljs-string">&quot;test_user&quot;</span>)<br><br>    <span class="hljs-keyword">with</span> allure.step(<span class="hljs-string">&quot;输入密码&quot;</span>):<br>        driver.find_element(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>).send_keys(<span class="hljs-string">&quot;123456&quot;</span>)<br><br>    <span class="hljs-keyword">with</span> allure.step(<span class="hljs-string">&quot;点击登录&quot;</span>):<br>        driver.find_element(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;login-button&quot;</span>).click()<br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">assert</span> <span class="hljs-string">&quot;欢迎&quot;</span> <span class="hljs-keyword">in</span> driver.page_source<br>    <span class="hljs-keyword">except</span> AssertionError:<br>        allure.attach(driver.get_screenshot_as_png(), name=<span class="hljs-string">&quot;失败截图&quot;</span>, attachment_type=allure.attachment_type.PNG)<br>        <span class="hljs-keyword">raise</span><br>    <span class="hljs-keyword">finally</span>:<br>        driver.quit()<br><br></code></pre></td></tr></table></figure><p>📌 测试失败时，<code>Allure</code> 报告会自动添加截图</p><h1 id="结合-CI-CD-自动生成报告"><a href="#结合-CI-CD-自动生成报告" class="headerlink" title="结合 CI&#x2F;CD 自动生成报告"></a>结合 CI&#x2F;CD 自动生成报告</h1><p>📌 <code>Jenkins Pipeline</code></p><p>🔹 代码示例</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    agent any<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Run Tests&#x27;</span>) &#123;<br>            steps &#123;<br>                sh <span class="hljs-string">&#x27;pytest --alluredir=allure-results&#x27;</span><br>            &#125;<br>        &#125;<br>        stage(<span class="hljs-string">&#x27;Generate Report&#x27;</span>) &#123;<br>            steps &#123;<br>                sh <span class="hljs-string">&#x27;allure generate allure-results -o allure-report --clean&#x27;</span><br>            &#125;<br>        &#125;<br>        stage(<span class="hljs-string">&#x27;Publish Report&#x27;</span>) &#123;<br>            steps &#123;<br>                publishHTML([<span class="hljs-attr">allowMissing:</span> <span class="hljs-literal">false</span>, <span class="hljs-attr">alwaysLinkToLastBuild:</span> <span class="hljs-literal">true</span>, <span class="hljs-attr">keepAll:</span> <span class="hljs-literal">true</span>,<br>                    <span class="hljs-symbol">reportDir:</span> <span class="hljs-string">&#x27;allure-report&#x27;</span>, <span class="hljs-attr">reportFiles:</span> <span class="hljs-string">&#x27;index.html&#x27;</span>, <span class="hljs-attr">reportName:</span> <span class="hljs-string">&#x27;Allure Test Report&#x27;</span>])<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>📌 <code>Jenkins</code> 自动生成 <code>Allure</code> 报告并展示在网页</p><h1 id="allure-dynamic-title-动态更新测试标题"><a href="#allure-dynamic-title-动态更新测试标题" class="headerlink" title="allure.dynamic.title() 动态更新测试标题"></a>allure.dynamic.title() 动态更新测试标题</h1><p>📌 场景：</p><p>✅根据 不同参数 生成 不同测试标题<br>✅适用于 数据驱动测试（DDT）</p><p>🔹 代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> allure<br><span class="hljs-keyword">import</span> pytest<br><br><span class="hljs-meta">@allure.feature(<span class="hljs-params"><span class="hljs-string">&quot;用户管理&quot;</span></span>)</span><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;username, password&quot;</span>, [(<span class="hljs-params"><span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;admin123&quot;</span></span>), (<span class="hljs-params"><span class="hljs-string">&quot;user1&quot;</span>, <span class="hljs-string">&quot;pass123&quot;</span></span>)]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_dynamic_title</span>(<span class="hljs-params">username, password</span>):<br>    allure.dynamic.title(<span class="hljs-string">f&quot;登录测试 - 用户名: <span class="hljs-subst">&#123;username&#125;</span>&quot;</span>)  <span class="hljs-comment"># 动态更新测试标题</span><br>    <span class="hljs-keyword">assert</span> username == <span class="hljs-string">&quot;admin&quot;</span><br></code></pre></td></tr></table></figure><p>📌 <code>Allure</code> 报告中，每个测试用例的标题不同：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">✅ 登录测试 - 用户名: admin<br>✅ 登录测试 - 用户名: user1<br></code></pre></td></tr></table></figure><h1 id="allure-title-静态自定义测试标题"><a href="#allure-title-静态自定义测试标题" class="headerlink" title="@allure.title() 静态自定义测试标题"></a>@allure.title() 静态自定义测试标题</h1><p>📌 场景：</p><p>✅用于手动定义 固定的 测试标题</p><p>🔹 代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@allure.feature(<span class="hljs-params"><span class="hljs-string">&quot;订单管理&quot;</span></span>)</span><br><span class="hljs-meta">@allure.title(<span class="hljs-params"><span class="hljs-string">&quot;测试创建订单功能&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_create_order</span>():<br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&quot;order&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;order_123&quot;</span><br><br></code></pre></td></tr></table></figure><p>📌 <code>Allure</code> 报告中的标题会展示：测试创建订单功能</p><h1 id="allure-description-添加测试用例描述"><a href="#allure-description-添加测试用例描述" class="headerlink" title="@allure.description() 添加测试用例描述"></a>@allure.description() 添加测试用例描述</h1><p>📌 作用：</p><p>✅详细描述 测试用例的目的、步骤、期望结果<br>✅增强可读性</p><p>🔹 代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@allure.feature(<span class="hljs-params"><span class="hljs-string">&quot;支付系统&quot;</span></span>)</span><br><span class="hljs-meta">@allure.story(<span class="hljs-params"><span class="hljs-string">&quot;微信支付&quot;</span></span>)</span><br><span class="hljs-meta">@allure.title(<span class="hljs-params"><span class="hljs-string">&quot;微信支付 - 订单成功测试&quot;</span></span>)</span><br><span class="hljs-meta">@allure.description(<span class="hljs-params"><span class="hljs-string">&quot;&quot;&quot;</span></span></span><br><span class="hljs-string"><span class="hljs-params"><span class="hljs-meta">### 测试步骤：</span></span></span><br><span class="hljs-string"><span class="hljs-params"><span class="hljs-meta">1. 创建一个订单</span></span></span><br><span class="hljs-string"><span class="hljs-params"><span class="hljs-meta">2. 选择微信支付</span></span></span><br><span class="hljs-string"><span class="hljs-params"><span class="hljs-meta">3. 模拟支付成功</span></span></span><br><span class="hljs-string"><span class="hljs-params"><span class="hljs-meta">4. 校验订单状态</span></span></span><br><span class="hljs-string"><span class="hljs-params"><span class="hljs-meta">&quot;&quot;&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_wechat_pay</span>():<br>    <span class="hljs-keyword">assert</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>📌 <code>Allure</code> 报告中，测试用例会有详细描述</p><h1 id="在-Allure-报告中添加用例链接"><a href="#在-Allure-报告中添加用例链接" class="headerlink" title="在 Allure 报告中添加用例链接"></a>在 Allure 报告中添加用例链接</h1><p>📌 作用：</p><p>✅关联 Bug、TestCase、文档<br>✅点击链接可跳转到 JIRA、Testrail、需求文档</p><p>🔹 代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@allure.feature(<span class="hljs-params"><span class="hljs-string">&quot;用户管理&quot;</span></span>)</span><br><span class="hljs-meta">@allure.issue(<span class="hljs-params"><span class="hljs-string">&quot;https://jira.company.com/browse/BUG-1234&quot;</span>, <span class="hljs-string">&quot;JIRA Bug 1234&quot;</span></span>)</span><br><span class="hljs-meta">@allure.testcase(<span class="hljs-params"><span class="hljs-string">&quot;https://testrail.company.com/testcase/5678&quot;</span>, <span class="hljs-string">&quot;测试用例 5678&quot;</span></span>)</span><br><span class="hljs-meta">@allure.link(<span class="hljs-params"><span class="hljs-string">&quot;https://wiki.company.com/test-plan&quot;</span>, name=<span class="hljs-string">&quot;测试计划&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_with_links</span>():<br>    <span class="hljs-keyword">assert</span> <span class="hljs-literal">True</span><br><br></code></pre></td></tr></table></figure><p>📌 <code>Allure</code> 报告中，会显示可点击的链接</p><h1 id="修改-Allure-页面-LOGO"><a href="#修改-Allure-页面-LOGO" class="headerlink" title="修改 Allure 页面 LOGO"></a>修改 Allure 页面 LOGO</h1><p>📌 自定义 <code>LOGO</code> 适用于企业品牌化</p><p>🔹 修改 <code>Allure</code> 主题</p><p>✅修改 <code>allure-report/widgets/summary.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;reportName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;公司内部测试报告&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;logo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://company.com/logo.png&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>✅重新生成报告</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">allure generate allure-results -o allure-report --clean<br></code></pre></td></tr></table></figure><p>📌 修改后，&#96;&#96;Allure<code>报告页面显示公司</code>LOGO&#96;</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table><thead><tr><th>代码示例</th><th>功能</th></tr></thead><tbody><tr><td><code>@allure.feature(&quot;用户管理&quot;)</code></td><td>分类 Feature&#x2F;Story</td></tr><tr><td><code>with allure.step(&quot;步骤名&quot;):</code></td><td>添加测试步骤</td></tr><tr><td><code>allure.attach(driver.get_screenshot_as_png(), &quot;截图&quot;, allure.attachment_type.PNG)</code></td><td>失败截图</td></tr><tr><td><code>environment.properties</code></td><td>添加环境信息</td></tr><tr><td><code>@allure.severity(allure.severity_level.CRITICAL)</code></td><td>设置优先级</td></tr><tr><td><code>allure.dynamic.title(f&quot;测试 - &#123;param&#125;&quot;)</code></td><td>动态更新标题</td></tr><tr><td><code>@allure.title(&quot;固定标题&quot;)</code></td><td>静态标题</td></tr><tr><td><code>@allure.description(&quot;详细测试步骤&quot;)</code></td><td>测试描述</td></tr><tr><td><code>allure.attach.file(&quot;file.png&quot;, name=&quot;截图&quot;)</code></td><td>上传文件</td></tr><tr><td><code>summary.json</code></td><td>修改 LOGO</td></tr></tbody></table><p>🎯 <code>pytest + allure</code> 让自动化测试报告更专业，适用于企业级 <code>CI/CD</code> 🚀</p>]]></content>
    
    
    <categories>
      
      <category>Pytest</category>
      
      <category>Pytest入门系列之pytest和Allure结合详细指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>pytest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytest入门系列之pytest的参数化</title>
    <link href="/2025/03/25/pytest%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%979/"/>
    <url>/2025/03/25/pytest%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%979/</url>
    
    <content type="html"><![CDATA[<h1 id="Pytest入门系列之pytest的参数化"><a href="#Pytest入门系列之pytest的参数化" class="headerlink" title="Pytest入门系列之pytest的参数化"></a>Pytest入门系列之pytest的参数化</h1><p><code>pytest</code> 参数化 允许我们在同一个测试函数中运行多个输入组合，避免重复代码，提高测试覆盖率，特别适用于：</p><p>✅单元测试（多个输入输出组合）<br>✅<code>API</code> 测试（不同请求参数）<br>✅数据库测试（不同数据集）<br>✅前端 UI 测试（不同浏览器）</p><h1 id="pytest-mark-parametrize-基本用法"><a href="#pytest-mark-parametrize-基本用法" class="headerlink" title="@pytest.mark.parametrize 基本用法"></a>@pytest.mark.parametrize 基本用法</h1><p>🔹 示例：测试加法函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><br><span class="hljs-comment"># 被测试函数：简单加法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> x + y<br><br><span class="hljs-comment"># 参数化：测试多个输入组合</span><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;a, b, expected&quot;</span>, [</span></span><br><span class="hljs-params"><span class="hljs-meta">    (<span class="hljs-params"><span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span></span>),   <span class="hljs-comment"># 1 + 2 = 3</span></span></span><br><span class="hljs-params"><span class="hljs-meta">    (<span class="hljs-params">-<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span></span>),  <span class="hljs-comment"># -1 + 5 = 4</span></span></span><br><span class="hljs-params"><span class="hljs-meta">    (<span class="hljs-params"><span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span></span>),   <span class="hljs-comment"># 0 + 0 = 0</span></span></span><br><span class="hljs-params"><span class="hljs-meta">]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_add</span>(<span class="hljs-params">a, b, expected</span>):<br>    <span class="hljs-keyword">assert</span> add(a, b) == expected  <span class="hljs-comment"># 验证结果是否正确</span><br><br></code></pre></td></tr></table></figure><p>📌 执行测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pytest -v<br></code></pre></td></tr></table></figure><p>📌 测试输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">test_example.py::test_add[1-2-3] PASSED<br>test_example.py::test_add[-1-5-4] PASSED<br>test_example.py::test_add[0-0-0] PASSED<br></code></pre></td></tr></table></figure><p>📌 解析</p><p><code>@pytest.mark.parametrize</code>(“参数名1, 参数名2, 期望值”, [（参数1, 参数2, 期望值）])</p><p>每个测试用例都会运行一次，传入不同参数。</p><p>避免重复编写多个 test_add_xxx 测试函数，提高可读性。</p><h1 id="企业实战：参数化-API-测试"><a href="#企业实战：参数化-API-测试" class="headerlink" title="企业实战：参数化 API 测试"></a>企业实战：参数化 API 测试</h1><p>📌 应用场景</p><p>✅<code>API</code> 需要测试多个请求参数<br>✅检查 <code>API</code>返回的 <code>HTTP</code> 状态码<br>✅验证 <code>API</code> 返回的数据结构</p><p>🔹 示例：测试 API 响应</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><span class="hljs-keyword">import</span> requests<br><br>BASE_URL = <span class="hljs-string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span><br><br><span class="hljs-comment"># 参数化 API 请求测试</span><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;post_id, expected_status&quot;</span>, [</span></span><br><span class="hljs-params"><span class="hljs-meta">    (<span class="hljs-params"><span class="hljs-number">1</span>, <span class="hljs-number">200</span></span>),   <span class="hljs-comment"># 测试 ID 1，期望 200</span></span></span><br><span class="hljs-params"><span class="hljs-meta">    (<span class="hljs-params"><span class="hljs-number">100</span>, <span class="hljs-number">200</span></span>), <span class="hljs-comment"># 测试 ID 100，期望 200</span></span></span><br><span class="hljs-params"><span class="hljs-meta">    (<span class="hljs-params"><span class="hljs-number">9999</span>, <span class="hljs-number">404</span></span>),<span class="hljs-comment"># 测试 ID 不存在，期望 404</span></span></span><br><span class="hljs-params"><span class="hljs-meta">]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_api_response</span>(<span class="hljs-params">post_id, expected_status</span>):<br>    response = requests.get(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;BASE_URL&#125;</span>/<span class="hljs-subst">&#123;post_id&#125;</span>&quot;</span>)  <span class="hljs-comment"># 发送请求</span><br>    <span class="hljs-keyword">assert</span> response.status_code == expected_status  <span class="hljs-comment"># 验证 HTTP 状态码</span><br><br></code></pre></td></tr></table></figure><p>📌 执行测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pytest -v<br></code></pre></td></tr></table></figure><p>📌 测试输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">test_api.py::test_api_response[1-200] PASSED<br>test_api.py::test_api_response[100-200] PASSED<br>test_api.py::test_api_response[9999-404] PASSED<br></code></pre></td></tr></table></figure><p>📌 解析</p><p>不同 <code>post_id</code> 发送 <code>API</code> 请求</p><p>检查 <code>response.status_code</code> 是否符合预期</p><p>同一函数可测试多个 <code>API</code> 场景，提升测试效率</p><h1 id="参数化-UI-自动化测试"><a href="#参数化-UI-自动化测试" class="headerlink" title="参数化 UI 自动化测试"></a>参数化 UI 自动化测试</h1><p>📌 应用场景</p><p>✅跨浏览器测试<br>✅不同用户角色测试</p><p>🔹 示例: UI 测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><br><span class="hljs-comment"># 参数化：支持不同浏览器</span><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;browser&quot;</span>, [<span class="hljs-string">&quot;chrome&quot;</span>, <span class="hljs-string">&quot;firefox&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_open_google</span>(<span class="hljs-params">browser</span>):<br>    <span class="hljs-keyword">if</span> browser == <span class="hljs-string">&quot;chrome&quot;</span>:<br>        driver = webdriver.Chrome()  <span class="hljs-comment"># 启动 Chrome</span><br>    <span class="hljs-keyword">elif</span> browser == <span class="hljs-string">&quot;firefox&quot;</span>:<br>        driver = webdriver.Firefox()  <span class="hljs-comment"># 启动 Firefox</span><br>    <span class="hljs-keyword">else</span>:<br>        pytest.fail(<span class="hljs-string">&quot;❌ 不支持的浏览器&quot;</span>)<br><br>    driver.get(<span class="hljs-string">&quot;https://www.google.com&quot;</span>)  <span class="hljs-comment"># 打开 Google</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&quot;Google&quot;</span> <span class="hljs-keyword">in</span> driver.title  <span class="hljs-comment"># 断言页面标题</span><br>    driver.quit()  <span class="hljs-comment"># 关闭浏览器</span><br><br></code></pre></td></tr></table></figure><p>📌 执行测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pytest -v<br></code></pre></td></tr></table></figure><p>📌 测试输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">test_ui.py::test_open_google[chrome] PASSED<br>test_ui.py::test_open_google[firefox] PASSED<br></code></pre></td></tr></table></figure><p>📌 解析</p><p>在 <code>test_open_google</code> 里，自动运行 2 次，分别测试 <code>Chrome</code> 和 <code>Firefox</code></p><p>提升 &#96;&#96;UI&#96; 自动化测试的兼容性</p><h1 id="参数组合（笛卡尔积）"><a href="#参数组合（笛卡尔积）" class="headerlink" title="参数组合（笛卡尔积）"></a>参数组合（笛卡尔积）</h1><p>📌 测试不同浏览器 + 用户角色的组合</p><p>🔹 示例：参数组合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;browser&quot;</span>, [<span class="hljs-string">&quot;chrome&quot;</span>, <span class="hljs-string">&quot;firefox&quot;</span>]</span>)</span><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;user_role&quot;</span>, [<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;guest&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>(<span class="hljs-params">browser, user_role</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;🖥️ 浏览器: <span class="hljs-subst">&#123;browser&#125;</span>, 👤 用户角色: <span class="hljs-subst">&#123;user_role&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>📌 执行测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pytest -v<br></code></pre></td></tr></table></figure><p>📌 生成的组合</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">test_login[chrome-admin] PASSED<br>test_login[chrome-guest] PASSED<br>test_login[firefox-admin] PASSED<br>test_login[firefox-guest] PASSED<br><br></code></pre></td></tr></table></figure><p>📌 4 组测试组合，自动生成（笛卡尔积）</p><h1 id="使用-pytest-param-进行标记"><a href="#使用-pytest-param-进行标记" class="headerlink" title="使用 pytest.param 进行标记"></a>使用 pytest.param 进行标记</h1><p>📌 <code>pytest.param</code> 允许：</p><p>✅单独设置 <code>pytest.mark.xfail</code>（预期失败）<br>✅单独为测试添加<code> id</code> 方便区分</p><p>🔹 示例：部分测试标记 xfail</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;a, b, expected&quot;</span>, [</span></span><br><span class="hljs-params"><span class="hljs-meta">    (<span class="hljs-params"><span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span></span>),  <span class="hljs-comment"># 正常通过</span></span></span><br><span class="hljs-params"><span class="hljs-meta">    pytest.param(<span class="hljs-params"><span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, marks=pytest.mark.xfail(<span class="hljs-params">reason=<span class="hljs-string">&quot;已知问题&quot;</span></span>)</span>), <span class="hljs-comment"># 预期失败</span></span></span><br><span class="hljs-params"><span class="hljs-meta">]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_math</span>(<span class="hljs-params">a, b, expected</span>):<br>    <span class="hljs-keyword">assert</span> a + b == expected<br><br></code></pre></td></tr></table></figure><p>📌 执行测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pytest -v<br></code></pre></td></tr></table></figure><p>📌 输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">test_math[1-2-3] PASSED<br>test_math[2-2-5] XFAIL  <span class="hljs-comment"># 预期失败，不影响整体测试</span><br></code></pre></td></tr></table></figure><p>📌 适用于</p><p>✅标记已知缺陷<br>✅跳过特定测试</p><h1 id="从-Excel-Yaml-Json-数据库-动态加载参数"><a href="#从-Excel-Yaml-Json-数据库-动态加载参数" class="headerlink" title="从 Excel&#x2F;Yaml&#x2F;Json&#x2F;数据库 动态加载参数"></a>从 Excel&#x2F;Yaml&#x2F;Json&#x2F;数据库 动态加载参数</h1><h2 id="从-Excel-读取参数化数据"><a href="#从-Excel-读取参数化数据" class="headerlink" title="从 Excel 读取参数化数据"></a>从 Excel 读取参数化数据</h2><p>📌 场景：</p><p><code>Excel</code> 文件 常用于管理 测试数据，比如：<br>✅ 用户登录测试（账号、密码）<br>✅ 接口测试（API 参数）<br>✅ 前端 UI 测试（不同输入数据）</p><p>📌 为什么使用 <code>pandas</code> 处理 <code>Excel</code>?</p><p>更快：比 <code>openpyxl</code> 解析速度快</p><p>功能更强：可以处理 大规模数据</p><p>数据过滤、转换更方便</p><p>🔹 安装 <code>pandas</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install pandas<br></code></pre></td></tr></table></figure><p>📌 <code>pandas</code> 用于解析 <code>Excel</code></p><p>🔹 创建 <code>Excel</code> 文件<code>（test_data.xlsx）</code></p><p>📌 <code>Excel</code> 示例数据</p><table><thead><tr><th>用户名</th><th>密码</th><th>预期结果</th></tr></thead><tbody><tr><td><code>admin </code></td><td><code>admin123</code></td><td><code>success</code></td></tr><tr><td><code> user1</code></td><td><code>pass123</code></td><td><code>success</code></td></tr><tr><td><code>guest</code></td><td><code> wrongpwd</code></td><td><code>failure</code></td></tr></tbody></table><p>🔹 代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-comment"># 读取 Excel 文件</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_excel_data</span>(<span class="hljs-params">file, sheet_name</span>):<br>    df = pd.read_excel(file, sheet_name=sheet_name)  <span class="hljs-comment"># 读取 Excel</span><br>    <span class="hljs-keyword">return</span> df.values.tolist()  <span class="hljs-comment"># 转换为列表</span><br><br><span class="hljs-comment"># 参数化测试，读取 Excel 数据</span><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;username, password, expected&quot;</span>, load_excel_data(<span class="hljs-params"><span class="hljs-string">&quot;test_data.xlsx&quot;</span>, <span class="hljs-string">&quot;Sheet1&quot;</span></span>)</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login_excel</span>(<span class="hljs-params">username, password, expected</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;🔐 测试登录 - 用户名: <span class="hljs-subst">&#123;username&#125;</span>, 密码: <span class="hljs-subst">&#123;password&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">assert</span> (username == <span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-keyword">and</span> password == <span class="hljs-string">&quot;admin123&quot;</span>) == (expected == <span class="hljs-string">&quot;success&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>🔹 案例： <code>Excel</code> 复杂数据处理</p><p>📌 处理数据格式</p><p>✅去掉 <code>NaN</code> 值<br>✅过滤掉某些列<br>✅修改数据格式</p><p>🔹 代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_cleaned_excel_data</span>(<span class="hljs-params">file, sheet_name</span>):<br>    df = pd.read_excel(file, sheet_name=sheet_name)<br>    df = df.dropna()  <span class="hljs-comment"># 删除 NaN 数据</span><br>    df[<span class="hljs-string">&quot;username&quot;</span>] = df[<span class="hljs-string">&quot;username&quot;</span>].astype(<span class="hljs-built_in">str</span>)  <span class="hljs-comment"># 确保所有用户名为字符串</span><br>    <span class="hljs-keyword">return</span> df[[<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;expected&quot;</span>]].values.tolist()  <span class="hljs-comment"># 只保留三列</span><br><br></code></pre></td></tr></table></figure><p>📌 使用 <code>pytest.mark.parametrize</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;username, password, expected&quot;</span>, load_cleaned_excel_data(<span class="hljs-params"><span class="hljs-string">&quot;test_data.xlsx&quot;</span>, <span class="hljs-string">&quot;Sheet1&quot;</span></span>)</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login_excel_clean</span>(<span class="hljs-params">username, password, expected</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;🔐 测试登录 - 用户名: <span class="hljs-subst">&#123;username&#125;</span>, 密码: <span class="hljs-subst">&#123;password&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">assert</span> (username == <span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-keyword">and</span> password == <span class="hljs-string">&quot;admin123&quot;</span>) == (expected == <span class="hljs-string">&quot;success&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="从-YAML-读取参数化数据"><a href="#从-YAML-读取参数化数据" class="headerlink" title="从 YAML 读取参数化数据"></a>从 YAML 读取参数化数据</h1><p>📌 场景：</p><p><code>YAML</code> 适用于 配置类测试（如环境变量、<code>API</code> 测试）</p><p>🔹 安装依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install pyyaml<br></code></pre></td></tr></table></figure><p>🔹 创建 <code>YAML</code> 文件 <code>(config.yaml)</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">users:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">username:</span> <span class="hljs-string">&quot;admin&quot;</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;admin123&quot;</span><br>    <span class="hljs-attr">expected:</span> <span class="hljs-string">&quot;success&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">username:</span> <span class="hljs-string">&quot;user1&quot;</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;pass123&quot;</span><br>    <span class="hljs-attr">expected:</span> <span class="hljs-string">&quot;success&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">username:</span> <span class="hljs-string">&quot;guest&quot;</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;wrongpwd&quot;</span><br>    <span class="hljs-attr">expected:</span> <span class="hljs-string">&quot;failure&quot;</span><br><br></code></pre></td></tr></table></figure><p>🔹 代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><span class="hljs-keyword">import</span> yaml<br><br><span class="hljs-comment"># 读取 YAML 数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_yaml_data</span>(<span class="hljs-params">file</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        data = yaml.safe_load(f)<br>    <span class="hljs-keyword">return</span> [(user[<span class="hljs-string">&quot;username&quot;</span>], user[<span class="hljs-string">&quot;password&quot;</span>], user[<span class="hljs-string">&quot;expected&quot;</span>]) <span class="hljs-keyword">for</span> user <span class="hljs-keyword">in</span> data[<span class="hljs-string">&quot;users&quot;</span>]]<br><br><span class="hljs-comment"># 参数化 YAML 数据</span><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;username, password, expected&quot;</span>, load_yaml_data(<span class="hljs-params"><span class="hljs-string">&quot;config.yaml&quot;</span></span>)</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login_yaml</span>(<span class="hljs-params">username, password, expected</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;🔐 YAML 测试登录 - 用户名: <span class="hljs-subst">&#123;username&#125;</span>, 密码: <span class="hljs-subst">&#123;password&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">assert</span> (username == <span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-keyword">and</span> password == <span class="hljs-string">&quot;admin123&quot;</span>) == (expected == <span class="hljs-string">&quot;success&quot;</span>)<br></code></pre></td></tr></table></figure><p>📌 适用于</p><p>✅ 测试环境变量、配置类参数<br>✅ <code>API</code> 测试数据维护</p><h1 id="从-JSON-读取参数化数据"><a href="#从-JSON-读取参数化数据" class="headerlink" title="从 JSON 读取参数化数据"></a>从 JSON 读取参数化数据</h1><p>📌 场景：</p><p>✅<code>JSON</code> 适用于 <code>API</code> 测试<br>✅接口入参存储在 <code>JSON</code> 文件中</p><p>🔹 创建 <code>JSON</code> 文件 <code>(test_data.json)</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin123&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;expected&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pass123&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;expected&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;guest&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;wrongpwd&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;expected&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;failure&quot;</span> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br><br></code></pre></td></tr></table></figure><p>🔹 代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment"># 读取 JSON 数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_json_data</span>(<span class="hljs-params">file</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        data = json.load(f)<br>    <span class="hljs-keyword">return</span> [(user[<span class="hljs-string">&quot;username&quot;</span>], user[<span class="hljs-string">&quot;password&quot;</span>], user[<span class="hljs-string">&quot;expected&quot;</span>]) <span class="hljs-keyword">for</span> user <span class="hljs-keyword">in</span> data]<br><br><span class="hljs-comment"># 参数化 JSON 数据</span><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;username, password, expected&quot;</span>, load_json_data(<span class="hljs-params"><span class="hljs-string">&quot;test_data.json&quot;</span></span>)</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login_json</span>(<span class="hljs-params">username, password, expected</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;🔐 JSON 测试登录 - 用户名: <span class="hljs-subst">&#123;username&#125;</span>, 密码: <span class="hljs-subst">&#123;password&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">assert</span> (username == <span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-keyword">and</span> password == <span class="hljs-string">&quot;admin123&quot;</span>) == (expected == <span class="hljs-string">&quot;success&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>📌 适用于<br>✅ <code>REST API</code> 测试<br>✅ 数据驱动测试<code>（DDT）</code></p><h1 id="从-MySQL-数据库读取参数化数据"><a href="#从-MySQL-数据库读取参数化数据" class="headerlink" title="从 MySQL 数据库读取参数化数据"></a>从 MySQL 数据库读取参数化数据</h1><p>📌 场景：</p><p>✅直接从 MySQL 获取测试数据（如用户信息、订单信息）<br>✅适用于 数据驱动测试（DDT）</p><p>🔹 安装 <code>pymysql</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install pymysql<br></code></pre></td></tr></table></figure><p>🔹 创建测试数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE test_db;<br>USE test_db;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> users (<br>    id <span class="hljs-type">INT</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY,<br>    username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>),<br>    password <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>),<br>    expected <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>)<br>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users (username, password, expected) <span class="hljs-keyword">VALUES</span> <br>(&quot;admin&quot;, &quot;admin123&quot;, &quot;success&quot;),<br>(&quot;user1&quot;, &quot;pass123&quot;, &quot;success&quot;),<br>(&quot;guest&quot;, &quot;wrongpwd&quot;, &quot;failure&quot;);<br><br></code></pre></td></tr></table></figure><p>🔹 代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><span class="hljs-keyword">import</span> pymysql<br><br><span class="hljs-comment"># 连接 MySQL，查询数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_mysql_data</span>():<br>    conn = pymysql.connect(host=<span class="hljs-string">&quot;localhost&quot;</span>, user=<span class="hljs-string">&quot;root&quot;</span>, password=<span class="hljs-string">&quot;root&quot;</span>, database=<span class="hljs-string">&quot;test_db&quot;</span>)<br>    cursor = conn.cursor()<br>    cursor.execute(<span class="hljs-string">&quot;SELECT username, password, expected FROM users&quot;</span>)<br>    data = cursor.fetchall()<br>    conn.close()<br>    <span class="hljs-keyword">return</span> data<br><br><span class="hljs-comment"># 参数化数据库数据</span><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;username, password, expected&quot;</span>, load_mysql_data(<span class="hljs-params"></span>)</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login_mysql</span>(<span class="hljs-params">username, password, expected</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;🔐 MySQL 测试登录 - 用户名: <span class="hljs-subst">&#123;username&#125;</span>, 密码: <span class="hljs-subst">&#123;password&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">assert</span> (username == <span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-keyword">and</span> password == <span class="hljs-string">&quot;admin123&quot;</span>) == (expected == <span class="hljs-string">&quot;success&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>📌 适用于<br>✅ 数据库测试（如订单、用户数据）<br>✅ 测试真实业务数据</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table><thead><tr><th>数据源</th><th>适用场景</th><th>预期结代码示例</th></tr></thead><tbody><tr><td><code>Excel（pandas） </code></td><td>手动维护的测试数据（如账号&#x2F;密码）</td><td><code>load_excel_data(&quot;test_data.xlsx&quot;)</code></td></tr><tr><td><code> YAML（pyyaml）</code></td><td>配置文件、环境变量测试</td><td><code>load_yaml_data(&quot;config.yaml&quot;)</code></td></tr><tr><td><code>JSON（json）</code></td><td>API 参数测试</td><td><code>load_json_data(&quot;test_data.json&quot;)</code></td></tr><tr><td><code>MySQL（pymysql）</code></td><td>数据库数据驱动测试</td><td><code>load_mysql_data()</code></td></tr></tbody></table><p>以上几种的参数化都会极大的提高我们的工作效率，至于选择什么作为数据源基本都差不多，当然还是要结合你的实际业务选择！</p>]]></content>
    
    
    <categories>
      
      <category>Pytest</category>
      
      <category>Pytest入门系列之pytest的参数化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>pytest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytest入门系列之pytest的常见三方插件</title>
    <link href="/2025/03/25/pytest%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%978/"/>
    <url>/2025/03/25/pytest%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%978/</url>
    
    <content type="html"><![CDATA[<h1 id="Pytest入门系列之pytest的常见三方插件"><a href="#Pytest入门系列之pytest的常见三方插件" class="headerlink" title="Pytest入门系列之pytest的常见三方插件"></a>Pytest入门系列之pytest的常见三方插件</h1><p><code>pytest</code> 提供了大量插件，可以增强测试能力，比如： </p><p>✅ 并行执行<br>✅ 生成测试报告<br>✅ 测试覆盖率统计<br>✅ <code>Mock</code> 数据<br>✅ 数据库测试<br>✅ 自动失败重试<br>✅ <code>API</code> 测试</p><h1 id="pytest-xdist：并行执行，提高测试速度"><a href="#pytest-xdist：并行执行，提高测试速度" class="headerlink" title="pytest-xdist：并行执行，提高测试速度"></a>pytest-xdist：并行执行，提高测试速度</h1><p>📌 <code>pytest-xdist</code> 可以并行运行多个测试，提升执行效率。适用于：</p><p>✅大规模测试套件<br>✅<code>API、UI</code>自动化测试<br>✅<code>CI/CD</code> 提速</p><p>🔹 安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install pytest-xdist<br></code></pre></td></tr></table></figure><p>🔹 用法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">pytest -n 4  <span class="hljs-comment"># 4 个 CPU 核心并行执行</span><br>pytest -n auto  <span class="hljs-comment"># 自动检测 CPU 核心数</span><br><br></code></pre></td></tr></table></figure><p>🔹 实战案例：加速 API 测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>API_ENDPOINTS = [<br>    <span class="hljs-string">&quot;https://jsonplaceholder.typicode.com/posts/1&quot;</span>,<br>    <span class="hljs-string">&quot;https://jsonplaceholder.typicode.com/posts/2&quot;</span>,<br>    <span class="hljs-string">&quot;https://jsonplaceholder.typicode.com/posts/3&quot;</span>,<br>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_api</span>(<span class="hljs-params">url</span>):<br>    response = requests.get(url)<br>    <span class="hljs-keyword">return</span> response.json()<br><br><span class="hljs-keyword">import</span> pytest<br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;url&quot;</span>, API_ENDPOINTS</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_api_performance</span>(<span class="hljs-params">url</span>):<br>    start_time = time.time()<br>    data = fetch_api(url)<br>    duration = time.time() - start_time<br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&quot;userId&quot;</span> <span class="hljs-keyword">in</span> data<br>    <span class="hljs-keyword">assert</span> duration &lt; <span class="hljs-number">2</span>  <span class="hljs-comment"># API 响应必须在 2 秒内</span><br><br></code></pre></td></tr></table></figure><p>📌 并行执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pytest -n 3<br></code></pre></td></tr></table></figure><p>📌 单线程：3s，4 线程并行：1s 🚀</p><h1 id="pytest-html：生成可视化-HTML-测试报告"><a href="#pytest-html：生成可视化-HTML-测试报告" class="headerlink" title="pytest-html：生成可视化 HTML 测试报告"></a>pytest-html：生成可视化 HTML 测试报告</h1><p>📌 <code>pytest-html</code> 生成详细的 <code>HTML</code> 报告，适用于：</p><p>✅CI&#x2F;CD 持续集成<br>✅测试数据可视化<br>✅团队测试报告共享</p><p>🔹 安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install pytest-html<br></code></pre></td></tr></table></figure><p>🔹 生成 HTML 报告</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pytest --html=report.html --self-contained-html<br></code></pre></td></tr></table></figure><p>🔹 实战案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_addition</span>():<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> + <span class="hljs-number">1</span> == <span class="hljs-number">2</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_string</span>():<br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&quot;pytest&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;pytest is awesome&quot;</span><br><br></code></pre></td></tr></table></figure><p>📌 打开 report.html，查看可视化报告</p><h1 id="pytest-cov：代码覆盖率分析"><a href="#pytest-cov：代码覆盖率分析" class="headerlink" title="pytest-cov：代码覆盖率分析"></a>pytest-cov：代码覆盖率分析</h1><p>📌 <code>pytest-cov</code> 用于 统计测试覆盖率，找出未测试的代码。适用于：</p><p>✅单元测试<br>✅重构代码，找出未覆盖部分<br>✅CI&#x2F;CD 质量检查</p><p>🔹 安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install pytest-cov<br></code></pre></td></tr></table></figure><p>🔹 运行测试 + 生成覆盖率报告</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pytest --cov=my_project<br></code></pre></td></tr></table></figure><p>🔹 代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># my_project/calculator.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> x + y<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">multiply</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> x * y<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># test_calculator.py</span><br><span class="hljs-keyword">from</span> my_project.calculator <span class="hljs-keyword">import</span> add<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_add</span>():<br>    <span class="hljs-keyword">assert</span> add(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>) == <span class="hljs-number">5</span><br><br></code></pre></td></tr></table></figure><p>📌 运行 <code>pytest --cov=my_project</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">----------- coverage: 50% -----------<br>calculator.py | 2 | 1 | 50%<br></code></pre></td></tr></table></figure><p>📌 发现 <code>multiply()</code> 没有测试！</p><h1 id="pytest-mock：模拟-HTTP-请求，数据库，函数"><a href="#pytest-mock：模拟-HTTP-请求，数据库，函数" class="headerlink" title="pytest-mock：模拟 HTTP 请求，数据库，函数"></a>pytest-mock：模拟 HTTP 请求，数据库，函数</h1><p>📌 <code>pytest-mock</code> 用于<code> Mock</code> 依赖的函数&#x2F;对象，避免真实请求，适用于：</p><p>✅模拟 <code>API</code> 返回数据<br>✅模拟数据库连接<br>✅<code>Mock</code> 类方法</p><p>🔹 安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install pytest-mock<br></code></pre></td></tr></table></figure><p>🔹 实战案例：<code>Mock HTTP</code> 请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_data</span>():<br>    response = requests.get(<span class="hljs-string">&quot;https://api.example.com/data&quot;</span>)<br>    <span class="hljs-keyword">return</span> response.json()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_mock_api</span>(<span class="hljs-params">mocker</span>):<br>    mock_response = mocker.Mock()<br>    mock_response.json.return_value = &#123;<span class="hljs-string">&quot;key&quot;</span>: <span class="hljs-string">&quot;mock_value&quot;</span>&#125;<br>    mocker.patch(<span class="hljs-string">&quot;requests.get&quot;</span>, return_value=mock_response)<br><br>    result = fetch_data()<br>    <span class="hljs-keyword">assert</span> result == &#123;<span class="hljs-string">&quot;key&quot;</span>: <span class="hljs-string">&quot;mock_value&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>📌 <code>requests.get</code> 不会真的请求 <code>API</code>，而是返回 <code>Mock</code> 数据</p><h1 id="pytest-django：Django-项目专用"><a href="#pytest-django：Django-项目专用" class="headerlink" title="pytest-django：Django 项目专用"></a>pytest-django：Django 项目专用</h1><p>📌 <code>pytest-django</code> 优化 <code>Django</code> 测试，提供数据库回滚、<code>ORM</code> 测试支持。</p><p>🔹 安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install pytest-django<br><br></code></pre></td></tr></table></figure><p>🔹 配置</p><p>在 <code>pytest.ini</code> 里添加：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[pytest]</span><br><span class="hljs-attr">DJANGO_SETTINGS_MODULE</span> = myproject.settings<br></code></pre></td></tr></table></figure><p>🔹 实战案例：测试 <code>Django ORM</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><span class="hljs-keyword">from</span> myapp.models <span class="hljs-keyword">import</span> User<br><br><span class="hljs-meta">@pytest.mark.django_db</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_create_user</span>():<br>    user = User.objects.create(username=<span class="hljs-string">&quot;testuser&quot;</span>)<br>    <span class="hljs-keyword">assert</span> user.username == <span class="hljs-string">&quot;testuser&quot;</span><br><br></code></pre></td></tr></table></figure><p>📌 数据库测试自动回滚，不影响数据。</p><h1 id="pytest-rerunfailures：失败自动重试"><a href="#pytest-rerunfailures：失败自动重试" class="headerlink" title="pytest-rerunfailures：失败自动重试"></a>pytest-rerunfailures：失败自动重试</h1><p>📌 <code>pytest-rerunfailures</code> 让失败的测试自动重试，适用于：</p><p>✅不稳定的 <code>API / UI</code> 测试<br>✅<code>CI/CD</code> 避免因偶然失败导致构建失败</p><p>🔹 安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install pytest-rerunfailures<br></code></pre></td></tr></table></figure><p>🔹 用法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">pytest --reruns 3  <span class="hljs-comment"># 失败时最多重试 3 次</span><br>pytest --reruns 3 --reruns-delay 2  <span class="hljs-comment"># 每次重试间隔 2 秒</span><br></code></pre></td></tr></table></figure><p>🔹 代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_unstable</span>():<br>    <span class="hljs-keyword">assert</span> random.choice([<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>])<br></code></pre></td></tr></table></figure><p>📌 如果失败，会自动重试 3 次</p><h1 id="pytest-faker：生成随机数据"><a href="#pytest-faker：生成随机数据" class="headerlink" title="pytest-faker：生成随机数据"></a>pytest-faker：生成随机数据</h1><p>📌 <code>pytest-faker</code> 自动生成测试数据（如姓名、邮箱、地址），适用于：</p><p>✅用户注册测试<br>✅模拟表单提交<br>✅随机化数据</p><p>🔹 安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install pytest-faker<br></code></pre></td></tr></table></figure><p>🔹 代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_faker</span>(<span class="hljs-params">faker</span>):<br>    name = faker.name()<br>    email = faker.email()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;🧑 生成用户: <span class="hljs-subst">&#123;name&#125;</span>, 📧 邮箱: <span class="hljs-subst">&#123;email&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&quot;@&quot;</span> <span class="hljs-keyword">in</span> email<br><br></code></pre></td></tr></table></figure><p>📌 运行后，每次生成不同的名字和邮箱</p><h1 id="pytest-timeout：防止死循环"><a href="#pytest-timeout：防止死循环" class="headerlink" title="pytest-timeout：防止死循环"></a>pytest-timeout：防止死循环</h1><p>📌 pytest-timeout 限制测试运行时间，避免死循环，适用于：</p><p>✅API &#x2F; UI 超时检测<br>✅避免慢测试阻塞 CI&#x2F;CD</p><p>🔹 安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install pytest-timeout<br></code></pre></td></tr></table></figure><p>🔹 代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_slow</span>():<br>    time.sleep(<span class="hljs-number">10</span>)  <span class="hljs-comment"># 超时</span><br></code></pre></td></tr></table></figure><p>📌 运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pytest --<span class="hljs-built_in">timeout</span>=5  <span class="hljs-comment"># 超过 5 秒自动失败</span><br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table><thead><tr><th>插件</th><th>适用场景</th><th>命令示例</th></tr></thead><tbody><tr><td><code>pytest-xdist </code></td><td>并行执行测试</td><td><code>pytest -n 4</code></td></tr><tr><td><code> pytest-html</code></td><td>生成 HTML 报告</td><td><code>pytest --html=report.html</code></td></tr><tr><td><code>pytest-cov</code></td><td>测试覆盖率</td><td><code>pytest --cov=my_project</code></td></tr><tr><td><code>pytest-mock</code></td><td>Mock 测试</td><td><code>mocker.patch()</code></td></tr><tr><td><code>pytest-django</code></td><td>Django ORM 测试</td><td><code>@pytest.mark.django_db</code></td></tr><tr><td><code>pytest-rerunfailures</code></td><td>测试失败重试</td><td><code>pytest --reruns 3</code></td></tr><tr><td><code>pytest-faker</code></td><td>生成假数据</td><td><code>faker.email()</code></td></tr><tr><td><code>pytest-timeout</code></td><td>测试超时</td><td><code>pytest --timeout=5</code></td></tr></tbody></table><p>以上只是常见的插件，pytest拥有非常丰富的插件，大家可以在评论区说一下你经常用那个呢？</p>]]></content>
    
    
    <categories>
      
      <category>Pytest</category>
      
      <category>Pytest入门系列之pytest的常见三方插件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>pytest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytest入门系列之pytest的hooks功能</title>
    <link href="/2025/03/24/pytest%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%977/"/>
    <url>/2025/03/24/pytest%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%977/</url>
    
    <content type="html"><![CDATA[<h1 id="Pytest入门系列之pytest的hooks功能"><a href="#Pytest入门系列之pytest的hooks功能" class="headerlink" title="Pytest入门系列之pytest的hooks功能"></a>Pytest入门系列之pytest的hooks功能</h1><p>📌 <code>pytest hooks</code> 是 <code>pytest</code> 提供的插件机制，允许开发者在测试运行的不同阶段插入自定义逻辑，比如：</p><p>✅在测试开始前执行初始化</p><p>✅在测试执行后收集结果</p><p>✅自定义测试发现和报告</p><p>✅修改测试用例执行流程</p><h1 id="什么是-pytest-hooks？"><a href="#什么是-pytest-hooks？" class="headerlink" title="什么是 pytest hooks？"></a>什么是 pytest hooks？</h1><p><code>pytest hooks</code> 由 <code>pytest</code> 提供的回调函数 组成，用户可以重写这些函数来修改 <code>pytest</code> 行为。</p><p><code>pytest hooks</code> 的定义格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">pytest_钩子名称</span>(<span class="hljs-params">参数</span>):<br>    <span class="hljs-comment"># 自定义逻辑</span><br></code></pre></td></tr></table></figure><p>📌 如何使用 <code>pytest hooks</code>？</p><p>所有 <code>pytest hooks</code> 必须写在 <code>conftest.py </code>中。</p><p><code>pytest</code>自动检测 <code>conftest.py</code> 里的 <code>hooks</code>，无需导入。</p><p>📌 示例：拦截 <code>pytest</code> 运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># conftest.py</span><br><span class="hljs-keyword">import</span> pytest<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pytest_runtest_setup</span>(<span class="hljs-params">item</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n🔧 运行前：设置测试环境 - <span class="hljs-subst">&#123;item.name&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pytest_runtest_teardown</span>(<span class="hljs-params">item</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n🗑️  运行后：清理测试环境 - <span class="hljs-subst">&#123;item.name&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_example</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;✅ 运行 test_example&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>📌 运行结果</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">🔧 运行前：设置测试环境 - test_example<br>✅ 运行 test_example<br>🗑️  运行后：清理测试环境 - test_example<br></code></pre></td></tr></table></figure><h1 id="常见-pytest-hooks-速查表"><a href="#常见-pytest-hooks-速查表" class="headerlink" title="常见 pytest hooks 速查表"></a>常见 pytest hooks 速查表</h1><table><thead><tr><th>Hook 名称</th><th>作用</th></tr></thead><tbody><tr><td><code>pytest_configure </code></td><td>测试启动时执行（全局设置）</td></tr><tr><td><code> pytest_unconfigure</code></td><td>测试结束时执行（清理资源）</td></tr><tr><td><code>pytest_sessionstart</code></td><td>测试会话开始时执行</td></tr><tr><td><code>pytest_sessionfinish</code></td><td>测试会话结束时执行</td></tr><tr><td><code>pytest_collection_modifyitems</code></td><td>修改收集到的测试用例（重命名、跳过等）</td></tr><tr><td><code>pytest_runtest_setup</code></td><td>测试函数运行前执行</td></tr><tr><td><code>pytest_runtest_teardown</code></td><td>测试函数运行后执行</td></tr><tr><td><code>pytest_runtest_call</code></td><td>实际运行测试函数</td></tr><tr><td><code>pytest_runtest_logreport</code></td><td>获取测试结果</td></tr><tr><td><code>pytest_addoption</code></td><td>自定义命令行参数</td></tr><tr><td><code>pytest_terminal_summary</code></td><td>测试结束后自定义报告</td></tr></tbody></table><h1 id="pytest-configure-pytest-unconfigure：全局初始化和清理"><a href="#pytest-configure-pytest-unconfigure：全局初始化和清理" class="headerlink" title="pytest_configure &amp; pytest_unconfigure：全局初始化和清理"></a>pytest_configure &amp; pytest_unconfigure：全局初始化和清理</h1><p>📌 <code>pytest_configure()</code> 和 <code>pytest_unconfigure()</code> 适用于全局配置和测试结束后清理资源。</p><p>。</p><p>🔹 示例：测试开始时连接数据库，测试结束后断开</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># conftest.py</span><br><span class="hljs-keyword">import</span> pytest<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pytest_configure</span>(<span class="hljs-params">config</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n🔗 连接数据库...&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pytest_unconfigure</span>(<span class="hljs-params">config</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n❌ 断开数据库连接...&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>📌 运行输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">🔗 连接数据库...<br>✅ 运行测试...<br>❌ 断开数据库连接...<br><br></code></pre></td></tr></table></figure><p>📌 适用于</p><p>✅ 全局资源初始化</p><p>✅ 日志记录</p><p>✅ 设置全局变量</p><h1 id="pytest-runtest-setup-pytest-runtest-teardown：测试函数前后置"><a href="#pytest-runtest-setup-pytest-runtest-teardown：测试函数前后置" class="headerlink" title="pytest_runtest_setup &amp; pytest_runtest_teardown：测试函数前后置"></a>pytest_runtest_setup &amp; pytest_runtest_teardown：测试函数前后置</h1><p>📌 适用于测试级别的前后置逻辑，比如：</p><p>✅打开和关闭数据库连接</p><p>✅初始化测试数据</p><p>✅模拟用户登录</p><p>🔹 示例：测试开始前初始化，结束后清理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># conftest.py</span><br><span class="hljs-keyword">import</span> pytest<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pytest_runtest_setup</span>(<span class="hljs-params">item</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n🔧 设置测试环境: <span class="hljs-subst">&#123;item.name&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pytest_runtest_teardown</span>(<span class="hljs-params">item</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n🗑️ 清理测试环境: <span class="hljs-subst">&#123;item.name&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_example</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;✅ 运行 test_example&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>📌 运行输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">🔧 设置测试环境: test_example<br>✅ 运行 test_example<br>🗑️ 清理测试环境: test_example<br><br></code></pre></td></tr></table></figure><p>📌 适用于</p><p>✅测试前创建数据库表</p><p>✅测试后删除文件</p><h1 id="pytest-collection-modifyitems：修改测试用例"><a href="#pytest-collection-modifyitems：修改测试用例" class="headerlink" title="pytest_collection_modifyitems：修改测试用例"></a>pytest_collection_modifyitems：修改测试用例</h1><p>📌 可以用于：</p><p>✅重命名测试（添加前缀、转换编码）</p><p>✅自动跳过特定测试</p><p>✅按关键字排序测试</p><p>🔹 示例：修改测试名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># conftest.py</span><br><span class="hljs-keyword">import</span> pytest<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pytest_collection_modifyitems</span>(<span class="hljs-params">items</span>):<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> items:<br>        item.name = item.name.upper()  <span class="hljs-comment"># 把测试名称改为大写</span><br>        item._nodeid = item.nodeid.upper()<br><br></code></pre></td></tr></table></figure><p>📌 运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">pytest -v<br><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">test_example.py::TEST_EXAMPLE ✅<br></code></pre></td></tr></table></figure><p>📌 适用于</p><p>✅自动翻译测试名称</p><p>✅修改测试运行顺序</p><h1 id="pytest-addoption：添加命令行参数"><a href="#pytest-addoption：添加命令行参数" class="headerlink" title="pytest_addoption：添加命令行参数"></a>pytest_addoption：添加命令行参数</h1><p>📌 自定义 pytest 命令行参数，可用于：</p><p>✅选择测试环境</p><p>✅开启或关闭调试模式</p><p>✅传递测试数据</p><p>🔹 示例：添加 –env 选项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># conftest.py</span><br><span class="hljs-keyword">import</span> pytest<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pytest_addoption</span>(<span class="hljs-params">parser</span>):<br>    parser.addoption(<span class="hljs-string">&quot;--env&quot;</span>, action=<span class="hljs-string">&quot;store&quot;</span>, default=<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;选择环境: dev, test, prod&quot;</span>)<br><br><span class="hljs-meta">@pytest.fixture</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">env</span>(<span class="hljs-params">pytestconfig</span>):<br>    <span class="hljs-keyword">return</span> pytestconfig.getoption(<span class="hljs-string">&quot;--env&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_env</span>(<span class="hljs-params">env</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;✅ 当前环境: <span class="hljs-subst">&#123;env&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>📌 运行不同环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">pytest test_env.py --<span class="hljs-built_in">env</span>=dev  ✅ 运行开发环境<br>pytest test_env.py --<span class="hljs-built_in">env</span>=prod ✅ 运行生产环境<br></code></pre></td></tr></table></figure><h1 id="pytest-terminal-summary：自定义测试报告"><a href="#pytest-terminal-summary：自定义测试报告" class="headerlink" title="pytest_terminal_summary：自定义测试报告"></a>pytest_terminal_summary：自定义测试报告</h1><p>📌 pytest_terminal_summary() 可用于自定义测试报告，比如：</p><p>✅统计通过&#x2F;失败的测试</p><p>✅生成 HTML&#x2F;CSV 报告</p><p>✅在测试完成后发送邮件通知</p><p>🔹 示例：统计失败的测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># conftest.py</span><br><span class="hljs-keyword">import</span> pytest<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pytest_terminal_summary</span>(<span class="hljs-params">terminalreporter</span>):<br>    total = terminalreporter.stats.get(<span class="hljs-string">&quot;passed&quot;</span>, [])<br>    failed = terminalreporter.stats.get(<span class="hljs-string">&quot;failed&quot;</span>, [])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n✅ 通过测试: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(total)&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;❌ 失败测试: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(failed)&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>📌 运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pytest<br></code></pre></td></tr></table></figure><p>📌 示例输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">✅ 通过测试: <span class="hljs-number">3</span><br>❌ 失败测试: <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p>📌 适用于</p><p>✅ CI&#x2F;CD 报告</p><p>✅ 统计测试结果</p><p>✅ 自动化邮件通知</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上面只是提供了一些经常遇见的，后面有时间继续补充其他的案例。</p>]]></content>
    
    
    <categories>
      
      <category>Pytest</category>
      
      <category>Pytest入门系列之pytest的hooks功能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>pytest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytest入门系列之pytest的conftest.py</title>
    <link href="/2025/03/21/pytest%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%976/"/>
    <url>/2025/03/21/pytest%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%976/</url>
    
    <content type="html"><![CDATA[<h1 id="Pytest入门系列之pytest的conftest-py"><a href="#Pytest入门系列之pytest的conftest-py" class="headerlink" title="Pytest入门系列之pytest的conftest.py"></a>Pytest入门系列之pytest的conftest.py</h1><p><code>pytest</code> 的本地插件系统核心文件，用于：<br>✅ 定义测试夹具（<code>fixtures</code>）<br>✅ 实现自定义 <code>hooks</code><br>✅ 加载外部插件<br>✅ 配置测试环境</p><p>📌 特性：目录级作用域，支持嵌套配置</p><h1 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h1><h2 id="创建fixture"><a href="#创建fixture" class="headerlink" title="创建fixture"></a>创建fixture</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># tests/conftest.py</span><br><span class="hljs-meta">@pytest.fixture</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_data</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    基础用户数据夹具（函数作用域）</span><br><span class="hljs-string">    每次测试函数调用时都会重新初始化</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n[初始化] 创建用户数据...&quot;</span>)<br>    data = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">30</span>, <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;alice@example.com&quot;</span>&#125;<br>    <span class="hljs-keyword">yield</span> data  <span class="hljs-comment"># 测试用例获取数据的节点</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n[清理] 清除用户数据...&quot;</span>)  <span class="hljs-comment"># 测试完成后执行</span><br><br><span class="hljs-comment"># tests/test_basic.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_user_age</span>(<span class="hljs-params">user_data</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;验证用户年龄是否合法&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;测试数据：<span class="hljs-subst">&#123;user_data&#125;</span>&quot;</span>)  <span class="hljs-comment"># 打印测试数据</span><br>    <span class="hljs-keyword">assert</span> user_data[<span class="hljs-string">&quot;age&quot;</span>] &gt;= <span class="hljs-number">18</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_user_email</span>(<span class="hljs-params">user_data</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;验证邮箱格式&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&quot;@&quot;</span> <span class="hljs-keyword">in</span> user_data[<span class="hljs-string">&quot;email&quot;</span>]<br></code></pre></td></tr></table></figure><p>🔍 执行过程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">test_basic.py::test_user_age <br>[初始化] 创建用户数据...<br>测试数据：&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: 30, <span class="hljs-string">&#x27;email&#x27;</span>: <span class="hljs-string">&#x27;alice@example.com&#x27;</span>&#125;<br>PASSED<br>[清理] 清除用户数据...<br><br>test_basic.py::test_user_email <br>[初始化] 创建用户数据...<br>PASSED<br>[清理] 清除用户数据...<br><br></code></pre></td></tr></table></figure><h2 id="共享-fixture"><a href="#共享-fixture" class="headerlink" title="共享 fixture"></a>共享 fixture</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># tests/conftest.py</span><br><span class="hljs-meta">@pytest.fixture</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">shared_resource</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;跨多个测试文件共享的资源&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;counter&quot;</span>: <span class="hljs-number">0</span>&#125;<br><br><span class="hljs-comment"># test_file1.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_counter_1</span>(<span class="hljs-params">shared_resource</span>):<br>    shared_resource[<span class="hljs-string">&quot;counter&quot;</span>] += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">assert</span> shared_resource[<span class="hljs-string">&quot;counter&quot;</span>] == <span class="hljs-number">1</span><br><br><span class="hljs-comment"># test_file2.py </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_counter_2</span>(<span class="hljs-params">shared_resource</span>):<br>    <span class="hljs-keyword">assert</span> shared_resource[<span class="hljs-string">&quot;counter&quot;</span>] == <span class="hljs-number">0</span>  <span class="hljs-comment"># 函数作用域重置</span><br></code></pre></td></tr></table></figure><p>🔍 可以看出不管在test_file1还是test_file2中运行均可以得到该值</p><h1 id="中级用法"><a href="#中级用法" class="headerlink" title="中级用法"></a>中级用法</h1><h2 id="作用域控制"><a href="#作用域控制" class="headerlink" title="作用域控制"></a>作用域控制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># tests/conftest.py</span><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;module&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">db_connection</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    数据库连接夹具（模块级作用域）</span><br><span class="hljs-string">    整个测试模块共享同一个连接</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n=== 建立数据库连接 ===&quot;</span>)<br>    conn = &#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;connected&quot;</span>, <span class="hljs-string">&quot;handle&quot;</span>: <span class="hljs-string">&quot;DB12345&quot;</span>&#125;<br>    <span class="hljs-keyword">yield</span> conn<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n=== 关闭数据库连接 ===&quot;</span>)<br><br><span class="hljs-comment"># tests/test_database.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_query_1</span>(<span class="hljs-params">db_connection</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;执行第一个查询&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前连接：<span class="hljs-subst">&#123;db_connection&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">assert</span> db_connection[<span class="hljs-string">&quot;status&quot;</span>] == <span class="hljs-string">&quot;connected&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_query_2</span>(<span class="hljs-params">db_connection</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;执行第二个查询&quot;&quot;&quot;</span><br>    db_connection[<span class="hljs-string">&quot;last_query&quot;</span>] = <span class="hljs-string">&quot;SELECT * FROM users&quot;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&quot;last_query&quot;</span> <span class="hljs-keyword">in</span> db_connection<br><br></code></pre></td></tr></table></figure><p>🔍 执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">test_database.py::test_query_1 <br>=== 建立数据库连接 ===<br>当前连接：&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;connected&#x27;</span>, <span class="hljs-string">&#x27;handle&#x27;</span>: <span class="hljs-string">&#x27;DB12345&#x27;</span>&#125;<br>PASSED<br><br>test_database.py::test_query_2 <br>PASSED<br>=== 关闭数据库连接 ===<br><br></code></pre></td></tr></table></figure><h2 id="参数化-fixture"><a href="#参数化-fixture" class="headerlink" title="参数化 fixture"></a>参数化 fixture</h2><p>📌 多浏览器测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># tests/conftest.py</span><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">params=[<span class="hljs-string">&quot;chrome&quot;</span>, <span class="hljs-string">&quot;firefox&quot;</span>, <span class="hljs-string">&quot;edge&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">browser</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    参数化浏览器驱动</span><br><span class="hljs-string">    每个参数值都会生成独立的测试用例</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n启动 <span class="hljs-subst">&#123;request.param&#125;</span> 浏览器&quot;</span>)<br>    driver = &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: request.param,<br>        <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;ready&quot;</span>,<br>        <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;102.0&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">yield</span> driver<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n关闭 <span class="hljs-subst">&#123;request.param&#125;</span> 浏览器&quot;</span>)<br><br><span class="hljs-comment"># tests/test_browser.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_browser_init</span>(<span class="hljs-params">browser</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;验证浏览器初始化状态&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> browser[<span class="hljs-string">&quot;status&quot;</span>] == <span class="hljs-string">&quot;ready&quot;</span><br>    <span class="hljs-keyword">assert</span> browser[<span class="hljs-string">&quot;version&quot;</span>] == <span class="hljs-string">&quot;102.0&quot;</span><br><br></code></pre></td></tr></table></figure><p>🔍 执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">test_browser.py::test_browser_init[chrome] <br>启动 chrome 浏览器<br>PASSED<br>关闭 chrome 浏览器<br><br>test_browser.py::test_browser_init[firefox] <br>启动 firefox 浏览器<br>PASSED<br>关闭 firefox 浏览器<br><br>test_browser.py::test_browser_init[edge] <br>启动 edge 浏览器<br>PASSED<br>关闭 edge 浏览器<br><br></code></pre></td></tr></table></figure><h2 id="自动夹具"><a href="#自动夹具" class="headerlink" title="自动夹具"></a>自动夹具</h2><p>📌 全局环境设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># tests/conftest.py</span><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">autouse=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">global_setup</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    自动应用的全局设置夹具</span><br><span class="hljs-string">    所有测试用例都会自动使用</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n--- 全局前置操作 ---&quot;</span>)<br>    <span class="hljs-keyword">yield</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n--- 全局后置操作 ---&quot;</span>)<br><br><span class="hljs-comment"># tests/test_auto.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_sample_1</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;简单测试示例1&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;执行测试1&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_sample_2</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;简单测试示例2&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;执行测试2&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>🔍 执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">test_auto.py::test_sample_1 <br>--- 全局前置操作 ---<br>执行测试1<br>PASSED<br>--- 全局后置操作 ---<br><br>test_auto.py::test_sample_2 <br>--- 全局前置操作 ---<br>执行测试2<br>PASSED<br>--- 全局后置操作 ---<br></code></pre></td></tr></table></figure><h1 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h1><h2 id="动态配置"><a href="#动态配置" class="headerlink" title="动态配置"></a>动态配置</h2><p>📌 环境变量注入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># tests/conftest.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pytest_addoption</span>(<span class="hljs-params">parser</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;添加自定义命令行参数&quot;&quot;&quot;</span><br>    parser.addoption(<span class="hljs-string">&quot;--env&quot;</span>, <br>                   action=<span class="hljs-string">&quot;store&quot;</span>,<br>                   default=<span class="hljs-string">&quot;dev&quot;</span>,<br>                   choices=[<span class="hljs-string">&quot;dev&quot;</span>, <span class="hljs-string">&quot;staging&quot;</span>, <span class="hljs-string">&quot;prod&quot;</span>],<br>                   <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;设置运行环境&quot;</span>)<br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;session&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">api_config</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;根据环境参数生成配置&quot;&quot;&quot;</span><br>    env = request.config.getoption(<span class="hljs-string">&quot;--env&quot;</span>)<br>    configs = &#123;<br>        <span class="hljs-string">&quot;dev&quot;</span>: &#123;<span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;https://dev.api.com&quot;</span>, <span class="hljs-string">&quot;timeout&quot;</span>: <span class="hljs-number">5</span>&#125;,<br>        <span class="hljs-string">&quot;staging&quot;</span>: &#123;<span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;https://stage.api.com&quot;</span>, <span class="hljs-string">&quot;timeout&quot;</span>: <span class="hljs-number">10</span>&#125;,<br>        <span class="hljs-string">&quot;prod&quot;</span>: &#123;<span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;https://api.com&quot;</span>, <span class="hljs-string">&quot;timeout&quot;</span>: <span class="hljs-number">15</span>&#125;<br>    &#125;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n加载 <span class="hljs-subst">&#123;env&#125;</span> 环境配置&quot;</span>)<br>    <span class="hljs-keyword">return</span> configs[env]<br><br><span class="hljs-comment"># tests/test_api.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_api_endpoint</span>(<span class="hljs-params">api_config</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;验证接口地址&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> api_config[<span class="hljs-string">&quot;url&quot;</span>].startswith(<span class="hljs-string">&quot;https://&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_timeout_setting</span>(<span class="hljs-params">api_config</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;验证超时设置&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> api_config[<span class="hljs-string">&quot;timeout&quot;</span>] &gt; <span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><p>📌 ‌执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pytest --<span class="hljs-built_in">env</span>=prod tests/test_api.py -v<br></code></pre></td></tr></table></figure><p>🔍 执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">加载 prod 环境配置<br>test_api.py::test_api_endpoint PASSED<br>test_api.py::test_timeout_setting PASSED<br><br></code></pre></td></tr></table></figure><h2 id="自定义-hooks"><a href="#自定义-hooks" class="headerlink" title="自定义 hooks"></a>自定义 hooks</h2><p>📌  这里不做深刻的解释，hooks 会单独章节讲解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># tests/conftest.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pytest_runtest_setup</span>(<span class="hljs-params">item</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;在每个测试执行前添加自定义逻辑&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;slow&quot;</span> <span class="hljs-keyword">in</span> item.keywords:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n检测到慢速测试，开始监控资源...&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pytest_configure</span>(<span class="hljs-params">config</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;配置阶段添加自定义标记&quot;&quot;&quot;</span><br>    config.addinivalue_line(<br>        <span class="hljs-string">&quot;markers&quot;</span>,<br>        <span class="hljs-string">&quot;stress: 压力测试标记&quot;</span><br>    )<br></code></pre></td></tr></table></figure><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><h2 id="用户对象工厂"><a href="#用户对象工厂" class="headerlink" title="用户对象工厂"></a>用户对象工厂</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># tests/conftest.py</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserFactory</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;可定制的用户对象工厂&quot;&quot;&quot;</span><br><span class="hljs-meta">    @pytest.fixture</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_user</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;用户创建模板&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">_factory</span>(<span class="hljs-params">**overrides</span>):<br>            base_user = &#123;<br>                <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1000</span>,<br>                <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;default_user&quot;</span>,<br>                <span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;member&quot;</span>,<br>                <span class="hljs-string">&quot;active&quot;</span>: <span class="hljs-literal">True</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> &#123;zwnj;**base_user, **zwnj;overrides&#125;<br>        <span class="hljs-keyword">return</span> _factory<br><br><span class="hljs-meta">@pytest.fixture</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_factory</span>():<br>    <span class="hljs-keyword">return</span> UserFactory()<br><br><span class="hljs-comment"># tests/test_factory.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_admin_user</span>(<span class="hljs-params">user_factory</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;创建管理员用户&quot;&quot;&quot;</span><br>    admin = user_factory.create_user(<br>        username=<span class="hljs-string">&quot;admin&quot;</span>,<br>        role=<span class="hljs-string">&quot;admin&quot;</span><br>    )<br>    <span class="hljs-keyword">assert</span> admin[<span class="hljs-string">&quot;role&quot;</span>] == <span class="hljs-string">&quot;admin&quot;</span><br>    <span class="hljs-keyword">assert</span> admin[<span class="hljs-string">&quot;id&quot;</span>] == <span class="hljs-number">1000</span>  <span class="hljs-comment"># 继承默认值</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_inactive_user</span>(<span class="hljs-params">user_factory</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;创建禁用用户&quot;&quot;&quot;</span><br>    user = user_factory.create_user(active=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">assert</span> user[<span class="hljs-string">&quot;active&quot;</span>] <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span><br><br></code></pre></td></tr></table></figure><p>🔍 执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">test_factory.py::test_admin_user PASSED<br>test_factory.py::test_inactive_user PASSED<br></code></pre></td></tr></table></figure><h1 id="实践总结"><a href="#实践总结" class="headerlink" title="实践总结"></a>实践总结</h1><h2 id="分层配置"><a href="#分层配置" class="headerlink" title="分层配置"></a>分层配置</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs text">project/<br>├── conftest.py          # 全局基础夹具<br>│   ├── 数据库连接池<br>│   └── 配置加载器<br>├── tests/<br>│   ├── api/<br>│   │   └── conftest.py  # API测试专用夹具<br>│   │       ├── 认证令牌<br>│   │       └── 请求客户端<br>│   └── ui/<br>│       └── conftest.py  # 界面测试专用<br>│           ├── 浏览器管理<br>│           └── 页面对象<br>└── pytest.ini<br><br></code></pre></td></tr></table></figure><h2 id="夹具依赖图"><a href="#夹具依赖图" class="headerlink" title="夹具依赖图"></a>夹具依赖图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 典型依赖关系示例</span><br><span class="hljs-meta">@pytest.fixture</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">api_client</span>(<span class="hljs-params">config</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;依赖配置的API客户端&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> APIClient(config[<span class="hljs-string">&quot;url&quot;</span>])<br><br><span class="hljs-meta">@pytest.fixture</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">auth_token</span>(<span class="hljs-params">api_client</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;依赖API客户端的认证令牌&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> api_client.login()<br><br><span class="hljs-meta">@pytest.fixture</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_profile</span>(<span class="hljs-params">auth_token, api_client</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;复合依赖的用户档案&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> api_client.get_profile(auth_token)<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过合理使用 <code>conftest.py</code>，可以实现很多复杂的管理以及测试逻辑的高度复用</p>]]></content>
    
    
    <categories>
      
      <category>Pytest</category>
      
      <category>Pytest入门系列之pytest的conftest.py</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>pytest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytest入门系列之pytest的ini配置文件</title>
    <link href="/2025/03/21/pytest%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%975/"/>
    <url>/2025/03/21/pytest%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%975/</url>
    
    <content type="html"><![CDATA[<h1 id="Pytest入门系列之pytest的ini配置文件"><a href="#Pytest入门系列之pytest的ini配置文件" class="headerlink" title="Pytest入门系列之pytest的ini配置文件"></a>Pytest入门系列之pytest的ini配置文件</h1><p><code>pytest</code> 的主配置文件，用于：<br>✅设置默认命令行选项<br>✅配置测试发现规则<br>✅定义全局 <code>Fixture</code> 和插件<br>✅ 管理测试环境参数</p><h1 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h1><h2 id="文件位置与结构"><a href="#文件位置与结构" class="headerlink" title="文件位置与结构"></a>文件位置与结构</h2><p>📌 首先需要创建一个<code>ini</code>文件，取名为<code>pytest.ini</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 项目根目录创建 pytest.ini</span><br><span class="hljs-section">[pytest]</span><br><span class="hljs-comment"># 基本配置项</span><br><span class="hljs-attr">addopts</span> = -v --tb=short<br><span class="hljs-attr">testpaths</span> = tests<br><span class="hljs-attr">python_files</span> = test_*.py<br></code></pre></td></tr></table></figure><p>🔍 验证配置生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pytest --<span class="hljs-built_in">help</span> | grep <span class="hljs-string">&quot;config file&quot;</span><br></code></pre></td></tr></table></figure><h2 id="核心配置项"><a href="#核心配置项" class="headerlink" title="核心配置项"></a>核心配置项</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[pytest]</span><br><span class="hljs-comment"># 默认命令行参数（多个值用空格分隔）</span><br>&quot;&quot;&quot;<br>-ra  显示所有测试结果摘要  <br>-q 精简输出模式<br><span class="hljs-attr">--durations</span>=<span class="hljs-number">10</span>  <span class="hljs-comment"># 显示最慢的10个测试</span><br><span class="hljs-attr">--junitxml</span>=reports/junit.xml  <span class="hljs-comment"># 生成JUnit报告</span><br><span class="hljs-attr">--color</span>=<span class="hljs-literal">yes</span>  启用终端信息的彩色输出<br>&quot;&quot;&quot;<br><span class="hljs-attr">addopts</span> = -ra -q --durations=<span class="hljs-number">10</span> --junitxml=reports/junit.xml --color=<span class="hljs-literal">yes</span>  <br><span class="hljs-comment"># 测试文件匹配规则</span><br><span class="hljs-attr">python_files</span> = test_*.py<br><span class="hljs-attr">python_classes</span> = Test* *Test<br><span class="hljs-attr">python_functions</span> = test_*<br><br><span class="hljs-comment"># 测试目录（多个目录用空格分隔）</span><br><span class="hljs-attr">testpaths</span> = tests/login tests/team<br><br><span class="hljs-comment"># 排除目录（支持通配符）</span><br><span class="hljs-attr">norecursedirs</span> = <br>    .git<br>    build<br>    dist<br>    legacy_*<br><br><span class="hljs-comment"># 禁用警告</span><br><span class="hljs-attr">filterwarnings</span> =<br>    ignore:.*deprecated.*:DeprecationWarning<br>    error<br></code></pre></td></tr></table></figure><h1 id="中级配置"><a href="#中级配置" class="headerlink" title="中级配置"></a>中级配置</h1><h2 id="自定义标记"><a href="#自定义标记" class="headerlink" title="自定义标记"></a>自定义标记</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[pytest]</span><br>markers =<br>    <span class="hljs-comment"># 冒烟测试标记（可通过 -m smoke 选择）</span><br>    smoke: 冒烟测试（每日执行）<br>    <span class="hljs-comment"># 数据库测试标记（自动跳过无DB环境）</span><br>    db: 需要数据库连接的测试<br>    <span class="hljs-comment"># 性能测试标记（单独执行）</span><br>    performance: 性能测试（单独执行）<br>    nightly: 夜间执行的长耗时测试<br>    <span class="hljs-comment"># 自定义重试机制（需配合pytest-rerunfailures插件）</span><br>    flaky(<span class="hljs-attr">reruns</span>=<span class="hljs-number">2</span>, reruns_delay=<span class="hljs-number">1</span>): 不稳定的测试用例<br></code></pre></td></tr></table></figure><p>🔹 示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@pytest.mark.smoke</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;核心登录功能测试&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> auth.login() == <span class="hljs-number">200</span><br><br><span class="hljs-meta">@pytest.mark.db</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_user_query</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;数据库用户查询测试&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> db.query_user(<span class="hljs-number">1</span>) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span><br><br><br></code></pre></td></tr></table></figure><h2 id="日志系统集成"><a href="#日志系统集成" class="headerlink" title="日志系统集成"></a>日志系统集成</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[pytest]</span><br><span class="hljs-attr">log_level</span> = DEBUG     <span class="hljs-comment"># 控制台日志级别</span><br><span class="hljs-attr">log_cli</span> = <span class="hljs-literal">true</span>        <span class="hljs-comment"># 启用实时命令行日志</span><br><span class="hljs-attr">log_format</span> = <span class="hljs-string">&quot;%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)&quot;</span>  <span class="hljs-comment"># 日志格式</span><br><span class="hljs-attr">log_date_format</span> = <span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>  <span class="hljs-comment"># 时间格式</span><br><span class="hljs-attr">log_file</span> = logs/pytest.log  <span class="hljs-comment"># 文件日志路径</span><br><span class="hljs-attr">log_file_level</span> = INFO       <span class="hljs-comment"># 文件日志级别</span><br><br></code></pre></td></tr></table></figure><h2 id="测试数据隔离"><a href="#测试数据隔离" class="headerlink" title="测试数据隔离"></a>测试数据隔离</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[pytest]</span><br><span class="hljs-comment"># 数据库连接配置（通过环境变量覆盖）</span><br><span class="hljs-attr">db_host</span> = localhost      <span class="hljs-comment"># 数据库主机</span><br><span class="hljs-attr">db_port</span> = <span class="hljs-number">5432</span>           <span class="hljs-comment"># 默认PostgreSQL端口</span><br><span class="hljs-attr">db_name</span> = test_db        <span class="hljs-comment"># 测试专用数据库</span><br><span class="hljs-attr">db_timeout</span> = <span class="hljs-number">5</span>           <span class="hljs-comment"># 连接超时时间（秒）</span><br></code></pre></td></tr></table></figure><p>🔹 示例： 使用示例（<code>conftest.py</code>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;session&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">database</span>(<span class="hljs-params">pytestconfig</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;创建数据库连接的全局 Fixture&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> psycopg2.connect(<br>        host=pytestconfig.getini(<span class="hljs-string">&quot;db_host&quot;</span>),<br>        port=pytestconfig.getini(<span class="hljs-string">&quot;db_port&quot;</span>),<br>        database=pytestconfig.getini(<span class="hljs-string">&quot;db_name&quot;</span>),<br>        connect_timeout=pytestconfig.getini(<span class="hljs-string">&quot;db_timeout&quot;</span>)<br>    )<br></code></pre></td></tr></table></figure><h1 id="高级配置-企业级实践"><a href="#高级配置-企业级实践" class="headerlink" title="高级配置 (企业级实践)"></a>高级配置 (企业级实践)</h1><h2 id="动态配置生成"><a href="#动态配置生成" class="headerlink" title="动态配置生成"></a>动态配置生成</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># conftest.py（根据环境加载配置）</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pytest_configure</span>(<span class="hljs-params">config</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;根据命令行参数动态修改配置&quot;&quot;&quot;</span><br>    env = config.getoption(<span class="hljs-string">&quot;--env&quot;</span>)<br>    <span class="hljs-keyword">if</span> env == <span class="hljs-string">&quot;prod&quot;</span>:<br>        <span class="hljs-comment"># 生产环境使用不同的数据库配置</span><br>        config.inicfg[<span class="hljs-string">&quot;db_host&quot;</span>] = <span class="hljs-string">&quot;prod-db.example.com&quot;</span><br>        config.inicfg[<span class="hljs-string">&quot;db_name&quot;</span>] = <span class="hljs-string">&quot;prod_db&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pytest_addoption</span>(<span class="hljs-params">parser</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;添加自定义命令行参数&quot;&quot;&quot;</span><br>    parser.addoption(<br>        <span class="hljs-string">&quot;--env&quot;</span>, <br>        action=<span class="hljs-string">&quot;store&quot;</span>,<br>        default=<span class="hljs-string">&quot;dev&quot;</span>,<br>        choices=[<span class="hljs-string">&quot;dev&quot;</span>, <span class="hljs-string">&quot;staging&quot;</span>, <span class="hljs-string">&quot;prod&quot;</span>],<br>        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;设置运行环境&quot;</span><br>    )<br></code></pre></td></tr></table></figure><h2 id="多环境配置方案"><a href="#多环境配置方案" class="headerlink" title="多环境配置方案"></a>多环境配置方案</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># pytest.ini</span><br><span class="hljs-section">[pytest]</span><br><span class="hljs-attr">env_files</span> = <br>    config/env_dev.ini   <span class="hljs-comment"># 开发环境配置</span><br>    config/env_prod.ini  <span class="hljs-comment"># 生产环境配置</span><br></code></pre></td></tr></table></figure><p>🔹 示例：环境配置文件示例 (<code>config/env_prod.ini</code>)：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[db]</span><br><span class="hljs-attr">host</span> = prod-db.example.com<br><span class="hljs-attr">port</span> = <span class="hljs-number">5432</span><br><span class="hljs-attr">user</span> = prod_user<br><span class="hljs-attr">password</span> = <span class="hljs-variable">$&#123;DB_PASSWORD&#125;</span>  <span class="hljs-comment"># 从环境变量读取敏感信息</span><br></code></pre></td></tr></table></figure><h2 id="安全配置规范"><a href="#安全配置规范" class="headerlink" title="安全配置规范"></a>安全配置规范</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[pytest]</span><br><span class="hljs-attr">xfail_strict</span> = <span class="hljs-literal">true</span>  <span class="hljs-comment"># 将意外成功的xfail用例标记为失败</span><br><span class="hljs-attr">filterwarnings</span> = <br>    error                  <span class="hljs-comment"># 将警告升级为错误</span><br>    ignore::DeprecationWarning  <span class="hljs-comment"># 忽略所有弃用警告</span><br>    ignore:.*Unexpected kwargs.*:UserWarning  <span class="hljs-comment"># 忽略特定警告</span><br><br><br></code></pre></td></tr></table></figure><h1 id="效能优化"><a href="#效能优化" class="headerlink" title="效能优化"></a>效能优化</h1><h2 id="缓存配置优化"><a href="#缓存配置优化" class="headerlink" title="缓存配置优化"></a>缓存配置优化</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[pytest]</span><br><span class="hljs-attr">cache_dir</span> = .pytest_cache  <span class="hljs-comment"># 指定缓存目录</span><br><span class="hljs-attr">enable_caching</span> = <span class="hljs-literal">true</span>      <span class="hljs-comment"># 启用测试缓存</span><br><span class="hljs-attr">cache_show</span> = <span class="hljs-literal">true</span>          <span class="hljs-comment"># 显示缓存使用情况</span><br></code></pre></td></tr></table></figure><h2 id="并行测试配置"><a href="#并行测试配置" class="headerlink" title="并行测试配置"></a>并行测试配置</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[pytest]</span><br><span class="hljs-attr">addopts</span> = -n auto         <span class="hljs-comment"># 自动检测CPU核心数</span><br><span class="hljs-attr">dist</span> = loadscope         <span class="hljs-comment"># 按测试模块分发任务</span><br><span class="hljs-attr">tx</span> = <span class="hljs-number">3</span>                   <span class="hljs-comment"># 每个worker的超时时间(分钟)</span><br></code></pre></td></tr></table></figure><h2 id="分层配置架构"><a href="#分层配置架构" class="headerlink" title="分层配置架构"></a>分层配置架构</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">project/<br>├── pytest.ini          # 全局基础配置<br>├── conftest.py         # 全局Fixtures和hooks<br>├── config/<br>│   ├── env_dev.ini     # 开发环境参数<br>│   └── env_prod.ini    # 生产环境参数<br>└── tests/<br>    ├── conftest.py     # 测试目录级配置<br>    └── api/<br>        └── conftest.py # API测试专用配置<br></code></pre></td></tr></table></figure><h1 id="调试与验证"><a href="#调试与验证" class="headerlink" title="调试与验证"></a>调试与验证</h1><h2 id="配置验证命令"><a href="#配置验证命令" class="headerlink" title="配置验证命令"></a>配置验证命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看生效配置</span><br>pytest --version<br><br><span class="hljs-comment"># 检查配置语法</span><br>pytest --check-config<br><br><span class="hljs-comment"># 调试模式（显示加载过程）</span><br>PYTEST_DEBUG=1 pytest -rA<br><br></code></pre></td></tr></table></figure><h2 id="配置覆盖示例"><a href="#配置覆盖示例" class="headerlink" title="配置覆盖示例"></a>配置覆盖示例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 临时覆盖日志配置</span><br>pytest -o <span class="hljs-string">&quot;log_cli=false&quot;</span> -o <span class="hljs-string">&quot;log_file=debug.log&quot;</span><br><br><span class="hljs-comment"># 动态修改测试目录</span><br>pytest -o <span class="hljs-string">&quot;testpaths=tests/unit&quot;</span> <br><br></code></pre></td></tr></table></figure><h2 id="完整配置实例"><a href="#完整配置实例" class="headerlink" title="完整配置实例"></a>完整配置实例</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[pytest]</span><br><span class="hljs-comment"># 核心运行配置</span><br><span class="hljs-attr">addopts</span> = -v -ra --strict-markers --tb=short<br><span class="hljs-attr">testpaths</span> = tests<br><span class="hljs-attr">python_files</span> = test_*.py<br><span class="hljs-attr">python_classes</span> = Test* *Test<br><span class="hljs-attr">python_functions</span> = test_*<br><br><span class="hljs-comment"># 标记管理系统</span><br><span class="hljs-attr">markers</span> =<br>    smoke: 核心功能验证<br>    db: 需要数据库连接<br>    api: 外部API调用测试<br><br><span class="hljs-comment"># 环境配置系统</span><br><span class="hljs-attr">env_files</span> = config/env.ini<br><br><span class="hljs-comment"># 日志管理系统</span><br><span class="hljs-attr">log_cli</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">log_level</span> = INFO<br><span class="hljs-attr">log_format</span> = <span class="hljs-string">&quot;%(asctime)s [%(levelname)s] %(message)s&quot;</span><br><span class="hljs-attr">log_file</span> = reports/pytest.log<br><br><span class="hljs-comment"># 安全配置</span><br><span class="hljs-attr">filterwarnings</span> = error<br><span class="hljs-attr">xfail_strict</span> = <span class="hljs-literal">true</span><br><br></code></pre></td></tr></table></figure><p>📌 配置文件需保存为 UTF-8 编码，避免中文乱码问题。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>pytest.ini</code> 可以很高效的提高我们的开发效率和质量</p>]]></content>
    
    
    <categories>
      
      <category>Pytest</category>
      
      <category>Pytest入门系列之pytest的ini配置文件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>pytest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytest入门系列之pytest的内置fixture</title>
    <link href="/2025/03/20/pytest%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%974/"/>
    <url>/2025/03/20/pytest%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%974/</url>
    
    <content type="html"><![CDATA[<h1 id="Pytest入门系列之pytest的内置fixture"><a href="#Pytest入门系列之pytest的内置fixture" class="headerlink" title="Pytest入门系列之pytest的内置fixture"></a>Pytest入门系列之pytest的内置fixture</h1><p><code>pytest</code> 提供了许多内置的 <code>fixture</code>，用于处理测试执行、临时目录、参数化、标记等功能，大大简化测试编写。</p><h2 id="什么是-pytest-内置-fixture？"><a href="#什么是-pytest-内置-fixture？" class="headerlink" title="什么是 pytest 内置 fixture？"></a>什么是 pytest 内置 fixture？</h2><p>在 <code>pytest</code> 中，<code>fixture</code> 是 测试前后置 机制，允许我们自动初始化资源，并在测试完成后清理资源。<code>pytest</code> 还提供了一些内置 <code>fixture</code>，可直接使用，无需手动创建。</p><p>📌 如何使用 <code>pytest</code> 内置 <code>fixture</code>？</p><p>只需在测试函数参数中传入 <code>fixture</code> 的名称，<code>pytest</code> 会自动提供相应的对象或功能。</p><p>无需 <code>import</code>，因为它们是 <code>pytest</code> 预定义的 <code>fixture</code>。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_example</span>(<span class="hljs-params">tmp_path</span>):<br>    <span class="hljs-built_in">print</span>(tmp_path)  <span class="hljs-comment"># pytest 自动提供临时路径</span><br><br></code></pre></td></tr></table></figure><h2 id="常见-pytest-内置-fixture"><a href="#常见-pytest-内置-fixture" class="headerlink" title="常见 pytest 内置 fixture"></a>常见 pytest 内置 fixture</h2><table><thead><tr><th>内置 <code>fixture</code></th><th>作用</th></tr></thead><tbody><tr><td><code>request </code></td><td>访问当前测试信息</td></tr><tr><td><code> monkeypatch</code></td><td>修改环境变量、类、函数等</td></tr><tr><td><code>tmpdir</code></td><td>提供临时目录<code>（py.path.local 对象）</code></td></tr><tr><td><code>tmp_pathd</code></td><td>提供临时目录<code>（pathlib.Path 对象）</code></td></tr><tr><td><code>capsys</code></td><td>捕获 <code>sys.stdout</code> 和 <code>sys.stderr</code></td></tr><tr><td><code>caplog</code></td><td>捕获日志输出</td></tr><tr><td><code>recwarn</code></td><td>捕获 <code>warnings</code> 警告</td></tr><tr><td><code>pytestconfig</code></td><td>捕获 <code>pytest</code> 命令行参数</td></tr><tr><td><code>doctest_namespace</code></td><td>修改  <code>doctest_namespace</code> 运行环境</td></tr></tbody></table><h1 id="request"><a href="#request" class="headerlink" title="request"></a>request</h1><h2 id="request：访问当前测试信息"><a href="#request：访问当前测试信息" class="headerlink" title="request：访问当前测试信息"></a>request：访问当前测试信息</h2><p>📌 <code>request</code> 是 <code>pytest</code> 内置的 <code>fixture</code>，用于获取当前测试信息，包括：</p><p>✅ 获取当前测试名称、模块、类<br>✅ 获取 <code>fixture</code> 传递的参数<br>✅ 动态修改 <code>fixture</code> 行为（动态配置 fixture）</p><p>🔹 示例 1：获取当前测试信息</p><p><code>request.node.name</code> → 当前测试函数名<br><code>request.module</code> → 当前测试模块<br><code>request.cls</code> → 当前测试类（在 class 作用域内）<br><code>request.function</code> → 当前测试函数对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><br><span class="hljs-meta">@pytest.fixture</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_fixture</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n📌 当前测试函数: <span class="hljs-subst">&#123;request.node.name&#125;</span>&quot;</span>)  <span class="hljs-comment"># 获取测试函数名</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;📌 测试所在模块: <span class="hljs-subst">&#123;request.module.__name__&#125;</span>&quot;</span>)  <span class="hljs-comment"># 获取模块名</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;📌 是否在类中运行: <span class="hljs-subst">&#123;request.cls&#125;</span>&quot;</span>)  <span class="hljs-comment"># 如果是类方法，返回类名；否则返回 None</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, Pytest!&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_with_request</span>(<span class="hljs-params">my_fixture</span>):<br>    <span class="hljs-built_in">print</span>(my_fixture)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestExample</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_class_method</span>(<span class="hljs-params">self, my_fixture</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;✅ 运行类中的测试方法&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>📌 运行后输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">📌 当前测试函数: test_with_request<br>📌 测试所在模块: test_example<br>📌 是否在类中运行: None<br>Hello, Pytest!<br><br>📌 当前测试函数: test_class_method<br>📌 测试所在模块: test_example<br>📌 是否在类中运行: &lt;class <span class="hljs-string">&#x27;TestExample&#x27;</span>&gt;<br>✅ 运行类中的测试方法<br><br></code></pre></td></tr></table></figure><p>🔍 解析</p><p><code>request.node.name</code> → 获取当前测试函数名称<br><code>request.module.__name__</code> → 获取当前测试所在的模块<br><code>request.cls</code> → 如果测试在 <code>class</code> 内部，则返回类对象，否则返回 &#96;None&#96;&#96;</p><h2 id="获取-fixture-传递的参数"><a href="#获取-fixture-传递的参数" class="headerlink" title="获取 fixture 传递的参数"></a>获取 fixture 传递的参数</h2><p>📌 <code>request</code> 可以获取 <code>fixture</code> 传递的参数，使用 <code>request.param</code>。</p><p>🔹 示例：参数化 <code>fixture</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">params=[<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;editor&quot;</span>, <span class="hljs-string">&quot;viewer&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_role</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> request.param  <span class="hljs-comment"># 获取参数值</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_user_role</span>(<span class="hljs-params">user_role</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前用户角色: <span class="hljs-subst">&#123;user_role&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">assert</span> user_role <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;editor&quot;</span>, <span class="hljs-string">&quot;viewer&quot;</span>]<br><br></code></pre></td></tr></table></figure><p>📌 运行时，<code>pytest</code> 会自动为 <code>user_role</code> 生成 3 组测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">test_user_role[admin] ✅<br>test_user_role[editor] ✅<br>test_user_role[viewer] ✅<br><br></code></pre></td></tr></table></figure><p>🔍 解析</p><p><code>params=[&quot;admin&quot;, &quot;editor&quot;, &quot;viewer&quot;]</code> 让 <code>fixture</code> 自动生成多个测试<br><code>request.param</code> 获取传递的值，每次测试 自动注入 <code>&quot;admin&quot;、&quot;editor&quot;、&quot;viewer&quot;</code>‘</p><h2 id="动态修改-fixture-行为"><a href="#动态修改-fixture-行为" class="headerlink" title="动态修改 fixture 行为"></a>动态修改 fixture 行为</h2><p>📌 <code>request</code> 允许我们根据 <code>fixture</code> 传递的参数 动态修改 <code>fixture </code>行为。</p><p>🔹 示例：动态调整<code> fixture</code> 逻辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">params=[<span class="hljs-string">&quot;mysql&quot;</span>, <span class="hljs-string">&quot;postgres&quot;</span>, <span class="hljs-string">&quot;sqlite&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">db_connection</span>(<span class="hljs-params">request</span>):<br>    db_type = request.param<br>    <span class="hljs-keyword">if</span> db_type == <span class="hljs-string">&quot;mysql&quot;</span>:<br>        conn = <span class="hljs-string">&quot;MySQL Connection&quot;</span><br>    <span class="hljs-keyword">elif</span> db_type == <span class="hljs-string">&quot;postgres&quot;</span>:<br>        conn = <span class="hljs-string">&quot;PostgreSQL Connection&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        conn = <span class="hljs-string">&quot;SQLite Connection&quot;</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n🔗 连接到数据库: <span class="hljs-subst">&#123;conn&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">yield</span> conn<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n❌ 关闭数据库连接: <span class="hljs-subst">&#123;conn&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_database</span>(<span class="hljs-params">db_connection</span>):<br>    <span class="hljs-keyword">assert</span> db_connection <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;MySQL Connection&quot;</span>, <span class="hljs-string">&quot;PostgreSQL Connection&quot;</span>, <span class="hljs-string">&quot;SQLite Connection&quot;</span>]<br><br></code></pre></td></tr></table></figure><p>📌 运行输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">🔗 连接到数据库: MySQL Connection<br>✅ 运行 test_database<br>❌ 关闭数据库连接: MySQL Connection<br><br>🔗 连接到数据库: PostgreSQL Connection<br>✅ 运行 test_database<br>❌ 关闭数据库连接: PostgreSQL Connection<br><br>🔗 连接到数据库: SQLite Connection<br>✅ 运行 test_database<br>❌ 关闭数据库连接: SQLite Connection<br><br></code></pre></td></tr></table></figure><p>🔍 解析</p><p><code>request.param</code> 传递不同的数据库类型：<code>&quot;mysql&quot;、&quot;postgres&quot;、&quot;sqlite&quot;</code><br><code>fixture</code> 动态选择数据库连接<br><code>yield</code> 测试结束后自动关闭数据库</p><h2 id="结合-pytestconfig-进行动态配置"><a href="#结合-pytestconfig-进行动态配置" class="headerlink" title="结合 pytestconfig 进行动态配置"></a>结合 pytestconfig 进行动态配置</h2><p>📌 <code>request.fixturenames</code> 获取当前测试函数使用的所有 <code>fixture</code>。</p><p>🔹 示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><br><span class="hljs-meta">@pytest.fixture</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fixture1</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;fixture1_data&quot;</span><br><br><span class="hljs-meta">@pytest.fixture</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fixture2</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;fixture2_data&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_fixtures</span>(<span class="hljs-params">request, fixture1, fixture2</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n🔍 当前测试使用的 `fixture`:&quot;</span>)<br>    <span class="hljs-keyword">for</span> fix <span class="hljs-keyword">in</span> request.fixturenames:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;- <span class="hljs-subst">&#123;fix&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>📌 运行输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">🔍 当前测试使用的 `fixture`:<br>- request<br>- fixture1<br>- fixture2<br><br></code></pre></td></tr></table></figure><p>🔍 解析</p><p><code>request.fixturenames</code> 列出当前测试使用的所有 <code>fixture</code><br>适用于调试 <code>fixture</code> 依赖关系</p><h1 id="monkeypatch：修改环境变量、类、函数"><a href="#monkeypatch：修改环境变量、类、函数" class="headerlink" title="monkeypatch：修改环境变量、类、函数"></a>monkeypatch：修改环境变量、类、函数</h1><p>📌 monkeypatch 允许在测试中临时修改环境变量、类、函数等，测试结束后恢复。</p><p>🔹 示例 1：修改环境变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_env_variable</span>():<br>    <span class="hljs-keyword">return</span> os.getenv(<span class="hljs-string">&quot;MY_VAR&quot;</span>, <span class="hljs-string">&quot;default_value&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_env_variable</span>(<span class="hljs-params">monkeypatch</span>):<br>    monkeypatch.setenv(<span class="hljs-string">&quot;MY_VAR&quot;</span>, <span class="hljs-string">&quot;pytest_value&quot;</span>)  <span class="hljs-comment"># 修改环境变量</span><br>    <span class="hljs-keyword">assert</span> get_env_variable() == <span class="hljs-string">&quot;pytest_value&quot;</span><br><br></code></pre></td></tr></table></figure><p>🔹 示例 2：模拟函数返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Database</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">connect</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Connected to database&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_mock_method</span>(<span class="hljs-params">monkeypatch</span>):<br>    db = Database()<br>    monkeypatch.<span class="hljs-built_in">setattr</span>(db, <span class="hljs-string">&quot;connect&quot;</span>, <span class="hljs-keyword">lambda</span>: <span class="hljs-string">&quot;Mocked DB connection&quot;</span>)  <span class="hljs-comment"># 修改方法</span><br>    <span class="hljs-keyword">assert</span> db.connect() == <span class="hljs-string">&quot;Mocked DB connection&quot;</span><br><br></code></pre></td></tr></table></figure><h1 id="tmpdir-和-tmp-path：创建临时目录"><a href="#tmpdir-和-tmp-path：创建临时目录" class="headerlink" title="tmpdir 和 tmp_path：创建临时目录"></a>tmpdir 和 tmp_path：创建临时目录</h1><p>📌 <code>tmpdir</code> 和 <code>tmp_path</code> 用于创建临时文件或目录，测试结束后自动清理。</p><p><code>tmpdir</code> 返回 <code>py.path.local</code><br><code>tmp_path</code> 返回 <code>pathlib.Path</code></p><p>🔹 示例 1：使用 tmpdir</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_tmpdir</span>(<span class="hljs-params">tmpdir</span>):<br>    file = tmpdir.join(<span class="hljs-string">&quot;test.txt&quot;</span>)<br>    file.write(<span class="hljs-string">&quot;Hello, pytest!&quot;</span>)<br>    <span class="hljs-keyword">assert</span> file.read() == <span class="hljs-string">&quot;Hello, pytest!&quot;</span><br><br></code></pre></td></tr></table></figure><p>🔹 示例 2：使用 tmp_path</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_tmp_path</span>(<span class="hljs-params">tmp_path</span>):<br>    file = tmp_path / <span class="hljs-string">&quot;test.txt&quot;</span><br>    file.write_text(<span class="hljs-string">&quot;Hello, pytest!&quot;</span>)<br>    <span class="hljs-keyword">assert</span> file.read_text() == <span class="hljs-string">&quot;Hello, pytest!&quot;</span><br><br></code></pre></td></tr></table></figure><h1 id="capsys：捕获-stdout-和-stderr"><a href="#capsys：捕获-stdout-和-stderr" class="headerlink" title="capsys：捕获 stdout 和 stderr"></a>capsys：捕获 stdout 和 stderr</h1><p>📌 capsys 允许捕获 print() 输出，适用于测试 CLI 程序。</p><p>🔹 示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, pytest!&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_greet</span>(<span class="hljs-params">capsys</span>):<br>    greet()<br>    captured = capsys.readouterr()<br>    <span class="hljs-keyword">assert</span> captured.out == <span class="hljs-string">&quot;Hello, pytest!\n&quot;</span><br><br></code></pre></td></tr></table></figure><p>📌 <code>capsys.readouterr()</code> 获取<br>   <code>captured.out</code> 标准输出<br>   <code>captured.err</code> 错误输出</p><h1 id="caplog：捕获日志"><a href="#caplog：捕获日志" class="headerlink" title="caplog：捕获日志"></a>caplog：捕获日志</h1><p>📌 <code>caplog</code> 用于捕获 <code>logging </code>日志。</p><p>🔹 示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">log_message</span>():<br>    logging.warning(<span class="hljs-string">&quot;This is a warning message!&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_log_message</span>(<span class="hljs-params">caplog</span>):<br>    log_message()<br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&quot;This is a warning message!&quot;</span> <span class="hljs-keyword">in</span> caplog.text<br><br></code></pre></td></tr></table></figure><h1 id="recwarn：捕获-warnings"><a href="#recwarn：捕获-warnings" class="headerlink" title="recwarn：捕获 warnings"></a>recwarn：捕获 warnings</h1><p>📌 <code>recwarn</code> 允许捕获 <code>warnings</code>，用于测试警告是否正确触发。</p><p>🔹 示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> warnings<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">deprecated_function</span>():<br>    warnings.warn(<span class="hljs-string">&quot;This function is deprecated&quot;</span>, DeprecationWarning)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_warning</span>(<span class="hljs-params">recwarn</span>):<br>    deprecated_function()<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(recwarn) == <span class="hljs-number">1</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&quot;deprecated&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(recwarn[<span class="hljs-number">0</span>].message)<br><br></code></pre></td></tr></table></figure><h1 id="pytestconfig：获取-pytest-命令行参数"><a href="#pytestconfig：获取-pytest-命令行参数" class="headerlink" title="pytestconfig：获取 pytest 命令行参数"></a>pytestconfig：获取 pytest 命令行参数</h1><p>📌 <code>pytestconfig</code> 允许访问 <code>pytest</code> 命令行参数，例如<code> --verbose</code>。</p><p>🔹 示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_pytest_config</span>(<span class="hljs-params">pytestconfig</span>):<br>    <span class="hljs-keyword">assert</span> pytestconfig.getoption(<span class="hljs-string">&quot;verbose&quot;</span>) &gt;= <span class="hljs-number">0</span>  <span class="hljs-comment"># 检查 `-v` 选项是否启用</span><br><br></code></pre></td></tr></table></figure><h1 id="doctest-namespace：修改-doctest-运行环境"><a href="#doctest-namespace：修改-doctest-运行环境" class="headerlink" title="doctest_namespace：修改 doctest 运行环境"></a>doctest_namespace：修改 doctest 运行环境</h1><p>📌 <code>doctest_namespace </code>允许在 <code>doctest</code> 运行时 预定义变量。</p><p>🔹 示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">autouse=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_namespace</span>(<span class="hljs-params">doctest_namespace</span>):<br>    doctest_namespace[<span class="hljs-string">&quot;PI&quot;</span>] = <span class="hljs-number">3.1415926</span><br></code></pre></td></tr></table></figure><p>📌 这样，在 <code>doctest</code> 中，可以直接使用<code>PI</code> 变量。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我列举平常可能会用到的，当然还有其他的fixure，后面遇见继续补充！</p>]]></content>
    
    
    <categories>
      
      <category>Pytest</category>
      
      <category>Pytest入门系列之pytest的内置fixture</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>pytest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytest入门系列之pytest的fixture</title>
    <link href="/2025/03/20/pytest%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%973/"/>
    <url>/2025/03/20/pytest%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%973/</url>
    
    <content type="html"><![CDATA[<h1 id="Pytest入门系列之pytest的fixture"><a href="#Pytest入门系列之pytest的fixture" class="headerlink" title="Pytest入门系列之pytest的fixture"></a>Pytest入门系列之pytest的fixture</h1><p>pytest 是 Python 最流行的测试框架之一，而 fixture 是 pytest 提供的 强大测试前后置机制，用于管理测试依赖、初始化测试环境和清理资源。</p><h2 id="什么是-fixture？"><a href="#什么是-fixture？" class="headerlink" title="什么是 fixture？"></a>什么是 fixture？</h2><p>在 pytest 中，fixture 是一种特殊的函数，用于 在测试开始前进行准备工作，并在测试结束后进行清理。<br>它可以用于：<br>✅ 创建测试数据<br>✅ 数据库连接<br>✅ 初始化 WebDriver（Selenium）<br>✅ 文件操作<br>✅ 清理资源</p><p>📌 基本语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><br><span class="hljs-meta">@pytest.fixture</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sample_data</span>():<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">25</span>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_sample</span>(<span class="hljs-params">sample_data</span>):<br>    <span class="hljs-keyword">assert</span> sample_data[<span class="hljs-string">&quot;name&quot;</span>] == <span class="hljs-string">&quot;Alice&quot;</span><br><br></code></pre></td></tr></table></figure><p>🔍 解析：</p><p>@pytest.fixture 让 sample_data() 成为一个 fixture。<br>test_sample() 通过参数 自动接收 sample_data() 的返回值。<br>运行时 pytest 自动调用 fixture，无需手动传参。</p><h2 id="fixture-的作用域-scope"><a href="#fixture-的作用域-scope" class="headerlink" title="fixture 的作用域 (scope)"></a>fixture 的作用域 (scope)</h2><p>fixture 默认 作用于每个测试函数（function 级别），但 pytest 允许我们通过 scope 控制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;function&quot;</span></span>)  </span><span class="hljs-comment"># 默认，每个测试函数执行一次</span><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;class&quot;</span></span>)     </span><span class="hljs-comment"># 每个测试类执行一次</span><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;module&quot;</span></span>)    </span><span class="hljs-comment"># 每个模块执行一次</span><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;session&quot;</span></span>)   </span><span class="hljs-comment"># 整个测试执行一次</span><br></code></pre></td></tr></table></figure><p>📌 示例：不同作用域的 fixture</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;session&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">db_connection</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n🔗 连接数据库&quot;</span>)<br>    <span class="hljs-keyword">yield</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n❌ 关闭数据库&quot;</span>)<br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;function&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_user</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n👤 创建测试用户&quot;</span>)<br>    <span class="hljs-keyword">yield</span> &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;test_user&quot;</span>&#125;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n🗑️ 删除测试用户&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_example_1</span>(<span class="hljs-params">db_connection, test_user</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;✅ 运行 test_example_1&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_example_2</span>(<span class="hljs-params">db_connection, test_user</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;✅ 运行 test_example_2&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>🔍 解析：</p><p>db_connection() scope&#x3D;”session” → 整个测试运行一次。<br>test_user() scope&#x3D;”function” → 每个测试函数运行一次。</p><p>🔄 运行顺序</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pytest test_example.py -s  <span class="hljs-comment"># -s 让 print 输出可见</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">🔗 连接数据库      <span class="hljs-comment"># 只执行一次（session 级别）</span><br>👤 创建测试用户   <span class="hljs-comment"># 每个测试函数执行一次</span><br>✅ 运行 test_example_1<br>🗑️ 删除测试用户<br><br>👤 创建测试用户<br>✅ 运行 test_example_2<br>🗑️ 删除测试用户<br>❌ 关闭数据库      <span class="hljs-comment"># 只执行一次（session 级别）</span><br><br></code></pre></td></tr></table></figure><h2 id="yield-语句管理-fixture"><a href="#yield-语句管理-fixture" class="headerlink" title="yield 语句管理 fixture"></a>yield 语句管理 fixture</h2><p>fixture 不仅可以提供数据，还可以执行“前后置”逻辑，yield 允许在 测试结束后执行清理工作。</p><p>📌 示例：使用 yield 进行资源清理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><br><span class="hljs-meta">@pytest.fixture</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">open_file</span>():<br>    file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test_file.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n📂 打开文件&quot;</span>)<br>    <span class="hljs-keyword">yield</span> file  <span class="hljs-comment"># 让测试函数使用 file</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n❌ 关闭文件&quot;</span>)<br>    file.close()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_write_file</span>(<span class="hljs-params">open_file</span>):<br>    open_file.write(<span class="hljs-string">&quot;Hello, pytest fixture!&quot;</span>)<br>    <span class="hljs-keyword">assert</span> open_file.closed <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_file_closed</span>(<span class="hljs-params">open_file</span>):<br>    <span class="hljs-keyword">assert</span> open_file.closed <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span><br><br></code></pre></td></tr></table></figure><p>🔍 运行流程</p><p>测试开始前：执行 print(“\n📂 打开文件”) 并打开文件。<br>测试运行中：yield 让测试函数使用 file。<br>测试结束后：执行 file.close() 关闭文件。</p><h2 id="autouse-True-自动应用-fixture"><a href="#autouse-True-自动应用-fixture" class="headerlink" title="autouse&#x3D;True 自动应用 fixture"></a>autouse&#x3D;True 自动应用 fixture</h2><p>📌 如果不想手动传入 fixture，可以使用 autouse&#x3D;True 自动应用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">autouse=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_teardown</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n🔧 测试前置操作&quot;</span>)<br>    <span class="hljs-keyword">yield</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n🗑️ 测试后置清理&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case_1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;✅ 运行 test_case_1&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case_2</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;✅ 运行 test_case_2&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>🔍 运行输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">🔧 测试前置操作<br>✅ 运行 test_case_1<br>🗑️ 测试后置清理<br><br>🔧 测试前置操作<br>✅ 运行 test_case_2<br>🗑️ 测试后置清理<br></code></pre></td></tr></table></figure><p>📌 适用于</p><p>日志记录<br>数据库连接<br>全局资源初始化</p><h2 id="conftest-py-让-fixture-适用于所有测试"><a href="#conftest-py-让-fixture-适用于所有测试" class="headerlink" title="conftest.py 让 fixture 适用于所有测试"></a>conftest.py 让 fixture 适用于所有测试</h2><p>如果 fixture 在多个测试文件中通用，可以放入 conftest.py，这样所有测试都会自动找到它。</p><p>📌 conftest.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><br><span class="hljs-meta">@pytest.fixture</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">global_data</span>():<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;project&quot;</span>: <span class="hljs-string">&quot;pytest&quot;</span>&#125;<br><br></code></pre></td></tr></table></figure><p>📌 在 test_sample.py 里直接使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_global</span>(<span class="hljs-params">global_data</span>):<br>    <span class="hljs-keyword">assert</span> global_data[<span class="hljs-string">&quot;project&quot;</span>] == <span class="hljs-string">&quot;pytest&quot;</span><br><br></code></pre></td></tr></table></figure><p>📌 这样可以在任何测试文件里使用 global_data，无需 import。</p><h2 id="fixture-之间的依赖"><a href="#fixture-之间的依赖" class="headerlink" title="fixture 之间的依赖"></a>fixture 之间的依赖</h2><p>fixture 可以互相依赖:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@pytest.fixture</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_data</span>():<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;alice&quot;</span>&#125;<br><br><span class="hljs-meta">@pytest.fixture</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticated_user</span>(<span class="hljs-params">user_data</span>):<br>    user_data[<span class="hljs-string">&quot;authenticated&quot;</span>] = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> user_data<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_auth_user</span>(<span class="hljs-params">authenticated_user</span>):<br>    <span class="hljs-keyword">assert</span> authenticated_user[<span class="hljs-string">&quot;authenticated&quot;</span>] <span class="hljs-keyword">is</span> <span class="hljs-literal">True</span><br><br></code></pre></td></tr></table></figure><p>📌 运行时 authenticated_user 会先调用 user_data，实现依赖注入。</p><h2 id="参数化-fixture"><a href="#参数化-fixture" class="headerlink" title="参数化 fixture"></a>参数化 fixture</h2><p>📌 有时，我们需要对 fixture 传递多个值，可以用 params 参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">params=[<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;editor&quot;</span>, <span class="hljs-string">&quot;viewer&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_role</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> request.param  <span class="hljs-comment"># 获取参数值</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_user_role</span>(<span class="hljs-params">user_role</span>):<br>    <span class="hljs-keyword">assert</span> user_role <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;editor&quot;</span>, <span class="hljs-string">&quot;viewer&quot;</span>]<br><br></code></pre></td></tr></table></figure><p>📌 运行时，pytest 会 自动为 user_role 生成 3 组测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">test_user_role[admin]  ✅<br>test_user_role[editor] ✅<br>test_user_role[viewer] ✅<br></code></pre></td></tr></table></figure><h2 id="组合多个-fixture"><a href="#组合多个-fixture" class="headerlink" title="组合多个 fixture"></a>组合多个 fixture</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_multiple_fixture</span>(<span class="hljs-params">user_data, authenticated_user</span>):<br>    <span class="hljs-keyword">assert</span> authenticated_user[<span class="hljs-string">&quot;username&quot;</span>] == <span class="hljs-string">&quot;alice&quot;</span><br>    <span class="hljs-keyword">assert</span> authenticated_user[<span class="hljs-string">&quot;authenticated&quot;</span>] <span class="hljs-keyword">is</span> <span class="hljs-literal">True</span><br><br></code></pre></td></tr></table></figure><p>📌 pytest 会自动解析依赖，先执行 user_data，再执行 authenticated_user。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table><thead><tr><th>功能</th><th>关键特性</th></tr></thead><tbody><tr><td><code>fixture </code> 基础</td><td><code> @pytest.fixture</code> 定义</td></tr><tr><td>作用域<code> (scope)</code></td><td><code>&quot;function&quot;, &quot;class&quot;, &quot;module&quot;, &quot;session&quot;</code></td></tr><tr><td><code>pytest test_sample.py::test_func</code></td><td>运行指定测试函数</td></tr><tr><td><code>yield</code> 清理资源</td><td><code>yield</code> 之后执行清理</td></tr><tr><td>自动应用</td><td><code> autouse=True</code></td></tr><tr><td><code>conftest.py</code></td><td>共享 <code>fixture</code></td></tr><tr><td>参数化 <code>fixture</code></td><td><code>params=[...]</code></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Pytest</category>
      
      <category>Pytest入门系列之pytest的fixture</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>pytest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytest入门系列之pytest的基本命令</title>
    <link href="/2025/03/19/pytest%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%972/"/>
    <url>/2025/03/19/pytest%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%972/</url>
    
    <content type="html"><![CDATA[<h1 id="Pytest入门系列之pytest的基本命令"><a href="#Pytest入门系列之pytest的基本命令" class="headerlink" title="Pytest入门系列之pytest的基本命令"></a>Pytest入门系列之pytest的基本命令</h1><p>pytest 作为一个强大的测试框架，提供了非常丰富的命令参数，这些命令在我们日常工作中可以大大的帮助到我们！</p><h2 id="运行测试的基本命令"><a href="#运行测试的基本命令" class="headerlink" title="运行测试的基本命令"></a>运行测试的基本命令</h2><h3 id="运行所有测试"><a href="#运行所有测试" class="headerlink" title="运行所有测试"></a>运行所有测试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pytest<br></code></pre></td></tr></table></figure><p><code>pytest</code> 会自动搜索当前目录及其子目录中所有符合 <code>test_*.py</code> 或 <code>*_test.py</code> 规则的测试文件，并执行其中的测试函数。</p><h3 id="运行指定测试文件"><a href="#运行指定测试文件" class="headerlink" title="运行指定测试文件"></a>运行指定测试文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pytest test_sample.py<br></code></pre></td></tr></table></figure><p>仅运行 <code>test_sample.py</code> 文件中的测试。</p><h3 id="运行特定的测试类"><a href="#运行特定的测试类" class="headerlink" title="运行特定的测试类"></a>运行特定的测试类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pytest test_sample.py::TestClass<br></code></pre></td></tr></table></figure><p>仅运行 <code>test_sample.py</code> 中 <code>TestClass</code> 内部的测试方法。</p><h3 id="运行特定的测试函数"><a href="#运行特定的测试函数" class="headerlink" title="运行特定的测试函数"></a>运行特定的测试函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pytest test_sample.py::test_function<br></code></pre></td></tr></table></figure><p>仅运行 <code>test_sample.py</code> 中 <code>test_function</code> 这个测试。</p><h2 id="测试选择与过滤"><a href="#测试选择与过滤" class="headerlink" title="测试选择与过滤"></a>测试选择与过滤</h2><h3 id="通过-k-关键字匹配"><a href="#通过-k-关键字匹配" class="headerlink" title="通过 -k 关键字匹配"></a>通过 -k 关键字匹配</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pytest -k <span class="hljs-string">&quot;addition&quot;</span><br></code></pre></td></tr></table></figure><p>只运行名称包含 <code>&quot;addition&quot;</code> 的测试函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pytest -k <span class="hljs-string">&quot;add or sub&quot;</span><br></code></pre></td></tr></table></figure><p>运行名称包含 <code>add</code> 或 <code>sub</code> 的测试。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pytest -k <span class="hljs-string">&quot;not multiplication&quot;</span><br></code></pre></td></tr></table></figure><p>排除名称包含 <code>&quot;multiplication&quot;</code>的测试。</p><h3 id="通过-m-运行特定标记的测试"><a href="#通过-m-运行特定标记的测试" class="headerlink" title="通过 -m 运行特定标记的测试"></a>通过 -m 运行特定标记的测试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pytest -m slow<br></code></pre></td></tr></table></figure><p>仅运行 <code>@pytest.mark.slow</code> 标记的测试。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><br><span class="hljs-meta">@pytest.mark.slow</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_slow_function</span>():<br>    <span class="hljs-keyword">import</span> time<br>    time.sleep(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">assert</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h2 id="控制测试执行"><a href="#控制测试执行" class="headerlink" title="控制测试执行"></a>控制测试执行</h2><h3 id="失败后立即停止"><a href="#失败后立即停止" class="headerlink" title="失败后立即停止"></a>失败后立即停止</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pytest -x<br></code></pre></td></tr></table></figure><p>第一个测试失败后立即停止。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pytest --maxfail=<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>允许最多 3 个测试失败，超过就停止。</p><h3 id="只运行上次失败的测试"><a href="#只运行上次失败的测试" class="headerlink" title="只运行上次失败的测试"></a>只运行上次失败的测试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pytest --lf<br></code></pre></td></tr></table></figure><p>仅运行上一次失败的测试（last failed）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pytest --ff<br></code></pre></td></tr></table></figure><p>先运行上次失败的测试，再运行其他测试（failed first）。</p><h3 id="pytest-mark-skip-无条件跳过"><a href="#pytest-mark-skip-无条件跳过" class="headerlink" title="@pytest.mark.skip 无条件跳过"></a>@pytest.mark.skip 无条件跳过</h3><p><code>@pytest.mark.skip</code> 直接跳过测试，不执行该测试函数。适用于测试暂时无意义的情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><br><span class="hljs-meta">@pytest.mark.skip(<span class="hljs-params">reason=<span class="hljs-string">&quot;当前功能未实现&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_not_implemented</span>():<br>    <span class="hljs-keyword">assert</span> <span class="hljs-literal">False</span>  <span class="hljs-comment"># 这个测试不会运行</span><br><br></code></pre></td></tr></table></figure><h3 id="pytest-mark-skipif-condition-reason-”…”-条件跳过"><a href="#pytest-mark-skipif-condition-reason-”…”-条件跳过" class="headerlink" title="@pytest.mark.skipif(condition, reason&#x3D;”…”) 条件跳过"></a>@pytest.mark.skipif(condition, reason&#x3D;”…”) 条件跳过</h3><p><code>skipif</code> 允许根据特定条件决定是否跳过测试。例如：</p><p>仅在特定 <code>Python</code> 版本下跳过测试。<br>仅在 <code>Windows</code> 环境下跳过测试。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-comment"># 跳过 Python 3.6 及以下版本</span><br><span class="hljs-meta">@pytest.mark.skipif(<span class="hljs-params">sys.version_info &lt; (<span class="hljs-params"><span class="hljs-number">3</span>, <span class="hljs-number">7</span></span>), reason=<span class="hljs-string">&quot;需要 Python 3.7 及以上版本&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_python_version</span>():<br>    <span class="hljs-keyword">assert</span> sys.version_info &gt;= (<span class="hljs-number">3</span>, <span class="hljs-number">7</span>)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 仅在 Windows 跳过</span><br><span class="hljs-meta">@pytest.mark.skipif(<span class="hljs-params">sys.platform == <span class="hljs-string">&quot;win32&quot;</span>, reason=<span class="hljs-string">&quot;Windows 环境下跳过&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_not_for_windows</span>():<br>    <span class="hljs-keyword">assert</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h3 id="pytest-mark-xfail-预期失败"><a href="#pytest-mark-xfail-预期失败" class="headerlink" title="@pytest.mark.xfail 预期失败"></a>@pytest.mark.xfail 预期失败</h3><p><code>xfail（expected failure）</code>用于标记 已知可能失败的测试，但仍然让它运行。</p><p>测试通过：显示 <code>XPASS</code>（意外通过）。<br>测试失败：显示 <code>XFAIL</code>（符合预期的失败）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><br><span class="hljs-meta">@pytest.mark.xfail(<span class="hljs-params">reason=<span class="hljs-string">&quot;这个 bug 还没修复&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_known_bug</span>():<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> + <span class="hljs-number">1</span> == <span class="hljs-number">3</span>  <span class="hljs-comment"># 预期失败</span><br></code></pre></td></tr></table></figure><p>不会影响整体测试通过率（即便失败，pytest 也不会将其视为真正的失败）。</p><h3 id="xfail-结合-condition"><a href="#xfail-结合-condition" class="headerlink" title="xfail 结合 condition"></a>xfail 结合 condition</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@pytest.mark.xfail(<span class="hljs-params">sys.platform == <span class="hljs-string">&quot;win32&quot;</span>, reason=<span class="hljs-string">&quot;Windows 下此功能未修复&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_windows_bug</span>():<br>    <span class="hljs-keyword">assert</span> <span class="hljs-literal">False</span><br><br></code></pre></td></tr></table></figure><p>仅在 Windows 下 xfail，其他平台不会受影响</p><h3 id="strict-True-让-XPASS-变成失败"><a href="#strict-True-让-XPASS-变成失败" class="headerlink" title="strict&#x3D;True 让 XPASS 变成失败"></a>strict&#x3D;True 让 XPASS 变成失败</h3><p>默认情况下，如果 xfail 标记的测试 意外通过（XPASS），pytest 仍认为测试通过。但可以使用 strict&#x3D;True 强制失败：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@pytest.mark.xfail(<span class="hljs-params">reason=<span class="hljs-string">&quot;Bug 尚未修复&quot;</span>, strict=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_should_fail</span>():<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">2</span> + <span class="hljs-number">2</span> == <span class="hljs-number">4</span>  <span class="hljs-comment"># 实际上会通过</span><br></code></pre></td></tr></table></figure><h2 id="详细度与输出控制"><a href="#详细度与输出控制" class="headerlink" title="详细度与输出控制"></a>详细度与输出控制</h2><h3 id="增加详细信息"><a href="#增加详细信息" class="headerlink" title="增加详细信息"></a>增加详细信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pytest -v<br></code></pre></td></tr></table></figure><p>显示更详细的测试结果，包括每个测试的名称和状态。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pytest -q<br></code></pre></td></tr></table></figure><p>只显示必要的信息（安静模式）。</p><h3 id="显示-print-语句输出"><a href="#显示-print-语句输出" class="headerlink" title="显示 print 语句输出"></a>显示 print 语句输出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pytest -s<br></code></pre></td></tr></table></figure><p>允许测试过程中 print() 的输出（默认 pytest 会捕获并隐藏）。</p><h2 id="配置失败信息"><a href="#配置失败信息" class="headerlink" title="配置失败信息"></a>配置失败信息</h2><h3 id="控制回溯（traceback）信息"><a href="#控制回溯（traceback）信息" class="headerlink" title="控制回溯（traceback）信息"></a>控制回溯（traceback）信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pytest --tb=short<br></code></pre></td></tr></table></figure><p>显示精简的错误信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pytest --tb=long<br></code></pre></td></tr></table></figure><p>显示完整的回溯信息（默认）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pytest --tb=line<br></code></pre></td></tr></table></figure><p>只显示一行错误信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pytest --tb=no<br></code></pre></td></tr></table></figure><p>不显示错误回溯信息。</p><h2 id="运行速度与性能优化"><a href="#运行速度与性能优化" class="headerlink" title="运行速度与性能优化"></a>运行速度与性能优化</h2><h3 id="只收集测试但不执行"><a href="#只收集测试但不执行" class="headerlink" title="只收集测试但不执行"></a>只收集测试但不执行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pytest --collect-only<br></code></pre></td></tr></table></figure><p>仅收集测试并列出它们，不执行测试。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pytest --durations=<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>显示执行最慢的 5 个测试。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pytest --durations=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>显示所有测试的执行时间，按慢速排序。</p><h2 id="失败重试"><a href="#失败重试" class="headerlink" title="失败重试"></a>失败重试</h2><h3 id="失败时自动重试"><a href="#失败时自动重试" class="headerlink" title="失败时自动重试"></a>失败时自动重试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install pytest-rerunfailures<br>pytest --reruns <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>失败的测试最多重试 3 次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><br><span class="hljs-meta">@pytest.mark.flaky(<span class="hljs-params">reruns=<span class="hljs-number">3</span>, reruns_delay=<span class="hljs-number">2</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_flaky</span>():<br>    <span class="hljs-keyword">import</span> random<br>    <span class="hljs-keyword">assert</span> random.choice([<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>])<br></code></pre></td></tr></table></figure><p>@pytest.mark.flaky 可用于单独标记某些不稳定的测试进行重试。</p><h2 id="配置-pytest"><a href="#配置-pytest" class="headerlink" title="配置 pytest"></a>配置 pytest</h2><h3 id="使用-pytest-ini-配置默认参数"><a href="#使用-pytest-ini-配置默认参数" class="headerlink" title="使用 pytest.ini 配置默认参数"></a>使用 pytest.ini 配置默认参数</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[pytest]</span><br><span class="hljs-attr">addopts</span> = -v --maxfail=<span class="hljs-number">2</span> --tb=short<br><span class="hljs-attr">python_files</span> = test_*.py *_test.py<br><span class="hljs-attr">python_classes</span> = Test*<br><span class="hljs-attr">python_functions</span> = test_*<br><br></code></pre></td></tr></table></figure><p>addopts 指定默认运行参数。<br>python_files 定义测试文件格式。<br>python_classes 定义测试类的命名规则。<br>python_functions 定义测试函数的命名规则。</p><h2 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h2><h3 id="并行运行测试"><a href="#并行运行测试" class="headerlink" title="并行运行测试"></a>并行运行测试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install pytest-xdist<br>pytest -n <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>-n 4 表示同时运行 4 个测试进程，提高测试执行速度。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="pytest-常用命令参数总结"><a href="#pytest-常用命令参数总结" class="headerlink" title="pytest 常用命令参数总结"></a><strong>pytest 常用命令参数总结</strong></h2><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>pytest</code></td><td>运行所有测试</td></tr><tr><td><code>pytest test_sample.py</code></td><td>运行指定文件</td></tr><tr><td><code>pytest test_sample.py::test_func</code></td><td>运行指定测试函数</td></tr><tr><td><code>pytest -k &quot;关键字&quot;</code></td><td>只运行包含关键字的测试</td></tr><tr><td><code>pytest -m 标记</code></td><td>运行特定 <code>@pytest.mark.&lt;标记&gt;</code> 测试</td></tr><tr><td><code>pytest -x</code></td><td>第一个失败的测试后停止</td></tr><tr><td><code>pytest --lf</code></td><td>仅运行上次失败的测试</td></tr><tr><td><code>pytest --ff</code></td><td>先运行失败的测试</td></tr><tr><td><code>pytest -v</code></td><td>显示详细信息</td></tr><tr><td><code>pytest -s</code></td><td>显示 <code>print</code> 输出</td></tr><tr><td><code>pytest --tb=short</code></td><td>简化错误回溯</td></tr><tr><td><code>pytest --durations=5</code></td><td>显示最慢的 5 个测试</td></tr><tr><td><code>pytest --reruns 3</code></td><td>失败重试 3 次</td></tr><tr><td><code>pytest --junitxml=report.xml</code></td><td>生成 JUnit 格式报告</td></tr><tr><td><code>pytest --alluredir=./allure-results</code></td><td>生成 Allure 报告</td></tr><tr><td><code>pytest -n 4</code></td><td>并行运行 4 个测试</td></tr></tbody></table><h2 id="pytest-skip、skipif、xfail-参数对比总结"><a href="#pytest-skip、skipif、xfail-参数对比总结" class="headerlink" title="pytest skip、skipif、xfail 参数对比总结"></a><strong>pytest <code>skip</code>、<code>skipif</code>、<code>xfail</code> 参数对比总结</strong></h2><table><thead><tr><th>标记</th><th>作用</th><th>适用场景</th><th>示例</th></tr></thead><tbody><tr><td><code>@pytest.mark.skip</code></td><td>无条件跳过</td><td>功能未实现、不适用的测试</td><td><code>@pytest.mark.skip(reason=&quot;功能未实现&quot;)</code></td></tr><tr><td><code>@pytest.mark.skipif(condition, reason=&quot;…&quot;)</code></td><td>条件跳过</td><td>根据环境、依赖决定是否跳过</td><td><code>@pytest.mark.skipif(sys.platform == &quot;win32&quot;, reason=&quot;Windows 下跳过&quot;)</code></td></tr><tr><td><code>@pytest.mark.xfail</code></td><td>预期失败（但仍运行）</td><td>记录已知 Bug，不影响测试通过率</td><td><code>@pytest.mark.xfail(reason=&quot;Bug 未修复&quot;)</code></td></tr><tr><td><code>@pytest.mark.xfail(strict=True)</code></td><td>预期失败（XPASS 视为失败）</td><td>确保 Bug 未被误修复</td><td><code>@pytest.mark.xfail(reason=&quot;Bug 未修复&quot;, strict=True)</code></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Pytest</category>
      
      <category>Pytest入门系列之pytest的基本命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>pytest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytest入门系列之pytest的安装和基本使用</title>
    <link href="/2025/03/19/pytest%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%971/"/>
    <url>/2025/03/19/pytest%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%971/</url>
    
    <content type="html"><![CDATA[<h1 id="Pytest入门系列之pytest的安装和基本使用"><a href="#Pytest入门系列之pytest的安装和基本使用" class="headerlink" title="Pytest入门系列之pytest的安装和基本使用"></a>Pytest入门系列之pytest的安装和基本使用</h1><p>在 Python 生态中，pytest 是一个强大且流行的测试框架，提供简洁的语法和丰富的插件支持。</p><h2 id="pytest-的安装"><a href="#pytest-的安装" class="headerlink" title="pytest 的安装"></a>pytest 的安装</h2><p>pytest 的安装方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install pytest<br></code></pre></td></tr></table></figure><p>安装完毕后，可以使用以下命令检查pytest版本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pytest --version<br></code></pre></td></tr></table></figure><h2 id="pytest-入门案例"><a href="#pytest-入门案例" class="headerlink" title="pytest 入门案例"></a>pytest 入门案例</h2><p>创建 test_sample.py 文件，并添加以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_addition</span>():<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> + <span class="hljs-number">1</span> == <span class="hljs-number">2</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_subtraction</span>():<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">5</span> - <span class="hljs-number">3</span> == <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>运行测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pytest test_sample.py<br></code></pre></td></tr></table></figure><p>结果：</p><img src="/2025/03/19/pytest%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%971/1.png" class=""><p>可以看到我们是运行了两个测试用例，目前均是通过的情况</p><h2 id="pytest-命名规则"><a href="#pytest-命名规则" class="headerlink" title="pytest 命名规则"></a>pytest 命名规则</h2><p>虽然我们看到可以正常的运行文件，但是如果你的文件或者函数亦或者类命名规则不符合要求，则无法运行到你想要的文件或者函数亦或者类，那么一起来看一下pytest 文件和函数以及类的命名规则吧！</p><h3 id="pytest-文件夹命名规则"><a href="#pytest-文件夹命名规则" class="headerlink" title="pytest 文件夹命名规则"></a>pytest 文件夹命名规则</h3><p>测试目录可以是任何名称，但推荐使用 tests&#x2F;，test_cases&#x2F; 等常见命名方式。<br>如果目录包含 <code>__init__.py</code>，它会被当作 Python 包，可能会影响 pytest 的测试发现机制，因此 不推荐在 tests&#x2F; 目录下使用 <code>__init__.py</code>。</p><p>示例的目录结构:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">project_root/<br>├── <span class="hljs-attribute">src</span>/<br>│   ├── app<span class="hljs-selector-class">.py</span><br>│   ├── utils<span class="hljs-selector-class">.py</span><br>├── tests/<br>│   ├── test_math<span class="hljs-selector-class">.py</span><br>│   ├── test_utils<span class="hljs-selector-class">.py</span><br>│   ├── sub_tests/<br>│   │   ├── test_submodule<span class="hljs-selector-class">.py</span><br></code></pre></td></tr></table></figure><h3 id="pytest-文件命名规则"><a href="#pytest-文件命名规则" class="headerlink" title="pytest 文件命名规则"></a>pytest 文件命名规则</h3><p>pytest 默认会识别以下命名格式的测试文件：</p><p>文件名必须以 test_ 开头，或以 _test 结尾，例如：<br>✅ test_example.py<br>✅ example_test.py<br>❌ example.py（不会被 pytest 识别为测试文件）</p><p>但是如果文件不符合默认规则，可以在 pytest.ini文件中自定义测试文件匹配规则，例如：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># pytest.ini</span><br><span class="hljs-section">[pytest]</span><br><span class="hljs-attr">python_files</span> = check_*.py test_*.py *_test.py<br></code></pre></td></tr></table></figure><p>上述配置允许 pytest 识别 check_xxx.py 作为测试文件。</p><h3 id="pytest-函数命名规则"><a href="#pytest-函数命名规则" class="headerlink" title="pytest 函数命名规则"></a>pytest 函数命名规则</h3><p>pytest 默认识别的测试函数格式如下：</p><p>函数名必须以 test_ 开头，例如：<br>✅ def test_addition():<br>❌ def addition_test():（不会被 pytest 识别）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># test_math.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_addition</span>():<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> + <span class="hljs-number">1</span> == <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="pytest-类的命名规则"><a href="#pytest-类的命名规则" class="headerlink" title="pytest 类的命名规则"></a>pytest 类的命名规则</h3><p>类名必须以 Test 开头，注意：但不能包含 <code>__init__</code> 方法，否则 pytest 不会识别。</p><p>例如：<br>✅ class TestMathOperations:<br>❌ class MathTests:（不会被 pytest 识别）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># test_class.py</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMath</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_addition</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">assert</span> <span class="hljs-number">2</span> + <span class="hljs-number">2</span> == <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h3 id="pytest-自定义测试发现规则"><a href="#pytest-自定义测试发现规则" class="headerlink" title="pytest 自定义测试发现规则"></a>pytest 自定义测试发现规则</h3><p>如果想让 pytest 识别不同的文件或函数命名，可以在 pytest.ini 中配置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[pytest]</span><br><span class="hljs-attr">python_files</span> = check_*.py  <span class="hljs-comment"># 允许文件名以 check_ 开头</span><br><span class="hljs-attr">python_classes</span> = Check*    <span class="hljs-comment"># 允许类名以 Check 开头</span><br><span class="hljs-attr">python_functions</span> = verify_*  <span class="hljs-comment"># 允许函数名以 verify_ 开头</span><br></code></pre></td></tr></table></figure><p>此时，pytest 也会识别以下文件和函数：</p><p>check_example.py<br>class CheckOperations:<br>def verify_addition():</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="pytest-文件命名规则总结"><a href="#pytest-文件命名规则总结" class="headerlink" title="pytest 文件命名规则总结"></a><strong>pytest 文件命名规则总结</strong></h2><table><thead><tr><th>规则</th><th>默认格式</th><th>可自定义配置</th></tr></thead><tbody><tr><td><strong>测试文件</strong></td><td><code>test_*.py</code> 或 <code>*_test.py</code></td><td><code>python_files = check_*.py</code></td></tr><tr><td><strong>测试函数</strong></td><td><code>test_*</code></td><td><code>python_functions = verify_*</code></td></tr><tr><td><strong>测试类</strong></td><td><code>Test*</code></td><td><code>python_classes = Check*</code></td></tr><tr><td><strong>测试目录</strong></td><td>任何名称（推荐 <code>tests/</code>）</td><td>无需特别配置</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Pytest</category>
      
      <category>Pytest 入门系列之Pytest的安装和基本使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>pytest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python lambda函数</title>
    <link href="/2025/03/18/lambda%E5%87%BD%E6%95%B0/"/>
    <url>/2025/03/18/lambda%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-lambda-函数详细介绍"><a href="#Python-lambda-函数详细介绍" class="headerlink" title="Python lambda 函数详细介绍"></a>Python lambda 函数详细介绍</h1><p>在 Python 中，lambda 函数是一种 匿名函数（没有名称的函数），用于创建简短的单行函数。lambda 关键字允许你在不定义正式函数的情况下，快速创建小型函数。</p><h2 id="lambad-函数的语法"><a href="#lambad-函数的语法" class="headerlink" title="lambad 函数的语法"></a>lambad 函数的语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">lambda</span> 参数<span class="hljs-number">1</span>, 参数<span class="hljs-number">2</span>, ...: 表达式<br></code></pre></td></tr></table></figure><p>特点：<br>  只能包含 一个表达式，并且 不能包含赋值操作（如 &#x3D;）。<br>  适用于 简单 的计算或数据转换。<br>  返回值 是表达式的计算结果。</p><h2 id="案例-计算和"><a href="#案例-计算和" class="headerlink" title="案例: 计算和"></a>案例: 计算和</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> x + y<br><br></code></pre></td></tr></table></figure><p>使用 lambda函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">lambda</span> x,y:x+y<br></code></pre></td></tr></table></figure><h2 id="lambdb-函数的基本实例"><a href="#lambdb-函数的基本实例" class="headerlink" title="lambdb 函数的基本实例"></a>lambdb 函数的基本实例</h2><h2 id="简单的减法"><a href="#简单的减法" class="headerlink" title="简单的减法"></a>简单的减法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">subtraction = <span class="hljs-keyword">lambda</span> x,y:y-x<br><span class="hljs-built_in">print</span>(subtraction(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>)) <span class="hljs-comment"># 输出2</span><br></code></pre></td></tr></table></figure><h2 id="平方计算"><a href="#平方计算" class="headerlink" title="平方计算"></a>平方计算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">square = <span class="hljs-keyword">lambda</span> x: x ** <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(square(<span class="hljs-number">4</span>))  <span class="hljs-comment"># 输出: 16</span><br></code></pre></td></tr></table></figure><h2 id="判断奇偶数"><a href="#判断奇偶数" class="headerlink" title="判断奇偶数"></a>判断奇偶数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">is_even = <span class="hljs-keyword">lambda</span> x: x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(is_even(<span class="hljs-number">10</span>))  <span class="hljs-comment"># 输出: True</span><br><span class="hljs-built_in">print</span>(is_even(<span class="hljs-number">7</span>))   <span class="hljs-comment"># 输出: False</span><br></code></pre></td></tr></table></figure><h1 id="lambda-与map-、fiter-、soretd-结合的高阶使用"><a href="#lambda-与map-、fiter-、soretd-结合的高阶使用" class="headerlink" title="lambda 与map()、fiter()、soretd() 结合的高阶使用"></a>lambda 与map()、fiter()、soretd() 结合的高阶使用</h1><h2 id="使用map-进行列表转换"><a href="#使用map-进行列表转换" class="headerlink" title="使用map() 进行列表转换"></a>使用map() 进行列表转换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">number = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>squared = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x:x**<span class="hljs-number">2</span>, numbers))<br><span class="hljs-built_in">print</span>(squared) <span class="hljs-comment"># 输出[1,2,9,16,25]</span><br></code></pre></td></tr></table></figure><h2 id="使用filter-进行列表筛选"><a href="#使用filter-进行列表筛选" class="headerlink" title="使用filter()进行列表筛选"></a>使用filter()进行列表筛选</h2><p>filter() 用于筛选符合条件的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br>evens = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>, numbers))<br><span class="hljs-built_in">print</span>(evens)  <span class="hljs-comment"># 输出: [2, 4, 6]</span><br></code></pre></td></tr></table></figure><h2 id="使用sorted-进行自定义排序"><a href="#使用sorted-进行自定义排序" class="headerlink" title="使用sorted()进行自定义排序"></a>使用sorted()进行自定义排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">students = [(<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">85</span>), (<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-number">75</span>), (<span class="hljs-string">&quot;Charlie&quot;</span>, <span class="hljs-number">90</span>)]<br>students_sorted = <span class="hljs-built_in">sorted</span>(students, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>])  <span class="hljs-comment"># 按成绩排序</span><br><span class="hljs-built_in">print</span>(students_sorted)  <span class="hljs-comment"># 输出: [(&#x27;Bob&#x27;, 75), (&#x27;Alice&#x27;, 85), (&#x27;Charlie&#x27;, 90)]</span><br></code></pre></td></tr></table></figure><h1 id="lambda-在reduce-中的高阶应用"><a href="#lambda-在reduce-中的高阶应用" class="headerlink" title="lambda 在reduce() 中的高阶应用"></a>lambda 在reduce() 中的高阶应用</h1><p>可以看 <a href="https://8888666.top/2024/09/04/pythonreduce%E5%87%BD%E6%95%B0/">https://8888666.top/2024/09/04/pythonreduce%E5%87%BD%E6%95%B0/</a> 我之前写的文章</p><h2 id="reduece-进行累积计算"><a href="#reduece-进行累积计算" class="headerlink" title="reduece() 进行累积计算"></a>reduece() 进行累积计算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><br>numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>product = reduce(<span class="hljs-keyword">lambda</span> x, y: x * y, numbers)<br><span class="hljs-built_in">print</span>(product)  <span class="hljs-comment"># 输出: 120</span><br></code></pre></td></tr></table></figure><h1 id="lambda-在-if-else-表达式中的应用"><a href="#lambda-在-if-else-表达式中的应用" class="headerlink" title="lambda 在 if-else 表达式中的应用"></a>lambda 在 if-else 表达式中的应用</h1><h2 id="if-else-中应用"><a href="#if-else-中应用" class="headerlink" title="if-else 中应用"></a>if-else 中应用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">max_num = <span class="hljs-keyword">lambda</span> x, y: x <span class="hljs-keyword">if</span> x &gt; y <span class="hljs-keyword">else</span> y<br><span class="hljs-built_in">print</span>(max_num(<span class="hljs-number">3</span>, <span class="hljs-number">8</span>))  <span class="hljs-comment"># 输出: 8</span><br></code></pre></td></tr></table></figure><h1 id="lambda-作为函数参数"><a href="#lambda-作为函数参数" class="headerlink" title="lambda 作为函数参数"></a>lambda 作为函数参数</h1><h2 id="lambda-可以作为函数的参数，用于动态定义逻辑"><a href="#lambda-可以作为函数的参数，用于动态定义逻辑" class="headerlink" title="lambda 可以作为函数的参数，用于动态定义逻辑"></a>lambda 可以作为函数的参数，用于动态定义逻辑</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">apply_function</span>(<span class="hljs-params">func, value</span>):<br>    <span class="hljs-keyword">return</span> func(value)<br><br><span class="hljs-built_in">print</span>(apply_function(<span class="hljs-keyword">lambda</span> x: x ** <span class="hljs-number">2</span>, <span class="hljs-number">5</span>))  <span class="hljs-comment"># 输出: 25</span><br><br></code></pre></td></tr></table></figure><h1 id="lambda-的局限性"><a href="#lambda-的局限性" class="headerlink" title="lambda 的局限性"></a>lambda 的局限性</h1><p>虽然 lambda 非常方便，但它有一些局限性：</p><p>1.只能包含单个表达式，无法写多行代码。<br>2.不能直接赋值变量，如 lambda x: y &#x3D; x + 1 是错误的。<br>3.可读性差，对于复杂逻辑，普通 def 函数更清晰。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>lambda 是一种简洁的匿名函数，适用于简单操作，但不要滥用复杂逻辑</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python lambda函数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无需注册在线访问满血DeepSeek</title>
    <link href="/2025/02/14/DeepSeek%E6%BB%A1%E8%A1%80%E5%9C%A8%E7%BA%BF%E8%AE%BF%E9%97%AE/"/>
    <url>/2025/02/14/DeepSeek%E6%BB%A1%E8%A1%80%E5%9C%A8%E7%BA%BF%E8%AE%BF%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="无需注册在线访问满血DeepSeek"><a href="#无需注册在线访问满血DeepSeek" class="headerlink" title="无需注册在线访问满血DeepSeek"></a>无需注册在线访问满血DeepSeek</h1><p>最近DeepSeek被刷屏了，但是官网经常会服务器繁忙，这几天我发现了猎豹的CEO傅盛，部署了满血的DeepSeek，从我使用来看没有遇见服务器繁忙的问题，可以展示其推理工程，速度也是非常的快！</p><h2 id="网站地址"><a href="#网站地址" class="headerlink" title="网站地址"></a>网站地址</h2><p>地址： <a href="https://wechat-aitalk.cmcm.com/">https://wechat-aitalk.cmcm.com/</a></p><img src="/2025/02/14/DeepSeek%E6%BB%A1%E8%A1%80%E5%9C%A8%E7%BA%BF%E8%AE%BF%E9%97%AE/blog.png" class=""><p>不过这个网站目前没有兼容PC浏览器模式，可能PC用起来没有手机端用起来那么的舒服，不过也还行！</p><h2 id="随机问题"><a href="#随机问题" class="headerlink" title="随机问题"></a>随机问题</h2><p>例如：我问我想使用python 实现一个协程访问 </p><p>网址： <a href="https://image.baidu.com/search/index?tn=baiduimage&ps=1&ct=201326592&lm=-1&cl=2&nc=1&ie=utf-8&dyTabStr=MCwxMiwzLDEsMiwxMyw3LDYsNSw5&word=%E6%9E%AB%E5%8F%B6">https://image.baidu.com/search/index?tn=baiduimage&amp;ps=1&amp;ct=201326592&amp;lm=-1&amp;cl=2&amp;nc=1&amp;ie=utf-8&amp;dyTabStr=MCwxMiwzLDEsMiwxMyw3LDYsNSw5&amp;word=%E6%9E%AB%E5%8F%B6</a></p><p>这个是百度图片搜索枫叶的url。我想使用协程的方式下载第一页的所有图片，请DeepSeek 帮我写一个脚本！</p><p>可以看到开始了推理过程</p><img src="/2025/02/14/DeepSeek%E6%BB%A1%E8%A1%80%E5%9C%A8%E7%BA%BF%E8%AE%BF%E9%97%AE/1.png" class=""><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> aiohttp<br><span class="hljs-keyword">import</span> aiofiles<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlencode<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_image_urls</span>(<span class="hljs-params">session, params</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;获取图片URL列表&quot;&quot;&quot;</span><br>    api_url = <span class="hljs-string">&quot;https://image.baidu.com/search/acjson&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> session.get(api_url, params=params) <span class="hljs-keyword">as</span> response:<br>            <span class="hljs-keyword">if</span> response.status != <span class="hljs-number">200</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求失败，状态码：&quot;</span>, response.status)<br>                <span class="hljs-keyword">return</span> []<br>            data = <span class="hljs-keyword">await</span> response.json()<br>            urls = []<br>            <span class="hljs-comment"># 遍历所有图片数据（跳过无效条目）</span><br>            <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data.get(<span class="hljs-string">&quot;data&quot;</span>, []):<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(item, <span class="hljs-built_in">dict</span>):<br>                    <span class="hljs-comment"># 优先尝试获取高清原图URL</span><br>                    url = item.get(<span class="hljs-string">&quot;objURL&quot;</span>) <span class="hljs-keyword">or</span> item.get(<span class="hljs-string">&quot;hoverURL&quot;</span>) <span class="hljs-keyword">or</span> item.get(<span class="hljs-string">&quot;thumbURL&quot;</span>)<br>                    <span class="hljs-keyword">if</span> url <span class="hljs-keyword">and</span> url <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> urls:<br>                        urls.append(url)<br>            <span class="hljs-keyword">return</span> urls<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;获取图片链接时出错:&quot;</span>, e)<br>        <span class="hljs-keyword">return</span> []<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">download_image</span>(<span class="hljs-params">session, url, index, save_dir</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;异步下载单个图片&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 设置Referer绕过反盗链</span><br>        headers = &#123;<span class="hljs-string">&quot;Referer&quot;</span>: <span class="hljs-string">&quot;https://image.baidu.com/&quot;</span>&#125;<br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> session.get(url, headers=headers, timeout=<span class="hljs-number">10</span>) <span class="hljs-keyword">as</span> response:<br>            <span class="hljs-keyword">if</span> response.status == <span class="hljs-number">200</span>:<br>                <span class="hljs-comment"># 通过Content-Type获取文件扩展名</span><br>                content_type = response.headers.get(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;image/jpeg&quot;</span>)<br>                ext = <span class="hljs-string">&quot;jpg&quot;</span> <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;jpeg&quot;</span> <span class="hljs-keyword">in</span> content_type <span class="hljs-keyword">else</span> content_type.split(<span class="hljs-string">&quot;/&quot;</span>)[-<span class="hljs-number">1</span>]<br>                <br>                <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> aiofiles.<span class="hljs-built_in">open</span>(<br>                    os.path.join(save_dir, <span class="hljs-string">f&quot;image_<span class="hljs-subst">&#123;index&#125;</span>.<span class="hljs-subst">&#123;ext&#125;</span>&quot;</span>), <span class="hljs-string">&quot;wb&quot;</span><br>                ) <span class="hljs-keyword">as</span> f:<br>                    <span class="hljs-keyword">await</span> f.write(<span class="hljs-keyword">await</span> response.read())<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;图片 <span class="hljs-subst">&#123;index&#125;</span> 下载成功&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;图片 <span class="hljs-subst">&#123;index&#125;</span> 下载失败，状态码：<span class="hljs-subst">&#123;response.status&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;下载图片 <span class="hljs-subst">&#123;index&#125;</span> 时出错: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 创建保存目录</span><br>    save_dir = <span class="hljs-string">&quot;baidu_images&quot;</span><br>    os.makedirs(save_dir, exist_ok=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-comment"># 请求参数（基于浏览器抓包参数调整）</span><br>    params = &#123;<br>        <span class="hljs-string">&quot;tn&quot;</span>: <span class="hljs-string">&quot;resultjson_com&quot;</span>,<br>        <span class="hljs-string">&quot;ipn&quot;</span>: <span class="hljs-string">&quot;rj&quot;</span>,<br>        <span class="hljs-string">&quot;ct&quot;</span>: <span class="hljs-number">201326592</span>,<br>        <span class="hljs-string">&quot;is&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;fp&quot;</span>: <span class="hljs-string">&quot;result&quot;</span>,<br>        <span class="hljs-string">&quot;queryWord&quot;</span>: <span class="hljs-string">&quot;枫叶&quot;</span>,<br>        <span class="hljs-string">&quot;cl&quot;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&quot;lm&quot;</span>: -<span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;ie&quot;</span>: <span class="hljs-string">&quot;utf-8&quot;</span>,<br>        <span class="hljs-string">&quot;oe&quot;</span>: <span class="hljs-string">&quot;utf-8&quot;</span>,<br>        <span class="hljs-string">&quot;word&quot;</span>: <span class="hljs-string">&quot;枫叶&quot;</span>,<br>        <span class="hljs-string">&quot;istype&quot;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&quot;pn&quot;</span>: <span class="hljs-number">0</span>,  <span class="hljs-comment"># 页码（0表示第一页）</span><br>        <span class="hljs-string">&quot;rn&quot;</span>: <span class="hljs-number">30</span>, <span class="hljs-comment"># 每页数量</span><br>        <span class="hljs-string">&quot;gsm&quot;</span>: <span class="hljs-string">&quot;3c&quot;</span>,<br>    &#125;<br><br>    <span class="hljs-comment"># 请求头设置</span><br>    headers = &#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36&quot;</span>,<br>        <span class="hljs-string">&quot;Accept-Language&quot;</span>: <span class="hljs-string">&quot;zh-CN,zh;q=0.9&quot;</span>,<br>    &#125;<br><br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> aiohttp.ClientSession(headers=headers) <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-comment"># 获取图片URL列表</span><br>        image_urls = <span class="hljs-keyword">await</span> fetch_image_urls(session, params)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;共找到 <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(image_urls)&#125;</span> 张有效图片&quot;</span>)<br><br>        <span class="hljs-comment"># 创建并执行下载任务</span><br>        tasks = [<br>            download_image(session, url, idx, save_dir)<br>            <span class="hljs-keyword">for</span> idx, url <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(image_urls)<br>        ]<br>        <span class="hljs-keyword">await</span> asyncio.gather(*tasks)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    asyncio.run(main())<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整体来说效果还是不错的，大家也可以试试这个工具哦！</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>效能工具</category>
      
      <category>DeepSeek 满血在线访问</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>DeepSeek 在线访问</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 协程入门到实践</title>
    <link href="/2025/02/08/python%E5%8D%8F%E7%A8%8B/"/>
    <url>/2025/02/08/python%E5%8D%8F%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-协程入门到实践"><a href="#Python-协程入门到实践" class="headerlink" title="Python 协程入门到实践"></a>Python 协程入门到实践</h1><p>Python 协程是实现异步编程的一种重要机制。它能够在单线程中实现并发操作，避免了线程的切换开销，适用于 I&#x2F;O 密集型任务。Python 的协程主要通过 <code>asyncio</code> 模块来管理，结合 <code>async</code> 和 <code>await</code> 关键字，可以让代码在等待 I&#x2F;O 操作时不阻塞其他任务。</p><h2 id="什么是协程？"><a href="#什么是协程？" class="headerlink" title="什么是协程？"></a>什么是协程？</h2><p>协程是一种特殊的函数，它能够在执行过程中暂停，并在未来某个时间恢复执行。协程函数由 <code>async def</code> 定义，调用时返回一个协程对象。</p><h3 id="协程的基本特性"><a href="#协程的基本特性" class="headerlink" title="协程的基本特性"></a>协程的基本特性</h3><ol><li><strong>异步执行</strong>：协程可以在等待 I&#x2F;O 操作时释放控制权，让其他任务运行。</li><li><strong>协作式多任务</strong>：协程通过 <code>await</code> 关键字主动让出控制权，执行其他任务，减少了上下文切换的开销。</li></ol><h2 id="协程的创建与使用"><a href="#协程的创建与使用" class="headerlink" title="协程的创建与使用"></a>协程的创建与使用</h2><h3 id="创建协程函数"><a href="#创建协程函数" class="headerlink" title="创建协程函数"></a>创建协程函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-comment"># 使用 async 定义协程函数</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, World!&quot;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="执行协程"><a href="#执行协程" class="headerlink" title="执行协程"></a>执行协程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 通过 asyncio.run 来启动协程</span><br>asyncio.run(say_hello())  <span class="hljs-comment"># 输出: Hello, World!</span><br><br></code></pre></td></tr></table></figure><p>在这段代码中，asyncio.run 会运行一个事件循环并执行协程。</p><h2 id="异步-I-O-操作"><a href="#异步-I-O-操作" class="headerlink" title="异步 I&#x2F;O 操作"></a>异步 I&#x2F;O 操作</h2><p>协程的主要用途是执行异步 I&#x2F;O 操作，通常涉及到网络请求、文件读取等任务。使用 await 可以等待一个耗时操作完成而不阻塞其他任务。</p><h3 id="异步IO实例"><a href="#异步IO实例" class="headerlink" title="异步IO实例"></a>异步IO实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_data</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;开始获取数据...&quot;</span>)<br>    <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 模拟网络请求，等待 2 秒</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数据获取完毕&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;数据内容&quot;</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;任务开始&quot;</span>)<br>    data = <span class="hljs-keyword">await</span> fetch_data()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;获取到的数据: <span class="hljs-subst">&#123;data&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 运行主任务</span><br>asyncio.run(main())<br></code></pre></td></tr></table></figure><p>在这个例子中，fetch_data 是一个模拟异步 I&#x2F;O 操作的协程，它通过 await asyncio.sleep(2) 来模拟等待网络请求的时间。</p><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>任务开始<br>开始获取数据...<br>数据获取完毕<br>获取到的数据: 数据内容<br><br></code></pre></td></tr></table></figure><p>注意到，尽管 fetch_data 内部有 await 操作，main 协程会等到 fetch_data 完成之后才继续执行。</p><h2 id="协程任务并发执行"><a href="#协程任务并发执行" class="headerlink" title="协程任务并发执行"></a>协程任务并发执行</h2><p>如果你需要同时执行多个协程任务，可以使用 asyncio.gather 来并发执行多个协程。</p><h3 id="多个协程并发执行"><a href="#多个协程并发执行" class="headerlink" title="多个协程并发执行"></a>多个协程并发执行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">task_1</span>():<br>    <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;任务 1 完成&quot;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">task_2</span>():<br>    <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;任务 2 完成&quot;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">await</span> asyncio.gather(task_1(), task_2())<br><br>asyncio.run(main())<br><br></code></pre></td></tr></table></figure><p>这里，task_1 和 task_2 被并发执行。asyncio.gather 会等待所有任务完成。</p><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">任务 1 完成<br>任务 2 完成<br><br></code></pre></td></tr></table></figure><p>虽然 task_2 花费了 2 秒，而 task_1 只花费了 1 秒，但由于是并发执行的，最终任务只花费了 2 秒。</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>在协程中，如果某个任务出现异常，通常会被 try…except 语句捕获。但需要注意的是，异常处理可能会影响到其他并发执行的任务。</p><h3 id="协程中的异常处理"><a href="#协程中的异常处理" class="headerlink" title="协程中的异常处理"></a>协程中的异常处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">task_with_exception</span>():<br>    <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;任务发生了异常&quot;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">await</span> asyncio.gather(task_with_exception())<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;捕获到异常: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br>asyncio.run(main())<br><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">捕获到异常: 任务发生了异常<br></code></pre></td></tr></table></figure><p>在并发任务中，如果发生异常，可以通过 asyncio.gather 的 return_exceptions&#x3D;True 参数来忽略异常，继续执行其他任务。</p><h3 id="捕获所有异常"><a href="#捕获所有异常" class="headerlink" title="捕获所有异常"></a>捕获所有异常</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">task_with_exception</span>():<br>    <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;任务发生了异常&quot;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    result = <span class="hljs-keyword">await</span> asyncio.gather(<br>        task_with_exception(), <br>        return_exceptions=<span class="hljs-literal">True</span><br>    )<br>    <span class="hljs-built_in">print</span>(result)<br><br>asyncio.run(main())<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Exception(&#x27;任务发生了异常&#x27;)]<br><br></code></pre></td></tr></table></figure><p>asyncio.gather 将会返回一个包含所有任务结果的列表，若任务有异常，则返回异常对象。</p><h2 id="进阶示例：模拟-HTTP-请求"><a href="#进阶示例：模拟-HTTP-请求" class="headerlink" title="进阶示例：模拟 HTTP 请求"></a>进阶示例：模拟 HTTP 请求</h2><p>我们可以使用协程来模拟异步的 HTTP 请求，利用 aiohttp 库来实现。</p><p>使用 aiohttp 实现并发 HTTP 请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> aiohttp<br><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_url</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> aiohttp.ClientSession() <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> session.get(url) <span class="hljs-keyword">as</span> response:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;读取 <span class="hljs-subst">&#123;url&#125;</span> 完成，状态码: <span class="hljs-subst">&#123;response.status&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> response.text()<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    urls = [<br>        <span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://www.python.org&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://www.github.com&#x27;</span>,<br>    ]<br>    <br>    <span class="hljs-comment"># 并发地请求多个 URL</span><br>    tasks = [fetch_url(url) <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls]<br>    <span class="hljs-keyword">await</span> asyncio.gather(*tasks)<br><br>asyncio.run(main())<br><br></code></pre></td></tr></table></figure><p>这个例子中，我们使用 aiohttp 库发送 HTTP GET 请求，并且使用 asyncio.gather 来并发地执行多个请求。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.协程 是实现异步 I&#x2F;O 操作的一种方法，通过 async 和 await 可以让程序在等待某些操作时不会阻塞，达到高效执行的目的。</p><p>2.asyncio 模块 提供了事件循环和任务调度的机制，使得协程可以方便地并发执行。</p><p>3.asyncio.gather 可以用于并发多个任务，await 用来等待任务的完成。</p><p>4.协程不仅可以提升性能，还能使代码更加简洁与易于理解，尤其是在面对大量 I&#x2F;O 密集型任务时。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 协程入门到实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 垃圾回收机制</title>
    <link href="/2025/01/22/python%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
    <url>/2025/01/22/python%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-垃圾回收机制"><a href="#Python-垃圾回收机制" class="headerlink" title="Python 垃圾回收机制"></a>Python 垃圾回收机制</h1><p>Python 的垃圾回收机制负责自动管理内存，以减少开发者手动管理内存的复杂性。它通过 <strong>引用计数</strong> 和 <strong>垃圾回收器（Garbage Collector）</strong> 两种方式来处理内存中的对象。</p><hr><h2 id="1-引用计数"><a href="#1-引用计数" class="headerlink" title="1. 引用计数"></a>1. 引用计数</h2><p>引用计数是 Python 内存管理的核心机制，每个对象都维护一个 <strong>引用计数器</strong>，表示有多少个引用指向它。</p><h3 id="1-1-引用计数的规则"><a href="#1-1-引用计数的规则" class="headerlink" title="1.1 引用计数的规则"></a>1.1 引用计数的规则</h3><ul><li><strong>引用增加</strong>：当一个新的引用指向对象时，计数增加。</li><li><strong>引用减少</strong>：当引用被删除或覆盖时，计数减少。</li><li><strong>对象销毁</strong>：当引用计数为 <code>0</code> 时，对象会被立即销毁，释放内存。</li></ul><h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建对象</span><br>a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]  <span class="hljs-comment"># 引用计数为 1</span><br>b = a           <span class="hljs-comment"># 引用计数为 2</span><br><span class="hljs-keyword">del</span> a           <span class="hljs-comment"># 引用计数为 1</span><br><span class="hljs-keyword">del</span> b           <span class="hljs-comment"># 引用计数为 0，对象被销毁</span><br><br></code></pre></td></tr></table></figure><h3 id="1-3-引用计数的优势"><a href="#1-3-引用计数的优势" class="headerlink" title="1.3 引用计数的优势"></a>1.3 引用计数的优势</h3><ul><li><strong>实现简单，回收及时.</strong></li><li><strong>适合大多数常见的内存管理场景.</strong></li></ul><h3 id="1-4-引用计数的缺陷"><a href="#1-4-引用计数的缺陷" class="headerlink" title="1.4 引用计数的缺陷"></a>1.4 引用计数的缺陷</h3><ul><li><strong>循环引用问题</strong>: 无法处理对象之间存在循环引用的情况。</li></ul><hr><h2 id="2-循环引用问题"><a href="#2-循环引用问题" class="headerlink" title="2. 循环引用问题"></a>2. 循环引用问题</h2><p>循环引用指的是两个或多个对象相互引用，导致它们的引用计数无法归零。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, value</span>):<br>        self.value = value<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br><br>a = Node(<span class="hljs-number">1</span>)<br>b = Node(<span class="hljs-number">2</span>)<br>a.<span class="hljs-built_in">next</span> = b<br>b.<span class="hljs-built_in">next</span> = a  <span class="hljs-comment"># 形成循环引用</span><br><br><span class="hljs-keyword">del</span> a<br><span class="hljs-keyword">del</span> b  <span class="hljs-comment"># 对象的引用计数仍然为 1，无法回收</span><br><br></code></pre></td></tr></table></figure><hr><h2 id="3-垃圾回收器"><a href="#3-垃圾回收器" class="headerlink" title="3. 垃圾回收器"></a>3. 垃圾回收器</h2><p>为了处理循环引用问题，Python 提供了一个基于 分代回收 的垃圾回收器。</p><h3 id="3-1-分代回收机制"><a href="#3-1-分代回收机制" class="headerlink" title="3.1 分代回收机制"></a>3.1 分代回收机制</h3><p>Python 将所有对象分为三代：</p><ul><li><strong>第 0 代</strong>: 新创建的对象。</li><li><strong>第 1 代</strong>: 经过一次垃圾回收后未被销毁的对象。</li><li><strong>第 2 代</strong>: 经过多次垃圾回收仍未被销毁的对象。</li></ul><p> 垃圾回收器通过以下方式提高效率：</p><ul><li>优先回收生命周期短的对象（第 0 代）。</li><li>减少对高代对象的检查频率。</li></ul><h3 id="3-2-回收过程"><a href="#3-2-回收过程" class="headerlink" title="3.2 回收过程"></a>3.2 回收过程</h3><ul><li>垃圾回收器会定期检查循环引用。</li><li>检测对象是否可达（是否还有引用指向它）。</li><li>如果不可达，则将其标记为垃圾并回收。</li></ul><h3 id="3-3-调用垃圾回收器"><a href="#3-3-调用垃圾回收器" class="headerlink" title="3.3 调用垃圾回收器"></a>3.3 调用垃圾回收器</h3><p>  可以使用 gc 模块手动控制垃圾回收：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">  <span class="hljs-keyword">import</span> gc<br><br><span class="hljs-comment"># 强制执行垃圾回收</span><br>gc.collect()<br><br><span class="hljs-comment"># 禁用自动垃圾回收</span><br>gc.disable()<br><br><span class="hljs-comment"># 启用自动垃圾回收</span><br>gc.enable()<br><br></code></pre></td></tr></table></figure><hr><h2 id="4-垃圾回收的性能优化"><a href="#4-垃圾回收的性能优化" class="headerlink" title="4. 垃圾回收的性能优化"></a>4. 垃圾回收的性能优化</h2><ul><li><p><strong>1.减少循环引用</strong>：</p><ul><li>使用弱引用（weakref 模块）来替代强引用。</li><li>合理设计数据结构，避免不必要的循环引用。</li></ul></li><li><p><strong>2.控制垃圾回收行为</strong>：</p><ul><li>调整垃圾回收器的阈值。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> gc<br>gc.set_threshold(<span class="hljs-number">700</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>)<br><br></code></pre></td></tr></table></figure><ul><li><strong>3.监控内存使用</strong>：<ul><li>使用 objgraph 或 tracemalloc 模块分析内存分配和泄漏问题。</li></ul></li></ul><hr><h2 id="5-常见误区"><a href="#5-常见误区" class="headerlink" title="5. 常见误区"></a>5. 常见误区</h2><ul><li><p><strong>1.垃圾回收会立刻释放内存</strong>： 垃圾回收只会标记不可达对象并释放内存块，但具体的内存释放可能由底层管理器延迟执行。</p></li><li><p><strong>2.大对象的内存回收</strong>：大对象可能直接分配在系统内存中（非 Python 堆内存），回收的效率依赖于操作系统。</p></li></ul><hr><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><ul><li><p><strong>引用计数</strong> 是 Python 垃圾回收的基础，但无法处理循环引用。</p></li><li><p><strong>垃圾回收器</strong>  通过分代回收机制和不可达对象检测，解决了循环引用的问题。</p></li></ul><p>合理使用垃圾回收机制可以提升程序的内存管理效率。</p><ul><li><p><strong>性能调优建议</strong> ：</p><ul><li>尽量避免创建不必要的对象。</li><li>及时解除不再使用的引用，减少循环引用的发生。</li><li>对于需要频繁分配和释放内存的场景，可以采用对象池或缓存技术优化性能。</li></ul></li><li><p><strong>注意内存泄漏</strong> ：</p><ul><li>虽然 Python 自动管理内存，但不正确的引用或设计仍然可能导致内存泄漏，例如长时间存在的全局变量、未关闭的文件句柄等。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 内部原理</category>
      
      <category>Python 垃圾回收机制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 自带魔法方法重点解析</title>
    <link href="/2024/12/12/python%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95/"/>
    <url>/2024/12/12/python%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-自带魔法方法掌握了就事半功倍"><a href="#Python-自带魔法方法掌握了就事半功倍" class="headerlink" title="Python 自带魔法方法掌握了就事半功倍"></a>Python 自带魔法方法掌握了就事半功倍</h1><p>Python 的魔法方法是以双下划线开头和结尾的特殊方法。它们允许我们在自定义类中实现类似内置类型的行为，如支持算术运算、索引、迭代等。以下是按功能分类的全面总结，每个分类都有代码案例和详细解释。</p><h2 id="1-对象初始化与表示"><a href="#1-对象初始化与表示" class="headerlink" title="1. 对象初始化与表示"></a>1. <strong>对象初始化与表示</strong></h2><h3 id="1-1-init-和-new"><a href="#1-1-init-和-new" class="headerlink" title="1.1 __init__ 和 __new__"></a>1.1 <code>__init__</code> 和 <code>__new__</code></h3><ul><li><strong>作用</strong>: 初始化对象和控制对象的创建。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__new__ is called&quot;</span>)<br>        instance = <span class="hljs-built_in">super</span>().__new__(cls)<br>        <span class="hljs-keyword">return</span> instance<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__init__ is called&quot;</span>)<br>        self.value = value<br><br>obj = MyClass(<span class="hljs-number">42</span>)<br></code></pre></td></tr></table></figure><ul><li><strong>解释</strong>:</li></ul><p>1.<code>__new__</code>:</p><p>  控制对象的创建过程。<br>  必须返回一个实例对象。<br>  通常用在需要定制实例化流程的场景，比如实现单例模式。</p><p>2.<code>__init__</code>:</p><p>  初始化对象的属性。<br>  接受实例创建后的数据，并设置初始状态。</p><h3 id="1-2-repr-和-str"><a href="#1-2-repr-和-str" class="headerlink" title="1.2 __repr__  和 __str__"></a>1.2 <code>__repr__ </code> 和 <code>__str__</code></h3><ul><li><strong>作用</strong>: 定义对象的字符串表示。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x, y</span>):<br>        self.x = x<br>        self.y = y<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Point(<span class="hljs-subst">&#123;self.x&#125;</span>, <span class="hljs-subst">&#123;self.y&#125;</span>)&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Point at (<span class="hljs-subst">&#123;self.x&#125;</span>, <span class="hljs-subst">&#123;self.y&#125;</span>)&quot;</span><br><br>p = Point(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">repr</span>(p))  <span class="hljs-comment"># 输出：Point(1, 2)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(p))   <span class="hljs-comment"># 输出：Point at (1, 2)</span><br></code></pre></td></tr></table></figure><ul><li><strong>解释</strong>:</li></ul><p>1.<code>__repr__</code>:</p><p>  返回开发者友好的表示，通常用于调试。<br>  通常要求输出的字符串能用 eval() 重建该对象。</p><p>2.<code>__str__</code>:</p><p>  返回用户友好的字符串，适合显示给最终用户。</p><h2 id="2-算术运算"><a href="#2-算术运算" class="headerlink" title="2.算术运算"></a>2.算术运算</h2><h3 id="2-1-算数运算符-add-和-sub"><a href="#2-1-算数运算符-add-和-sub" class="headerlink" title="2.1 算数运算符 __add__  和 __sub__"></a>2.1 算数运算符 <code>__add__ </code> 和 <code>__sub__</code></h3><ul><li><p><strong>作用</strong>: 支持自定义类的加、减、乘等运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Number</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, value</span>):<br>        self.value = value<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__add__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">return</span> Number(self.value + other.value)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__sub__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">return</span> Number(self.value - other.value)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Number(<span class="hljs-subst">&#123;self.value&#125;</span>)&quot;</span><br><br>n1 = Number(<span class="hljs-number">10</span>)<br>n2 = Number(<span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(n1 + n2)  <span class="hljs-comment"># 输出：Number(30)</span><br><span class="hljs-built_in">print</span>(n1 - n2)  <span class="hljs-comment"># 输出：Number(-10)</span><br></code></pre></td></tr></table></figure></li><li><p><strong>解释</strong>:</p></li></ul><p>1.<code>__add__</code>:</p><p>   定义加法操作 +。<br>   接受另一个对象作为参数，并返回新的结果。</p><p>2.<code>__sub__</code>:</p><p>   定义减法操作 -。<br>   类似的魔法方法还有:<br>      <code>__mul__</code>: 定义乘法 *。<br>      <code>__truediv__</code>: 定义除法 &#x2F;。<br>      <code>__floordiv__</code>: 定义整除 &#x2F;&#x2F;。<br>      <code>__mod__</code>: 定义取模 %。<br>      <code>__pow__</code>: 定义幂运算 **</p><h3 id="2-2-反向运算-radd"><a href="#2-2-反向运算-radd" class="headerlink" title="2.2 反向运算 _radd_ "></a>2.2 反向运算 <code>_radd_ </code></h3><ul><li><strong>作用</strong>: 当左操作数不支持运算时调用。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Number</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, value</span>):<br>        self.value = value<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__radd__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">return</span> Number(self.value + other)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Number(<span class="hljs-subst">&#123;self.value&#125;</span>)&quot;</span><br><br>n = Number(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">5</span> + n)  <span class="hljs-comment"># 输出：Number(15)</span><br></code></pre></td></tr></table></figure><ul><li><strong>解释</strong>:</li></ul><p>1.<code>__radd__</code>:</p><p>  定义反向加法。<br>  在常规 <code>__add__</code> 不被调用时（如左操作数是非自定义类型）使用。</p><p>2.类似的反向运算符还有:<br>    <code>__rsub__</code>: 反向减法。<br>    <code>__rmul__</code>: 反向乘法。<br>    <code>__rtruediv__</code>: 反向除法。</p><h2 id="3-容器操作"><a href="#3-容器操作" class="headerlink" title="3.容器操作"></a>3.容器操作</h2><h3 id="3-1-索引访问-getitem-和-setitem-以及-delitem"><a href="#3-1-索引访问-getitem-和-setitem-以及-delitem" class="headerlink" title="3.1 索引访问 __getitem__  和 __setitem__以及__delitem__ "></a>3.1 索引访问 <code>__getitem__ </code> 和 <code>__setitem__</code>以及<code>__delitem__ </code></h3><ul><li><strong>作用</strong>: 支持对象的索引操作。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomList</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, items</span>):<br>        self.items = items<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, index</span>):<br>        <span class="hljs-keyword">return</span> self.items[index]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__setitem__</span>(<span class="hljs-params">self, index, value</span>):<br>        self.items[index] = value<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__delitem__</span>(<span class="hljs-params">self, index</span>):<br>        <span class="hljs-keyword">del</span> self.items[index]<br><br>cl = CustomList([<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>])<br><span class="hljs-built_in">print</span>(cl[<span class="hljs-number">1</span>])   <span class="hljs-comment"># 输出：20</span><br>cl[<span class="hljs-number">1</span>] = <span class="hljs-number">99</span><br><span class="hljs-built_in">print</span>(cl[<span class="hljs-number">1</span>])   <span class="hljs-comment"># 输出：99</span><br><span class="hljs-keyword">del</span> cl[<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(cl.items)  <span class="hljs-comment"># 输出：[10, 30]</span><br></code></pre></td></tr></table></figure></li><li><strong>解释</strong>:</li></ul><p>1.<code>__getitem__</code>:</p><p>   定义对象的索引读取。<br>   允许使用 obj[index] 的形式访问。</p><p>2.<code>__setitem__</code>:</p><p>  定义索引赋值。<br>  支持 obj[index] &#x3D; value。</p><p>3.<code>__delitem__</code>:</p><p>  定义索引删除。<br>  支持 del obj[index]。</p><h3 id="3-2-容器长度与成员检查-len-和-contains"><a href="#3-2-容器长度与成员检查-len-和-contains" class="headerlink" title="3.2 容器长度与成员检查 __len__  和 __contains__"></a>3.2 容器长度与成员检查 <code>__len__ </code> 和 <code>__contains__</code></h3><ul><li><strong>作用</strong>: 支持 len() 和 in 操作。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bag</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, items</span>):<br>        self.items = items<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.items)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__contains__</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-keyword">return</span> item <span class="hljs-keyword">in</span> self.items<br><br>bag = Bag([<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(bag))  <span class="hljs-comment"># 输出：3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;apple&quot;</span> <span class="hljs-keyword">in</span> bag)  <span class="hljs-comment"># 输出：True</span><br><br></code></pre></td></tr></table></figure></li><li><strong>解释</strong>:</li></ul><p>1.<code>___len__</code>:</p><p>  定义对象的长度。<br>  支持 len(obj)。</p><p>2.<code>__contains__</code>:</p><p>  定义成员关系操作。<br>  支持 item in obj。</p><h2 id="4-迭代器协议"><a href="#4-迭代器协议" class="headerlink" title="4.迭代器协议"></a>4.迭代器协议</h2><h3 id="4-1-迭代支持-iter-和-next"><a href="#4-1-迭代支持-iter-和-next" class="headerlink" title="4.1 迭代支持 __iter__  和 __next__"></a>4.1 迭代支持 <code>__iter__ </code> 和 <code>__next__</code></h3><ul><li><strong>作用</strong>: 自定义对象支持迭代。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRange</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, start, end</span>):<br>        self.current = start<br>        self.end = end<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self.current &gt;= self.end:<br>            <span class="hljs-keyword">raise</span> StopIteration<br>        self.current += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> self.current - <span class="hljs-number">1</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> MyRange(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(i)  <span class="hljs-comment"># 输出：1 2 3 4</span><br><br></code></pre></td></tr></table></figure></li><li><strong>解释</strong>:</li></ul><p>1.<code>__iter__</code>:</p><p> 返回迭代器本身。</p><p>2.<code>__next__</code>:</p><p> 定义每次迭代返回的值。<br> 当没有值可返回时，抛出 StopIteration。</p><h2 id="5-上下文管理"><a href="#5-上下文管理" class="headerlink" title="5.上下文管理"></a>5.上下文管理</h2><h3 id="5-1-上下文管理协议-enter-和-exit"><a href="#5-1-上下文管理协议-enter-和-exit" class="headerlink" title="5.1 上下文管理协议 __enter__  和 __exit__"></a>5.1 上下文管理协议 <code>__enter__ </code> 和 <code>__exit__</code></h3><ul><li><strong>作用</strong>: 支持 with 语句。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">File</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, filename, mode</span>):<br>        self.filename = filename<br>        self.mode = mode<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__enter__</span>(<span class="hljs-params">self</span>):<br>        self.file = <span class="hljs-built_in">open</span>(self.filename, self.mode)<br>        <span class="hljs-keyword">return</span> self.file<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__exit__</span>(<span class="hljs-params">self, exc_type, exc_value, traceback</span>):<br>        self.file.close()<br><br><span class="hljs-keyword">with</span> File(<span class="hljs-string">&quot;example.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(<span class="hljs-string">&quot;Hello, World!&quot;</span>)<br><br></code></pre></td></tr></table></figure></li><li><strong>解释</strong>:</li></ul><p>1.<code>__enter__</code>:</p><p>  在进入上下文时执行。<br>  返回资源对象。</p><p>2.<code>__exit__</code>:</p><p>  在离开上下文时执行。<br>  负责清理资源。</p><h2 id="6-其他常用魔法方法"><a href="#6-其他常用魔法方法" class="headerlink" title="6.其他常用魔法方法"></a>6.其他常用魔法方法</h2><h3 id="6-1-call"><a href="#6-1-call" class="headerlink" title="6.1 __call__ "></a>6.1 <code>__call__ </code></h3><ul><li><strong>作用</strong>: 使对象像函数一样调用。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Greeter</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Hello, <span class="hljs-subst">&#123;name&#125;</span>!&quot;</span><br><br>greet = Greeter()<br><span class="hljs-built_in">print</span>(greet(<span class="hljs-string">&quot;Alice&quot;</span>))  <span class="hljs-comment"># 输出：Hello, Alice!</span><br><br></code></pre></td></tr></table></figure><ul><li><strong>解释</strong>:</li></ul><p>1.<code>__call__</code>:<br>  运行的时候可以直接调用函数</p><h3 id="6-2-del"><a href="#6-2-del" class="headerlink" title="6.2 __del__ "></a>6.2 <code>__del__ </code></h3><ul><li><strong>作用</strong>: 定义对象销毁时的行为。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Resource</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Cleaning up resources!&quot;</span>)<br><br>res = Resource()<br><span class="hljs-keyword">del</span> res  <span class="hljs-comment"># 输出：Cleaning up resources!</span><br><br></code></pre></td></tr></table></figure><ul><li><strong>解释</strong>:</li></ul><p>1.<code>__del__</code>:<br>  运行的时候可以直接在销毁对象执行的行为</p><h3 id="6-3-比较操作符-eq-和-lt"><a href="#6-3-比较操作符-eq-和-lt" class="headerlink" title="6.3 比较操作符 __eq_  和 __lt__ "></a>6.3 比较操作符 <code>__eq_ </code> 和 <code>__lt__ </code></h3><ul><li><strong>作用</strong>: 支持比较运算符。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Number</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, value</span>):<br>        self.value = value<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__eq__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">return</span> self.value == other.value<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__lt__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">return</span> self.value &lt; other.value<br><br>n1 = Number(<span class="hljs-number">10</span>)<br>n2 = Number(<span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(n1 == n2)  <span class="hljs-comment"># 输出：False</span><br><span class="hljs-built_in">print</span>(n1 &lt; n2)   <span class="hljs-comment"># 输出：True</span><br><br></code></pre></td></tr></table></figure><ul><li><strong>解释</strong>:</li></ul><p>1.<code>__eq__</code>:<br>  定义 &#x3D;&#x3D;。</p><p>2.<code>__lt__</code>:<br>  定义 &lt;。</p><p>3.还有类似的:<br>  <code>__le__</code> (&lt;&#x3D;)<br>  <code>__gt__</code> (&gt;)<br>  <code>__ge__</code> (&gt;&#x3D;)</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面的这些魔法方法只是python中用的比较多的一部分，还有很多，有时候在编程的时候使用这些高效的魔法方法也是很不错的选择！</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 魔法方法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一文讲清 Git 基本常用命令</title>
    <link href="/2024/12/12/git/"/>
    <url>/2024/12/12/git/</url>
    
    <content type="html"><![CDATA[<h1 id="Git-从入门到精通命令总结"><a href="#Git-从入门到精通命令总结" class="headerlink" title="Git 从入门到精通命令总结"></a>Git 从入门到精通命令总结</h1><h2 id="一、配置-Git"><a href="#一、配置-Git" class="headerlink" title="一、配置 Git"></a>一、配置 Git</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置用户名和邮箱</span><br>git config --global user.name <span class="hljs-string">&quot;Your Name&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;your.email@example.com&quot;</span><br> <br><span class="hljs-comment"># 查看配置信息</span><br>git config --list<br> <br><span class="hljs-comment"># 配置默认编辑器</span><br>git config --global core.editor <span class="hljs-string">&quot;vim&quot;</span><br></code></pre></td></tr></table></figure><h2 id="二、创建和初始化仓库"><a href="#二、创建和初始化仓库" class="headerlink" title="二、创建和初始化仓库"></a>二、创建和初始化仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 初始化一个新的 Git 仓库</span><br>git init<br> <br><span class="hljs-comment"># 克隆远程仓库</span><br>git <span class="hljs-built_in">clone</span> &lt;repository_url&gt;<br></code></pre></td></tr></table></figure><h2 id="三、基本操作"><a href="#三、基本操作" class="headerlink" title="三、基本操作"></a>三、基本操作</h2><h3 id="1-添加文件到暂存区"><a href="#1-添加文件到暂存区" class="headerlink" title="1. 添加文件到暂存区"></a>1. 添加文件到暂存区</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加单个文件</span><br>git add &lt;file&gt;<br> <br><span class="hljs-comment"># 添加所有文件</span><br>git add .<br></code></pre></td></tr></table></figure><h3 id="2-提交到本地仓库"><a href="#2-提交到本地仓库" class="headerlink" title="2. 提交到本地仓库"></a>2. 提交到本地仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 提交暂存区的内容到仓库</span><br>git commit -m <span class="hljs-string">&quot;Commit message&quot;</span><br> <br><span class="hljs-comment"># 提交并跳过暂存区（直接从工作区提交）</span><br>git commit -a -m <span class="hljs-string">&quot;Commit message&quot;</span><br></code></pre></td></tr></table></figure><h3 id="3-查看状态与日志"><a href="#3-查看状态与日志" class="headerlink" title="3. 查看状态与日志"></a>3. 查看状态与日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前仓库状态</span><br>git status<br> <br><span class="hljs-comment"># 查看提交历史</span><br>git <span class="hljs-built_in">log</span><br> <br><span class="hljs-comment"># 简化显示提交历史</span><br>git <span class="hljs-built_in">log</span> --oneline<br></code></pre></td></tr></table></figure><h3 id="4-比较修改"><a href="#4-比较修改" class="headerlink" title="4. 比较修改"></a>4. 比较修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看工作区和暂存区的差异</span><br>git diff<br> <br><span class="hljs-comment"># 查看暂存区和最后一次提交的差异</span><br>git diff --cached<br></code></pre></td></tr></table></figure><h3 id="5-删除与恢复文件"><a href="#5-删除与恢复文件" class="headerlink" title="5. 删除与恢复文件"></a>5. 删除与恢复文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除文件并提交</span><br>git <span class="hljs-built_in">rm</span> &lt;file&gt;<br> <br><span class="hljs-comment"># 恢复暂存区的文件到工作区</span><br>git restore &lt;file&gt;<br> <br><span class="hljs-comment"># 取消暂存的文件</span><br>git restore --staged &lt;file&gt;<br></code></pre></td></tr></table></figure><h2 id="四、分支管理"><a href="#四、分支管理" class="headerlink" title="四、分支管理"></a>四、分支管理</h2><h3 id="1-创建与切换分支"><a href="#1-创建与切换分支" class="headerlink" title="1. 创建与切换分支"></a>1. 创建与切换分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建新分支</span><br>git branch &lt;branch_name&gt;<br> <br><span class="hljs-comment"># 切换分支</span><br>git checkout &lt;branch_name&gt;<br> <br><span class="hljs-comment"># 创建并切换到新分支</span><br>git checkout -b &lt;branch_name&gt;<br></code></pre></td></tr></table></figure><h3 id="2-查看分支"><a href="#2-查看分支" class="headerlink" title="2. 查看分支"></a>2. 查看分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看所有分支</span><br>git branch<br> <br><span class="hljs-comment"># 查看远程分支</span><br>git branch -r<br></code></pre></td></tr></table></figure><h3 id="3-合并分支"><a href="#3-合并分支" class="headerlink" title="3. 合并分支"></a>3. 合并分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 合并分支到当前分支</span><br>git merge &lt;branch_name&gt;<br></code></pre></td></tr></table></figure><h3 id="4-删除分支"><a href="#4-删除分支" class="headerlink" title="4. 删除分支"></a>4. 删除分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除本地分支</span><br>git branch -d &lt;branch_name&gt;<br> <br><span class="hljs-comment"># 强制删除本地分支</span><br>git branch -D &lt;branch_name&gt;<br></code></pre></td></tr></table></figure><h2 id="五、远程仓库"><a href="#五、远程仓库" class="headerlink" title="五、远程仓库"></a>五、远程仓库</h2><h3 id="1-管理远程仓库"><a href="#1-管理远程仓库" class="headerlink" title="1. 管理远程仓库"></a>1. 管理远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前远程仓库</span><br>git remote -v<br> <br><span class="hljs-comment"># 添加远程仓库</span><br>git remote add &lt;name&gt; &lt;url&gt;<br> <br><span class="hljs-comment"># 删除远程仓库</span><br>git remote remove &lt;name&gt;<br></code></pre></td></tr></table></figure><h3 id="2-拉取与推送"><a href="#2-拉取与推送" class="headerlink" title="2. 拉取与推送"></a>2. 拉取与推送</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 从远程仓库拉取代码</span><br>git pull &lt;remote&gt; &lt;branch&gt;<br> <br><span class="hljs-comment"># 推送代码到远程仓库</span><br>git push &lt;remote&gt; &lt;branch&gt;<br></code></pre></td></tr></table></figure><h3 id="3-克隆仓库"><a href="#3-克隆仓库" class="headerlink" title="3. 克隆仓库"></a>3. 克隆仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 克隆远程仓库</span><br>git <span class="hljs-built_in">clone</span> &lt;repository_url&gt;<br></code></pre></td></tr></table></figure><h2 id="六、标签管理"><a href="#六、标签管理" class="headerlink" title="六、标签管理"></a>六、标签管理</h2><h3 id="1-创建标签"><a href="#1-创建标签" class="headerlink" title="1. 创建标签"></a>1. 创建标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建轻量标签</span><br>git tag &lt;tag_name&gt;<br> <br><span class="hljs-comment"># 创建附注标签</span><br>git tag -a &lt;tag_name&gt; -m <span class="hljs-string">&quot;Tag message&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-查看与删除标签"><a href="#2-查看与删除标签" class="headerlink" title="2. 查看与删除标签"></a>2. 查看与删除标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看所有标签</span><br>git tag<br> <br><span class="hljs-comment"># 删除标签</span><br>git tag -d &lt;tag_name&gt;<br></code></pre></td></tr></table></figure><h3 id="3-推送标签到远程仓库"><a href="#3-推送标签到远程仓库" class="headerlink" title="3. 推送标签到远程仓库"></a>3. 推送标签到远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 推送单个标签</span><br>git push &lt;remote&gt; &lt;tag_name&gt;<br> <br><span class="hljs-comment"># 推送所有标签</span><br>git push &lt;remote&gt; --tags<br></code></pre></td></tr></table></figure><h2 id="七、高级操作"><a href="#七、高级操作" class="headerlink" title="七、高级操作"></a>七、高级操作</h2><h3 id="1-暂存修改"><a href="#1-暂存修改" class="headerlink" title="1. 暂存修改"></a>1. 暂存修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 保存当前工作进度</span><br>git stash<br> <br><span class="hljs-comment"># 查看暂存列表</span><br>git stash list<br> <br><span class="hljs-comment"># 恢复暂存内容并删除该条记录</span><br>git stash pop<br> <br><span class="hljs-comment"># 恢复暂存内容但保留记录</span><br>git stash apply<br></code></pre></td></tr></table></figure><h3 id="2-修改历史"><a href="#2-修改历史" class="headerlink" title="2. 修改历史"></a>2. 修改历史</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 修改最后一次提交</span><br>git commit --amend -m <span class="hljs-string">&quot;New commit message&quot;</span><br> <br><span class="hljs-comment"># 重写历史记录（慎用）</span><br>git rebase -i &lt;commit_hash&gt;<br></code></pre></td></tr></table></figure><h3 id="3-回滚"><a href="#3-回滚" class="headerlink" title="3. 回滚"></a>3. 回滚</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 恢复到指定版本（保留历史）</span><br>git revert &lt;commit_hash&gt;<br> <br><span class="hljs-comment"># 硬回滚到指定版本（丢弃修改）</span><br>git reset --hard &lt;commit_hash&gt;<br></code></pre></td></tr></table></figure><h2 id="八、其他有用的命令"><a href="#八、其他有用的命令" class="headerlink" title="八、其他有用的命令"></a>八、其他有用的命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看文件的提交历史</span><br>git blame &lt;file&gt;<br> <br><span class="hljs-comment"># 显示某个文件在各版本中的变化</span><br>git <span class="hljs-built_in">log</span> -p &lt;file&gt;<br> <br><span class="hljs-comment"># 显示简要的仓库状态</span><br>git shortlog<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>基本上通过这些命令，可以逐步掌握 Git 的基本操作及其进阶功能，从而高效管理代码版本。</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
      <category>Git基本常用命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 面试题之多方法实现程序超时检测报错</title>
    <link href="/2024/11/26/360%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    <url>/2024/11/26/360%E7%AC%94%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-面试题之多方法实现程序超时检测报错"><a href="#Python-面试题之多方法实现程序超时检测报错" class="headerlink" title="Python 面试题之多方法实现程序超时检测报错"></a>Python 面试题之多方法实现程序超时检测报错</h1><p>题目描述：检测当前程序运行如果超过了我们指定的时间则为失败报错！</p><p>下面是需要检测的代码信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleTest</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.tests = []<br>       <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_test</span>(<span class="hljs-params">self, test_func</span>):<br>        self.tests.append(test_func)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_tests</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> test_func <span class="hljs-keyword">in</span> self.tests:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Running <span class="hljs-subst">&#123;test_func.__name__&#125;</span>...&quot;</span>)<br>            <span class="hljs-keyword">try</span>:<br>                test_func()<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;test_func.__name__&#125;</span> passed\n&quot;</span>)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;test_func.__name__&#125;</span> failed: <span class="hljs-subst">&#123;e&#125;</span>\n&quot;</span>)<br><br><br><span class="hljs-comment"># 示例测试用例</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_example</span>():<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> + <span class="hljs-number">1</span> == <span class="hljs-number">2</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_failure</span>():<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> + <span class="hljs-number">1</span> == <span class="hljs-number">3</span><br><br><br><span class="hljs-comment"># 创建测试框架实例</span><br>test_runner = SimpleTest()<br><span class="hljs-comment"># 添加测试用例</span><br>test_runner.add_test(test_example)  <span class="hljs-comment"># 该测试用例应通过</span><br>test_runner.add_test(test_failure)  <span class="hljs-comment"># 该测试用例应失败</span><br><span class="hljs-comment"># 运行测试用例</span><br>test_runner.run_tests()<br></code></pre></td></tr></table></figure><h2 id="使用装饰器实现"><a href="#使用装饰器实现" class="headerlink" title="使用装饰器实现"></a>使用装饰器实现</h2><p>这样的目的是我们不需要入侵源代码，就可以实现该功能！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> functools<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_time</span>(<span class="hljs-params">expire_time</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator</span>(<span class="hljs-params">func</span>):<br><span class="hljs-meta">        @functools.wraps(<span class="hljs-params">func</span>)</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            start_time = datetime.datetime.now()<br>            <span class="hljs-keyword">try</span>:<br>                result = func(*args, **kwargs)<br>            <span class="hljs-keyword">finally</span>:<br>                end_time = datetime.datetime.now()<br>                elapsed_time = end_time - start_time<br>                <span class="hljs-keyword">if</span> elapsed_time &gt; expire_time:<br>                    <span class="hljs-keyword">raise</span> TimeoutError(<span class="hljs-string">f&quot;Function <span class="hljs-subst">&#123;func.__name__&#125;</span> timed out after <span class="hljs-subst">&#123;elapsed_time&#125;</span> (longer than <span class="hljs-subst">&#123;expire_time&#125;</span>)&quot;</span>)<br>            <span class="hljs-keyword">return</span> result<br>        <span class="hljs-keyword">return</span> wrapper<br>    <span class="hljs-keyword">return</span> decorator<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleTest</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.tests = []<br>       <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_test</span>(<span class="hljs-params">self, test_func</span>):<br>        self.tests.append(test_func)<br>    <br><span class="hljs-meta">    @run_time(<span class="hljs-params">expire_time=datetime.timedelta(<span class="hljs-params">seconds=<span class="hljs-number">2</span></span>)</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_individual_test</span>(<span class="hljs-params">self, test_func</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Running <span class="hljs-subst">&#123;test_func.__name__&#125;</span>...&quot;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            test_func()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;test_func.__name__&#125;</span> passed\n&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;test_func.__name__&#125;</span> failed: <span class="hljs-subst">&#123;e&#125;</span>\n&quot;</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_tests</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> test_func <span class="hljs-keyword">in</span> self.tests:<br>            <span class="hljs-keyword">try</span>:<br>                self.run_individual_test(test_func)<br>            <span class="hljs-keyword">except</span> TimeoutError <span class="hljs-keyword">as</span> te:<br>                <span class="hljs-built_in">print</span>(te)<br><br><span class="hljs-comment"># 示例测试用例</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_example</span>():<br>    time.sleep(<span class="hljs-number">1</span>)  <span class="hljs-comment"># Simulate a test that takes 1 second</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> + <span class="hljs-number">1</span> == <span class="hljs-number">2</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_failure</span>():<br>    time.sleep(<span class="hljs-number">3</span>)  <span class="hljs-comment"># Simulate a test that takes 3 seconds and should timeout</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> + <span class="hljs-number">1</span> == <span class="hljs-number">3</span><br><br><span class="hljs-comment"># 创建测试框架实例</span><br>test_runner = SimpleTest()<br><span class="hljs-comment"># 添加测试用例</span><br>test_runner.add_test(test_example)  <span class="hljs-comment"># 该测试用例应通过</span><br>test_runner.add_test(test_failure)  <span class="hljs-comment"># 该测试用例应失败（超时）</span><br><span class="hljs-comment"># 运行测试用例</span><br>test_runner.run_tests()<br></code></pre></td></tr></table></figure><p>代码解释：通过装饰器传入的过期时间，然后获取运行前的时间和运行后的时间，两者进行对比，如果差值小于指定的时间则通过，否则失败！</p><p>运行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">Running test_example...<br>test_example passed<br><br>Running test_failure...<br>test_failure failed: <br><br>Function run_individual_test timed out after 0:00:03.000197 (longer than 0:00:02)<br></code></pre></td></tr></table></figure><h2 id="使用线程池实现"><a href="#使用线程池实现" class="headerlink" title="使用线程池实现"></a>使用线程池实现</h2><p>如果我们想要通过线程来实现则可以:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor, as_completed, TimeoutError<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleTest</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.tests = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_test</span>(<span class="hljs-params">self, test_func</span>):<br>        self.tests.append(test_func)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_tests_with_timeout</span>(<span class="hljs-params">self, timeout_seconds</span>):<br>        <span class="hljs-keyword">with</span> ThreadPoolExecutor(max_workers=<span class="hljs-built_in">len</span>(self.tests)) <span class="hljs-keyword">as</span> executor:<br>            future_to_test = &#123;executor.submit(test_func): test_func <span class="hljs-keyword">for</span> test_func <span class="hljs-keyword">in</span> self.tests&#125;<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">for</span> future <span class="hljs-keyword">in</span> as_completed(future_to_test, timeout=timeout_seconds):<br>                    test_func = future_to_test[future]<br>                    <span class="hljs-keyword">try</span>:<br>                        future.result()  <span class="hljs-comment"># 这将等待任务完成或抛出异常</span><br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;test_func.__name__&#125;</span> passed&quot;</span>)<br>                    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;test_func.__name__&#125;</span> failed: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">except</span> TimeoutError:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;One or more tests timed out.&quot;</span>)<br>                <span class="hljs-comment"># 注意：这里不能直接中止未完成的测试，但你可以记录它们的状态</span><br><br><span class="hljs-comment"># 示例测试用例</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_example</span>():<br>    time.sleep(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 模拟一个耗时1秒的测试</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> + <span class="hljs-number">1</span> == <span class="hljs-number">2</span>, <span class="hljs-string">&quot;Assertion failed in test_example&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_failure</span>():<br>    time.sleep(<span class="hljs-number">3</span>)  <span class="hljs-comment"># 模拟一个耗时3秒并会超时的测试</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> + <span class="hljs-number">1</span> == <span class="hljs-number">3</span>, <span class="hljs-string">&quot;Assertion failed in test_failure&quot;</span><br><br><span class="hljs-comment"># 创建测试框架实例</span><br>test_runner = SimpleTest()<br><span class="hljs-comment"># 添加测试用例</span><br>test_runner.add_test(test_example)  <span class="hljs-comment"># 该测试用例应通过</span><br>test_runner.add_test(test_failure)  <span class="hljs-comment"># 该测试用例应超时</span><br><span class="hljs-comment"># 运行测试用例并设置超时时间为2秒</span><br>test_runner.run_tests_with_timeout(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>代码解释： 当前通过线程池启动，获取当前test_func的长度，作为启动线程池的个数，通过as_completed 去检测当前是否完成，然后对比超时时间，超过了则报错！</p><p>运行结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">test_example passed<br>One or more tests timed out.<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上述还有其他的办法，目前在面试中可以采取这两种！</p>]]></content>
    
    
    <categories>
      
      <category>面试题目搜集</category>
      
      <category>Python 算法题目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一次讲清SQL的各种内外查询连接</title>
    <link href="/2024/11/18/sql/"/>
    <url>/2024/11/18/sql/</url>
    
    <content type="html"><![CDATA[<h1 id="一次讲清SQL的各种内外连接查询"><a href="#一次讲清SQL的各种内外连接查询" class="headerlink" title="一次讲清SQL的各种内外连接查询"></a>一次讲清SQL的各种内外连接查询</h1><p>在MySQL中，连接（JOIN）操作用于从两个或多个表中检索相关数据。主要的连接类型包括内连接、外连接和自连接，以及交叉连接等。以下是对这些连接类型的详细解释：</p><h2 id="一、内连接（INNER-JOIN）"><a href="#一、内连接（INNER-JOIN）" class="headerlink" title="一、内连接（INNER JOIN）"></a>一、内连接（INNER JOIN）</h2><p>内连接是最常用的连接方式，它返回两个表中匹配的记录。如果在一个表中有记录而在另一个表中没有匹配的记录，则这些记录不会出现在结果中。</p><ul><li><strong>语法</strong>：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> columns<br><span class="hljs-keyword">FROM</span> table1<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> table2<br><span class="hljs-keyword">ON</span> table1.common_field <span class="hljs-operator">=</span> table2.common_field;<br></code></pre></td></tr></table></figure><ul><li><strong>示例</strong>：</li></ul><p>假设有两个表，<code>employees</code>（员工表）和<code>departments</code>（部门表），要查询每个员工及其所在的部门名称，可以使用内连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> e.name <span class="hljs-keyword">AS</span> employee_name, d.department_name<br><span class="hljs-keyword">FROM</span> employees e<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d<br><span class="hljs-keyword">ON</span> e.department_id <span class="hljs-operator">=</span> d.department_id;<br></code></pre></td></tr></table></figure><h2 id="二、外连接（OUTER-JOIN）"><a href="#二、外连接（OUTER-JOIN）" class="headerlink" title="二、外连接（OUTER JOIN）"></a>二、外连接（OUTER JOIN）</h2><p>外连接返回两个表中匹配的记录以及一个表中的所有记录（即使在另一个表中没有匹配项）。外连接分为左外连接（LEFT JOIN）、右外连接（RIGHT JOIN）和全外连接（FULL OUTER JOIN）。需要注意的是，MySQL本身不直接支持全外连接，但可以通过联合左连接和右连接的结果来模拟全外连接。</p><ul><li><strong>左外连接（LEFT JOIN）</strong>：</li></ul><p>返回左表的所有记录，以及右表中匹配的记录。如果左表中的记录在右表中没有匹配项，则结果中这些记录的右表部分将包含NULL。</p><ul><li><strong>语法</strong>：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> columns<br><span class="hljs-keyword">FROM</span> table1<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> table2<br><span class="hljs-keyword">ON</span> table1.common_field <span class="hljs-operator">=</span> table2.common_field;<br></code></pre></td></tr></table></figure><ul><li><strong>示例</strong>：</li></ul><p>查询每个员工及其所在的部门名称，包括那些没有部门的员工：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> e.name <span class="hljs-keyword">AS</span> employee_name, d.department_name<br><span class="hljs-keyword">FROM</span> employees e<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> departments d<br><span class="hljs-keyword">ON</span> e.department_id <span class="hljs-operator">=</span> d.department_id;<br></code></pre></td></tr></table></figure><ul><li><strong>右外连接（RIGHT JOIN）</strong>：</li></ul><p>返回右表的所有记录，以及左表中匹配的记录。如果右表中的记录在左表中没有匹配项，则结果中这些记录的左表部分将包含NULL。</p><ul><li><strong>语法</strong>：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> columns<br><span class="hljs-keyword">FROM</span> table1<br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> table2<br><span class="hljs-keyword">ON</span> table1.common_field <span class="hljs-operator">=</span> table2.common_field;<br></code></pre></td></tr></table></figure><ul><li><strong>示例</strong>：</li></ul><p>（假设有一个与<code>employees</code>表相关的另一个表，为了示例需要，这里不具体给出表结构和数据）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> columns<br><span class="hljs-keyword">FROM</span> table1<br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> table2<br><span class="hljs-keyword">ON</span> table1.common_field <span class="hljs-operator">=</span> table2.common_field;<br></code></pre></td></tr></table></figure><p>这个查询会返回<code>table2</code>的所有行，以及<code>table1</code>中与<code>table2</code>匹配的行。</p><ul><li><strong>全外连接（FULL OUTER JOIN，MySQL不直接支持，但可通过UNION模拟）</strong>：</li></ul><p>结合左连接和右连接的功能，返回左表和右表中所有的记录。如果左表中的某行在右表没有匹配，或者右表中的某行在左表没有匹配，则这些行的另一侧将包含NULL。</p><ul><li><strong>模拟语法</strong>：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> columns<br><span class="hljs-keyword">FROM</span> table1<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> table2<br><span class="hljs-keyword">ON</span> table1.common_field <span class="hljs-operator">=</span> table2.common_field<br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> columns<br><span class="hljs-keyword">FROM</span> table1<br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> table2<br><span class="hljs-keyword">ON</span> table1.common_field <span class="hljs-operator">=</span> table2.common_field;<br></code></pre></td></tr></table></figure><h2 id="三、自连接（SELF-JOIN）"><a href="#三、自连接（SELF-JOIN）" class="headerlink" title="三、自连接（SELF JOIN）"></a>三、自连接（SELF JOIN）</h2><p>一个表与其自身连接，通常用于查找表中与其他记录相关的数据。当表中记录之间存在关系，需要比较同一表中的不同记录时使用。</p><ul><li><strong>语法</strong>：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> a.columns, b.columns<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">table</span> a<br><span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">table</span> b<br><span class="hljs-keyword">ON</span> a.common_field <span class="hljs-operator">=</span> b.related_field;<br></code></pre></td></tr></table></figure><ul><li><strong>示例</strong>：</li></ul><p>查询每个员工及其部门中其他员工的名字（例如，寻找与同部门员工相关的记录）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> e1.name <span class="hljs-keyword">AS</span> employee_name, e2.name <span class="hljs-keyword">AS</span> colleague_name<br><span class="hljs-keyword">FROM</span> employees e1<br><span class="hljs-keyword">JOIN</span> employees e2<br><span class="hljs-keyword">ON</span> e1.department_id <span class="hljs-operator">=</span> e2.department_id<br><span class="hljs-keyword">WHERE</span> e1.employee_id <span class="hljs-operator">!=</span> e2.employee_id;<br></code></pre></td></tr></table></figure><h2 id="四、交叉连接（CROSS-JOIN）"><a href="#四、交叉连接（CROSS-JOIN）" class="headerlink" title="四、交叉连接（CROSS JOIN）"></a>四、交叉连接（CROSS JOIN）</h2><p>交叉连接返回两个表的笛卡尔积，即将第一个表的每一行与第二个表的每一行进行配对。这种类型的连接不需要指定连接条件，因为它简单地将所有可能的行组合在一起。通常不带WHERE子句使用，因为它会返回大量的数据。</p><ul><li><strong>语法</strong>：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> columns<br><span class="hljs-keyword">FROM</span> table1<br><span class="hljs-keyword">CROSS</span> <span class="hljs-keyword">JOIN</span> table2;<br></code></pre></td></tr></table></figure><ul><li><strong>示例</strong>：</li></ul><p>（假设有两个表<code>table1</code>和<code>table2</code>，为了示例需要，这里不具体给出表结构和数据）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> columns<br><span class="hljs-keyword">FROM</span> table1<br><span class="hljs-keyword">CROSS</span> <span class="hljs-keyword">JOIN</span> table2;<br></code></pre></td></tr></table></figure><p>这个查询将产生一个结果集，其中包含<code>table1</code>中的每一行与<code>table2</code>中的每一行的所有组合。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是对MySQL中各种连接类型的详细解释和示例。在实际应用中，应根据具体需求选择合适的连接类型来检索相关数据。</p>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
      <category>SQL 各种内外查询连接</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jmeter 保存接口数据到csv文件中</title>
    <link href="/2024/10/28/jmeter%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%88%B0csv/"/>
    <url>/2024/10/28/jmeter%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%88%B0csv/</url>
    
    <content type="html"><![CDATA[<h1 id="Jmeter-如何将接口数据保存到CSV文件中"><a href="#Jmeter-如何将接口数据保存到CSV文件中" class="headerlink" title="Jmeter 如何将接口数据保存到CSV文件中"></a>Jmeter 如何将接口数据保存到CSV文件中</h1><p>今天我们来介绍如何将通过Jmetet将我们请求的接口数据，将其导出到CSV文件中！相信这一篇文章可以给很多同学得到更多的知识！</p><h2 id="Jmetet-设置请求接口"><a href="#Jmetet-设置请求接口" class="headerlink" title="Jmetet 设置请求接口"></a>Jmetet 设置请求接口</h2><p>首先设置请求线程组，这里我们设置请求的线程组，Ramp-Up秒，循环次数 均设为1.</p><img src="/2024/10/28/jmeter%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%88%B0csv/jmeter%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE1.png" class=""><p>然后添加一个HTTP请求</p><img src="/2024/10/28/jmeter%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%88%B0csv/jmeter%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE2.png" class=""><p>此时这时候我们已经配置好了请求的相关信息。</p><h2 id="Jmeter-设置提取接口返回"><a href="#Jmeter-设置提取接口返回" class="headerlink" title="Jmeter 设置提取接口返回"></a>Jmeter 设置提取接口返回</h2><p>首先我们观察接口的返回值，然后通过json数据提取器，将我们需要提取的数据进行提取，首先观察返回体结构，然后提取数据。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;bizCode&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">10000</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;https://test.matchplay.com/static//page/detail/soccer/football_match_started.png&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;football_match_started&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;https://test.matchplay.com/static//page/detail/soccer/football_match_ended.png&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;football_match_ended&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;https://test.matchplay.com/static//page/detail/soccer/football_video_assistant_referee_over.png&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;football_video_assistant_referee_over&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;innerMsg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>假如我们想要提取其中的icon字段，那么你就可以通过Json提取，添加一个Json提取器</p><p>那么我们的提取公式就是<code>$.data.icon[*].icon</code> 其中[*] 表示提取多个匹配,然后在Match No. 输入-1 表示匹配所有。</p><img src="/2024/10/28/jmeter%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%88%B0csv/jmeter%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE3.png" class=""><p>这里我们可以添加多个Json 提取器，然后写入具体的规则即可！</p><h2 id="Benshell-处理写入csv脚本"><a href="#Benshell-处理写入csv脚本" class="headerlink" title="Benshell 处理写入csv脚本"></a>Benshell 处理写入csv脚本</h2><p>首先添加一个后置处理器Benshell</p><img src="/2024/10/28/jmeter%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%88%B0csv/jmeter%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE4.png" class=""><p>然后添加一个调试后置处理器，这样我们就可以看到抓取的数据信息</p><img src="/2024/10/28/jmeter%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%88%B0csv/jmeter%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE5.png" class=""><h3 id="编写Benshell-脚本"><a href="#编写Benshell-脚本" class="headerlink" title="编写Benshell 脚本"></a>编写Benshell 脚本</h3><p>在Benshell 中写入脚本如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs shell">import java.io.BufferedWriter;  <br>import java.io.FileWriter;  <br>import java.io.IOException;  <br>  <br>// 文件路径  <br>String filePath = &quot;C:\\Users\\15424\\Desktop\\比赛\\biz.csv&quot;;  <br>  <br>  <br>// 打开文件以追加模式写入（如果文件不存在，它将被创建）  <br>FileWriter fstream = new FileWriter(filePath);  <br>BufferedWriter out = new BufferedWriter(fstream);  <br><br>int invoiceCodeMatchNr = Integer.parseInt(vars.get(&quot;bizcode_matchNr&quot;));<br>int invoiceNumberMatchNr = Integer.parseInt(vars.get(&quot;id_matchNr&quot;));<br>// int billingDateMatchNr = Integer.parseInt(vars.get(&quot;bb_matchNr&quot;));<br>//int eInvoiceNumberMatchNr = Integer.parseInt(vars.get(&quot;eInvoiceNumber_matchNr&quot;));<br>  <br>try &#123; <br>    // 使用 for 循环写入数据  <br>    for (int i = 1; i &lt;= invoiceCodeMatchNr; i++) &#123;  <br>        // 构造要写入的数据，这里只是简单的示例，你可以根据需要修改 <br>        String line = vars.get(&quot;bizcode_&quot;+i);<br>        String line2 = vars.get(&quot;id_&quot;+i);<br>        log.info(line);<br>          <br>        // 写入数据到文件  <br>        out.write(line+&quot;,&quot;+line2);<br>        out.newLine();   <br>    &#125;<br><br>    out.write(&quot;,&quot;);<br>&#125; catch (IOException e) &#123;  <br>    // 处理可能的 IOException  <br>    log.error(&quot;Error writing to file: &quot; + e.getMessage());  <br>&#125; finally &#123;  <br>    // 确保文件被关闭  <br>    try &#123;  <br>        if (out != null) &#123;  <br>            out.close();  <br>        &#125;  <br>        if (fstream != null) &#123;  <br>            fstream.close();  <br>        &#125;  <br>    &#125; catch (IOException ex) &#123;  <br>        // 处理关闭文件时的异常  <br>        log.error(&quot;Error closing file: &quot; + ex.getMessage());  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="脚本解析"><a href="#脚本解析" class="headerlink" title="脚本解析"></a>脚本解析</h3><p>首先我们看到查看结果树里面已经有了匹配的个数</p><img src="/2024/10/28/jmeter%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%88%B0csv/jmeter%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE6.png" class=""><p>也就是 bizcode_matchNr，id_matchNr 通过这个我们就可以知道具体匹配了多少个，那么就可以通过for循环来实现循环去获取我们对应的值，然后在观察对应的key的规则：</p><img src="/2024/10/28/jmeter%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%88%B0csv/jmeter%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE7.png" class=""><p>可以观察到是你的变量名+_+顺序数字组成，那么我们知道了具体规则就可以写for 循环了！</p><p>首先定义我们的变量也就是匹配的总个数:bizcode_matchNr</p><p><code>int invoiceCodeMatchNr = Integer.parseInt(vars.get(&quot;bizcode_matchNr&quot;));</code></p><p>然后我们遍历根据规则获取对应的值:</p><pre><code class="hljs">for (int i = 1; i &lt;= invoiceCodeMatchNr; i++) &#123;      // 构造要写入的数据，这里只是简单的示例，你可以根据需要修改     String line = vars.get(&quot;bizcode_&quot;+i);    String line2 = vars.get(&quot;id_&quot;+i);    log.info(line);        &#125;</code></pre><p>然后将我们对应的信息写入csv</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">import java.io.BufferedWriter;  <br>import java.io.FileWriter;  <br>import java.io.IOException;  <br>  <br>// 文件路径  <br>String filePath = &quot;C:\\Users\\15424\\Desktop\\比赛\\biz.csv&quot;;  <br>  <br>  <br>// 打开文件以追加模式写入（如果文件不存在，它将被创建）  <br>FileWriter fstream = new FileWriter(filePath);  <br>BufferedWriter out = new BufferedWriter(fstream);<br><br>  // 写入数据到文件  <br>   out.write(line+&quot;,&quot;+line2);<br><br></code></pre></td></tr></table></figure><p>完成的for 循环：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">int invoiceCodeMatchNr = Integer.parseInt(vars.get(&quot;bizcode_matchNr&quot;));<br>int invoiceNumberMatchNr = Integer.parseInt(vars.get(&quot;id_matchNr&quot;));<br><br>    for (int i = 1; i &lt;= invoiceCodeMatchNr; i++) &#123;  <br>        // 构造要写入的数据，这里只是简单的示例，你可以根据需要修改 <br>        String line = vars.get(&quot;bizcode_&quot;+i);<br>        String line2 = vars.get(&quot;id_&quot;+i);<br>        log.info(line);<br>          <br>        // 写入数据到文件  <br>        out.write(line+&quot;,&quot;+line2);<br>        out.newLine();<br>        <br>        <br>    &#125;<br></code></pre></td></tr></table></figure><p>那么以上就是我们的shell脚本的完整信息。</p><h2 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h2><p>这样就可以看到我们的数据都已经写入近csv文件啦！</p><img src="/2024/10/28/jmeter%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%88%B0csv/jmeter%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE8.png" class=""><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这里我们就完成了所有的csv写入操作了，如果各位同学有不明白的地方欢迎随时留言！</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Jmeter</category>
      
      <category>Jmeter 保存数据到CSV文件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Jmeter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12306 火车票余票查询脚本开发</title>
    <link href="/2024/10/08/12306%E4%BD%99%E7%A5%A8%E6%9F%A5%E8%AF%A2/"/>
    <url>/2024/10/08/12306%E4%BD%99%E7%A5%A8%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="12306-余票查询开发初衷"><a href="#12306-余票查询开发初衷" class="headerlink" title="12306 余票查询开发初衷"></a>12306 余票查询开发初衷</h1><p>可能很多同学有疑惑都2024年了，怎么还需要自己开发这个余票查询功能呢？毕竟当前市面太多自动化抢票工具了，只需要填写基本信息就可以完成从抢票到下单等一系列操作，确实，现在有很多抢票软件做的都很完美，但是有一个痛点目前是我遇到的，那就是</p><p>1.我想查例如 北京—&gt; 石家庄的票，在这样的大型节假日的时候，我们都会选择抢票，但是抢票软件都是选择你关注的的，虽然抢票软件可以自动抢新开列车，但是如果新开的列车不是你所期望的时间，这时间把钱付了，你还要退票，那么就要面临手续费！</p><p>2.另一方面，我想看当前那些有余票的，我就需要每次打开软件去查询，没有一个很方便的直接告诉我，哪列车当前有票！会感觉很麻烦，如果有一个程序可以帮我自动查询然后告诉我，那么就很完美了！</p><p>那么我开发的这个脚本就可以完美的解决上述的两个问题，但是目前仅限于查询余票，其余还是做不到的！后续功能可以慢慢加上！</p><h2 id="12306-网站接口剖析"><a href="#12306-网站接口剖析" class="headerlink" title="12306 网站接口剖析"></a>12306 网站接口剖析</h2><p>如果我们想查询余票，各位同学肯定会想到的时候通过接口查询，那么我们首先观察12306 网站在查询的时候都用了那些接口呢？假如我们这时候查询 北京—&gt; 石家庄 2024年10月9题的火车票，通过查询NetWork面板我们发现一共请求了2个接口！</p><img src="/2024/10/08/12306%E4%BD%99%E7%A5%A8%E6%9F%A5%E8%AF%A2/12306_1.png" class=""><p>那么这两个接口具体是干嘛的呢？ 下面我们就先剖析第一个接口</p><p>url_1: <a href="https://kyfw.12306.cn/otn/leftTicket/queryG?leftTicketDTO.train_date=2024-10-09&leftTicketDTO.from_station=BJP&leftTicketDTO.to_station=SJP&purpose_codes=ADULT">https://kyfw.12306.cn/otn/leftTicket/queryG?leftTicketDTO.train_date=2024-10-09&amp;leftTicketDTO.from_station=BJP&amp;leftTicketDTO.to_station=SJP&amp;purpose_codes=ADULT</a></p><p>这个url_1 实现了我们的查询功能就是查询北京—&gt;石家庄 10月09日的票，可以看返回体：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;httpstatus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;IN8i2mjU4pcjjt%2FuzxOnHM4uHCelK7W%2FFIJqW4sNvITAIkDPEQXWDCZRPUOlCQDyzvC2TBDcOaw8%0AHDSJMjOYT%2FZUGmDFoxGjVSeCZ0m3vuq11L0d5I8BhBL%2FcWpvvt%2FQzFHg57AgDF%2B24iCwm1rNRfvx%0A8WqPrdaBsIa7ffyQ9%2FNMxitJVEF9AAv0kc8VjDK0wqGAqS%2F6QlXILrQTUeh830ahknr0%2F017eIrI%0A67tFo0WX2HUhszbtLo7mEk%2FFWu%2BovNguW%2BOG7%2BB%2Bh1GBf61lRTktO03u0XOz3Di3NY%2FUKARr7vE5%0AnqcGhjzJ9uFZrXc2Q2gMq04L2uz43U0jxNqtkb9ZmnXO%2BeYC|预订|25000K772836|K7725|QTP|HDP|FTP|SJP|05:10|08:44|03:34|Y|Jz1NB7nb1uVJBAoXtjLOZGJ20tRCNaJVqDZwRJdiCitslCNE|20241008|3|P4|05|10|1|0|||||||有||有|有|||||1030W0|131|1|0||100415002130087500211004153540|0|||||1|0#0#0#0#z#0#3#z||7|CHN,CHN|||N#N#|330087531009553200925||202409250800|&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;4y1ZRp%2BUDU05TDqqGv5db0B8Ihr2U1k%2FUeqFOAFBuD7D4figNevZqpZ6BhdLoptjhZm0o1VkTITk%0A3ls1ZBfEW%2BM3gjtMX5jVAt7kltUotA8BR7mIkjeKOO1p0%2F6xN13lF5egt%2BVI3l5OH2HCdNox%2BJR0%0AXYaq%2BW%2BIJfFMsylSFQ4VzXzuZT2LZIgB4vJi2L5xnxBbUMWNMVC%2BE2uLm8%2BYUSLVjtA23UYLJCvZ%0AotZroMKl5%2FWYzSTg5t%2BsDf0IWJflfP9oUFRJQ71joO5iAhRO7K2ztONUGpXeegX8iLvFAgGyEy9h%0Af3bbljnIxuSs8earw%2FBRl4QpP5%2F9vcCPe7%2BgkeRHKIA%3D|预订|24000G67010K|G6701|BXP|HPP|BXP|SJP|05:34|06:52|01:18|Y|gM8t0dYOT81RRsMTXqzAZBNqGbCT0vYlvM9nnLI%2F6hDnhC7c|20241009|3|P2|01|03|1|0|||||||||||有|有|9||90M0O0|9MO|1|0||9040700009M016300021O010200021|0|||||1|0#1#0#0#z#0#z#z||7|CHN,CHN|||N#N#||90076M0066O0066|202409250800|&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;aJBRnhEtmXAILBbtHPZE5sGXxKlGgBMT4oHXCbUtcPuZ3qg3wWoFgPftibMhjuGeeMyWLj%2FOMpA4%0A1S0xBnV93r8DZd%2BjeZ4ctKY8mrxeTZqQS2hC%2FQdik20TK%2FDIeoXiTcCkZvD6gVUqMgIDBkb21q1J%0Alo5s%2BHidvNoHsOGvFqN4LHScUsfRvT8bWgW0gjuHs%2F%2FD2LRYdoWI4huvq1ymE112foQZCBFBaMTG%0AerGlG%2BMeFF6Yuk8nfv0jFZ90L3M9LmjZ3juZOklCSAl1bTGx5R31iszI%2BmrAd1NPGazE7VglF5Rz%0A0dxDkY27GSnazC6iVP40G4koVDk8EhXfl81rLTHtopE%3D|预订|24000G67030M|G6703|BXP|SJP|BXP|SJP|06:09|07:38|01:29|Y|3xnb0KoZxbzyVOsX6Abi3Bt1wPSt82%2FVpCTzaT73xMwj4JKw|20241009|3|P3|01|04|1|0|||||||||||有|有|有||90M0O0|9MO|1|0||9040700021M013600021O008500021|0|||||1|0#0#0#0#z#0#z#z||7|CHN,CHN|||N#N#||90076M0056O0055|202409250800|&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;Ogwl8J7aObJfs%2F3CMJhpSdQGFSiYlTW3BFiMMI6XfFv9oGNvbzSdPewztg4FaP7YVypFXeKH4IVI%0AjZs0qTz2jKFKllmW2I3Vb9VQMW6WYOcNk1lX3rJF7vnglUOsQQPQnXeYWPlasqgPchyVoX0lcab3%0AUJJ8p4PRgz1%2BDV11X%2FxqrgBMajeH3oceMve6xFuZPx0hv1ULSLmqzs4soBc4aAqXG1NhnyUn8Cle%0A%2BfIbM%2FGoWvBxny3boSaGHqG0RtOqkSz57MCHny4lhKzj0unAJk9PHWuEKD9pBcZKzMco2FQAZa81%0ABn2yKz%2Fj%2Ff5pL0P93yXy5RrXg9soKhdEzYp40T0DTL8%3D|预订|240000G55920|G559|BXP|JGF|BXP|SJP|06:15|07:26|01:11|Y|IItRSsrNtZYpYkCJw54WZ92Lec8RbTDQ%2BJpF4yOQO%2Bv1U21q|20241009|3|P4|01|02|1|0|||||||||||有|5|无||90M0O0|9MO|0|1||9040700000M020600005O012900021|0|||||1|0#0#0#0#z#0#z#z||7|CHN,CHN|||N#N#||90076M0084O0084|202409250800|&quot;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;flag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sametlc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Y&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;map&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;VVP&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;石家庄北&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;IFP&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;北京朝阳&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;FTP&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;北京丰台&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;SJP&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;石家庄&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;BJP&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;北京&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;QIP&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;清河&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;BXP&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;北京西&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;GIP&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;高邑&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;messages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>上述的返回体中我截取了result中的部分数据，因为返回太多了我们只需要对一个观察就可以找到具体的规律，此时我们看到</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">&quot;IN8i2mjU4pcjjt%2FuzxOnHM4uHCelK7W%2FFIJqW4sNvITAIkDPEQXWDCZRPUOlCQDyzvC2TBDcOaw8%0AHDSJMjOYT%2FZUGmDFoxGjVSeCZ0m3vuq11L0d5I8BhBL%2FcWpvvt%2FQzFHg57AgDF%2B24iCwm1rNRfvx%0A8WqPrdaBsIa7ffyQ9%2FNMxitJVEF9AAv0kc8VjDK0wqGAqS%2F6QlXILrQTUeh830ahknr0%2F017eIrI%0A67tFo0WX2HUhszbtLo7mEk%2FFWu%2BovNguW%2BOG7%2BB%2Bh1GBf61lRTktO03u0XOz3Di3NY%2FUKARr7vE5%0AnqcGhjzJ9uFZrXc2Q2gMq04L2uz43U0jxNqtkb9ZmnXO%2BeYC|预订|25000K772836|K7725|QTP|HDP|FTP|SJP|05:10|08:44|03:34|Y|Jz1NB7nb1uVJBAoXtjLOZGJ20tRCNaJVqDZwRJdiCitslCNE|20241008|3|P4|05|10|1|0|||||||有||有|有|||||1030W0|131|1|0||100415002130087500211004153540|0|||||1|0#0#0#0#z#0#3#z||7|CHN,CHN|||N#N#|330087531009553200925||202409250800|&quot;<br></code></pre></td></tr></table></figure><p>首先是一堆乱码，后面我们看到有中文的预定，然后我们继续观察看到有 K7725 这个火车编号的 信息，然后后面后有部分时间信息，以及后续的票务信息：|||||||有||有|有|||||, 那么有人要问了这些<code>|</code>表示什么呢？先不管，这里我们认为是票务的信息，那么我们发现也就这些是我们能看懂的，那么我们怎么利用现有信息来实现余票查询呢？别着急后续继续解释。</p><p>url_2:<a href="https://kyfw.12306.cn/lcquery/queryG?train_date=2024-10-09&from_station_telecode=BJP&to_station_telecode=SJP&result_index=0&can_query=Y&isShowWZ=Y&sort_type=2&purpose_codes=00&is_loop_transfer=S&channel=E&_json_att=">https://kyfw.12306.cn/lcquery/queryG?train_date=2024-10-09&amp;from_station_telecode=BJP&amp;to_station_telecode=SJP&amp;result_index=0&amp;can_query=Y&amp;isShowWZ=Y&amp;sort_type=2&amp;purpose_codes=00&amp;is_loop_transfer=S&amp;channel=E&amp;_json_att=</a></p><p>url_2 是查询中转的接口，也就是查询北京—&gt;石家庄 10月09日的可以乘坐哪些中转的车，一起看返回体：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;flag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;result_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;can_query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;N&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;middleList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;all_lishi&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3小时52分钟&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;all_lishi_minutes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">232</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;arrive_date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-10-09&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;arrive_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;12:14&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;end_station_code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;SJP&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;end_station_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;石家庄&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;first_train_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;24000G780703&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;from_station_code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;VNP&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;from_station_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;北京南&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;fullList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;arrive_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;08:43&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;bed_level_info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;controlled_train_flag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;country_flag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CHN,CHN&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;day_difference&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;dw_flag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;5#1#0#S#z#0#z#z&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;end_station_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;廊坊&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;end_station_telecode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;LJP&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;from_station_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;北京南&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;from_station_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;01&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;from_station_telecode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;VNP&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;gg_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;gr_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;is_support_card&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;lishi&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;00:21&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;local_arrive_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;local_start_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;qt_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;rw_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;rz_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;seat_discount_info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;90075M0080O0076&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;seat_types&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;9MO&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;srrb_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;start_station_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;北京南&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;start_station_telecode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;VNP&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;start_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;08:22&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;start_train_date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;20241009&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;station_train_code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;G7807&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;swz_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;to_station_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;廊坊&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;to_station_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;02&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;to_station_telecode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;LJP&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;train_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;24000G780703&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;train_seat_feature&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;trms_train_flag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;tz_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;wz_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;yb_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;yp_info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;9008700002M004200018O002500021&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;yw_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;yz_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;ze_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;有&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;zy_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;18&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;isHeatTrain&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;N&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;isOutStation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;lCWaitTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;lishi_flag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;middle_date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-10-09&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;middle_station_code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;LJP&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;middle_station_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;廊坊&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;same_station&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;same_train&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;N&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">386</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;score_str&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;276+100+10=386##100#100&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;scretstr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;MjAyNC0xMC0wOSMwMCNHNzgwNyMwMDoyMSMwODoyMiMyNDAwMEc3ODA3MDMjVk5QI0xKUCMwODo0MyPljJfkuqzljZcj5buK5Z2KIzAxIzAyI2RSWkVHSk9HdTRZdDlVNE0vVkhGaHdRckk5TXpaNGlaYkpYaFJHS1hlNi9RMXo5ZiNQMyMxNCMxMjMwIzMjMzEjMDM1NyMwMSMwMzU4IzAjVk5QI0xKUCMxNzI4MzY4MzQwMjcwIzE3MjcyMzg2MDAwMDAjNSwxLDAsUyx6LDAseix6IyMjQ0hOLENITiM6OjoyMDI0LTEwLTA5IzAwI0c3ODA1IzAyOjQyIzA5OjMyIzJkMDAwRzc4MDUwMyNMSlAjU0pQIzEyOjE0I%2BW7iuWdiiPnn7PlrrbluoQjMDEjMDYjQ1pxYm94dlFlM1Z4Y3ZoYzd4TFlWNnNFN3BjTmNkS2VMSUQ5eXJUWldGTjhxK1k4I1A0IzE0IzE2MDAjMyMwMSMwMzU4IzAxIzAzNDkjMCNMSlAjSFBQIzE3MjgzNjgzNDAyNzAjMTcyNzI1MTIwMDAwMCM1LDEsMCxTLHosMCx6LHojIyNDSE4sQ0hOIzo6Om51bGwjMDo6OjI3RDdGMjg5ODcxODdFNUM3RkJBMEUyMjRDNjkxOTUzOTNCMUY1N0FENThDOUQwMUQ3RkNCN0ZEOjo6MDo6Olk6OjpZ&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;second_train_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2d000G780503&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;start_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;08:22&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;train_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;train_date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-10-09&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;use_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;wait_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;49分钟&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;wait_time_minutes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">49</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;errorMsg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这里返回的信息也依旧截取了部分返回信息，那么可以看到这个返回体更加清晰，描述了中转车量的信息，那么由于我们这里暂时不考虑中转，首先就关心这个接口了！</p><h2 id="针对url-1-接口的返回体解析"><a href="#针对url-1-接口的返回体解析" class="headerlink" title="针对url_1 接口的返回体解析"></a>针对url_1 接口的返回体解析</h2><p>那么从上面我们看到了返回信息里面包含了乘车的编号信息，票务信息，那么就可以实现查询了，首先我们观察第一个也是上面遗留的问题：<code>|||||||有||有|有|||||</code>, 这些 <code>|</code> 表示什么意思？下面我来解释一下，通过观察 我们对比该车次的返回在12306页面的表达看</p><img src="/2024/10/08/12306%E4%BD%99%E7%A5%A8%E6%9F%A5%E8%AF%A2/12306_2.png" class=""><p>观察上述信息发现，硬卧 二等卧、 硬座、 无座 均是有，而其他类型的例如 一等座、二等座 二等包座等 都是 <code>--</code>，那么现在很明显了，<code>|</code> 表示的是无，有票以及票有数据，则是显示 有或者具体数据，那么此时我们已经解刨这个接口完毕了，找到了我们想要的信息，那么接下来的难点就是如何从这些返回体中取出想要的数据！</p><h3 id="编写返回体提取票务信息逻辑"><a href="#编写返回体提取票务信息逻辑" class="headerlink" title="编写返回体提取票务信息逻辑"></a>编写返回体提取票务信息逻辑</h3><p>首先观察返回信息：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">&quot;IN8i2mjU4pcjjt%2FuzxOnHM4uHCelK7W%2FFIJqW4sNvITAIkDPEQXWDCZRPUOlCQDyzvC2TBDcOaw8%0AHDSJMjOYT%2FZUGmDFoxGjVSeCZ0m3vuq11L0d5I8BhBL%2FcWpvvt%2FQzFHg57AgDF%2B24iCwm1rNRfvx%0A8WqPrdaBsIa7ffyQ9%2FNMxitJVEF9AAv0kc8VjDK0wqGAqS%2F6QlXILrQTUeh830ahknr0%2F017eIrI%0A67tFo0WX2HUhszbtLo7mEk%2FFWu%2BovNguW%2BOG7%2BB%2Bh1GBf61lRTktO03u0XOz3Di3NY%2FUKARr7vE5%0AnqcGhjzJ9uFZrXc2Q2gMq04L2uz43U0jxNqtkb9ZmnXO%2BeYC|预订|25000K772836|K7725|QTP|HDP|FTP|SJP|05:10|08:44|03:34|Y|Jz1NB7nb1uVJBAoXtjLOZGJ20tRCNaJVqDZwRJdiCitslCNE|20241008|3|P4|05|10|1|0|||||||有||有|有|||||1030W0|131|1|0||100415002130087500211004153540|0|||||1|0#0#0#0#z#0#3#z||7|CHN,CHN|||N#N#|330087531009553200925||202409250800|&quot;<br></code></pre></td></tr></table></figure><p>我们看到在上面中有一个预定的汉字，那么我就可以先以 <code>预定</code> 进行分割，此时可以获取后面的信息，那么就是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">train_info = train_txt.split(<span class="hljs-string">&quot;预定&quot;</span>)[<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p>那么我们拿到信息如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">|25000K772836|K7725|QTP|HDP|FTP|SJP|05:10|08:44|03:34|Y|Jz1NB7nb1uVJBAoXtjLOZGJ20tRCNaJVqDZwRJdiCitslCNE|20241008|3|P4|05|10|1|0|||||||有||有|有|||||1030W0|131|1|0||100415002130087500211004153540|0|||||1|0#0#0#0#z#0#3#z||7|CHN,CHN|||N#N#|330087531009553200925||202409250800|<br></code></pre></td></tr></table></figure><p>那么我们继续观察发现在上述信息中有一个|Y|,继续观察其他的发现要不就是|Y|要不就是|N|，那么就可以按照这个进行分割。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">train_info = train_txt.split(<span class="hljs-string">&quot;预定&quot;</span>)[<span class="hljs-number">1</span>]split(<span class="hljs-string">&quot;|Y|&quot;</span>)[<span class="hljs-number">0</span>] <br></code></pre></td></tr></table></figure><p>也就得到了</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">|25000K772836|K7725|QTP|HDP|FTP|SJP|05:10|08:44|03:34<br></code></pre></td></tr></table></figure><p>此时拿到了具体的车次信息，那么想要后续的信息就可以取 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">train_info = train_txt.split(<span class="hljs-string">&quot;预定&quot;</span>)[<span class="hljs-number">1</span>]split(<span class="hljs-string">&quot;|Y|&quot;</span>)[<span class="hljs-number">1</span>] <br></code></pre></td></tr></table></figure><p>那么拿到的是：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">Jz1NB7nb1uVJBAoXtjLOZGJ20tRCNaJVqDZwRJdiCitslCNE|20241008|3|P4|05|10|1|0|||||||有||有|有|||||1030W0|131|1|0||100415002130087500211004153540|0|||||1|0#0#0#0#z#0#3#z||7|CHN,CHN|||N#N#|330087531009553200925||202409250800|<br></code></pre></td></tr></table></figure><p>通过观察，在|20241008| 前面的乱码发现基本上长度一致，那么我就可以指定长度取截取</p><p>至此，我们实现了信息的采集和分割，那么我们能实现拿到具体车次，是否有票这些信息。</p><h3 id="判断信息中是否有票"><a href="#判断信息中是否有票" class="headerlink" title="判断信息中是否有票"></a>判断信息中是否有票</h3><p>那么拿到数据之后，我们就要判断是否有票，我们可以根据是否有有以及是否有数字存在即可！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">contains_number_or_you</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-comment"># 检查是否包含数字</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(char.isdigit() <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> s):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># 检查是否包含“有”</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;有&quot;</span> <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># 如果都不包含，则返回False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>函数通过检查是否有数字以及是否有有，返回布尔值。</p><h3 id="组装返回信息"><a href="#组装返回信息" class="headerlink" title="组装返回信息"></a>组装返回信息</h3><p>目前计划是通过邮件将信息返回，那么此时已经可以判断车次，是否有票，我们就需要通过将我们拿到的数据进行重写组装，然后将其转化为一个html格式的表格便于我们查看，具体代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">list_to_html</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;+++++++++++++++++++&quot;</span>)<br>    <span class="hljs-comment"># print(data)</span><br>    <span class="hljs-comment"># print(type(data))</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;++++++++++++++++++&quot;</span>)<br>    headers = [<br>        <span class="hljs-string">&quot;列车号&quot;</span>, <span class="hljs-string">&quot;起点站&quot;</span>, <span class="hljs-string">&quot;途经站1&quot;</span>, <span class="hljs-string">&quot;途经站2&quot;</span>, <span class="hljs-string">&quot;终点站&quot;</span>,<br>        <span class="hljs-string">&quot;出发时间&quot;</span>, <span class="hljs-string">&quot;到达时间&quot;</span>, <span class="hljs-string">&quot;耗费时间&quot;</span>, <span class="hljs-string">&quot;暂无&quot;</span>, <span class="hljs-string">&quot;暂无&quot;</span>,<br>        <span class="hljs-string">&quot;暂无&quot;</span>, <span class="hljs-string">&quot;暂无&quot;</span>, <span class="hljs-string">&quot;暂无&quot;</span>, <span class="hljs-string">&quot;座位数目&quot;</span>, <span class="hljs-string">&quot;优选一等座&quot;</span>,<br>        <span class="hljs-string">&quot;座位数目&quot;</span>, <span class="hljs-string">&quot;座位数目&quot;</span>, <span class="hljs-string">&quot;软卧/动卧&quot;</span>, <span class="hljs-string">&quot;座位数目&quot;</span>, <span class="hljs-string">&quot;座位数目&quot;</span>, <span class="hljs-string">&quot;无座&quot;</span>, <span class="hljs-string">&quot;座位数目&quot;</span>, <span class="hljs-string">&quot;硬卧,二等卧&quot;</span>, <span class="hljs-string">&quot;硬座&quot;</span>, <span class="hljs-string">&quot;二等座&quot;</span>, <span class="hljs-string">&quot;一等座&quot;</span>, <span class="hljs-string">&quot;商务座,特等座&quot;</span>, <span class="hljs-string">&quot;座位数目&quot;</span><br>    ]<br><br>    <span class="hljs-comment"># 构造HTML表格的开头部分，包括CSS样式</span><br>    html_table = <span class="hljs-string">&#x27;&#x27;&#x27;  </span><br><span class="hljs-string">    &lt;style&gt;  </span><br><span class="hljs-string">    .table-container &#123;  </span><br><span class="hljs-string">        height: 90vh;  /* 根据视口高度设置，以适应不同屏幕 */  </span><br><span class="hljs-string">        overflow-y: auto; /* 允许垂直滚动 */  </span><br><span class="hljs-string">        display: block; /* 可能需要，取决于布局 */  </span><br><span class="hljs-string">        width: 100%; /* 或固定宽度 */  </span><br><span class="hljs-string">    &#125;  </span><br><span class="hljs-string">    th &#123;  </span><br><span class="hljs-string">        position: sticky;  </span><br><span class="hljs-string">        top: 0;  </span><br><span class="hljs-string">        background-color: #f9f9f9; /* 表头背景色 */  </span><br><span class="hljs-string">    &#125;  </span><br><span class="hljs-string">    table &#123;  </span><br><span class="hljs-string">        width: 100%; /* 确保表格宽度与容器相同 */  </span><br><span class="hljs-string">        border-collapse: collapse; /* 边框合并 */  </span><br><span class="hljs-string">    &#125;  </span><br><span class="hljs-string">    th, td &#123;  </span><br><span class="hljs-string">        border: 1px solid #ddd; /* 边框样式 */  </span><br><span class="hljs-string">        padding: 8px; /* 单元格内边距 */  </span><br><span class="hljs-string">        text-align: left; /* 文本对齐方式 */  </span><br><span class="hljs-string">    &#125;  </span><br><span class="hljs-string">    &lt;/style&gt;  </span><br><span class="hljs-string">    &lt;div class=&quot;table-container&quot;&gt;  </span><br><span class="hljs-string">    &lt;table&gt;  </span><br><span class="hljs-string">    &lt;thead&gt;  </span><br><span class="hljs-string">    &lt;tr&gt;  </span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> header <span class="hljs-keyword">in</span> headers:<br>        html_table += <span class="hljs-string">f&#x27;&lt;th&gt;<span class="hljs-subst">&#123;header&#125;</span>&lt;/th&gt;&#x27;</span><br>    html_table += <span class="hljs-string">&#x27;&#x27;&#x27;  </span><br><span class="hljs-string">    &lt;/tr&gt;  </span><br><span class="hljs-string">    &lt;/thead&gt;  </span><br><span class="hljs-string">    &lt;tbody&gt;  </span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-comment"># 遍历数据，并为每一项添加一行到表格体（tbody）中</span><br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data:<br>        columns = item.split(<span class="hljs-string">&#x27;|&#x27;</span>)<br>        <span class="hljs-comment"># 填充缺失的列</span><br>        columns += [<span class="hljs-string">&#x27;&#x27;</span>] * (<span class="hljs-built_in">len</span>(headers) - <span class="hljs-built_in">len</span>(columns))<br>        html_row = <span class="hljs-string">&#x27;&lt;tr&gt;&#x27;</span> + <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-string">f&#x27;&lt;td&gt;<span class="hljs-subst">&#123;column&#125;</span>&lt;/td&gt;&#x27;</span> <span class="hljs-keyword">for</span> column <span class="hljs-keyword">in</span> columns) + <span class="hljs-string">&#x27;&lt;/tr&gt;\n&#x27;</span><br>        html_table += html_row<br><br>        <span class="hljs-comment"># 添加表格的结尾部分</span><br>    html_table += <span class="hljs-string">&#x27;&#x27;&#x27;  </span><br><span class="hljs-string">    &lt;/tbody&gt;  </span><br><span class="hljs-string">    &lt;/table&gt;  </span><br><span class="hljs-string">    &lt;/div&gt;  </span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-comment"># 返回完整的HTML字符串</span><br>    <span class="hljs-built_in">print</span>(html_table)<br>    <span class="hljs-keyword">return</span> html_table<br></code></pre></td></tr></table></figure><p>上面的函数接收一个list,然后进行转化生成一个html信息。</p><h3 id="邮件发送"><a href="#邮件发送" class="headerlink" title="邮件发送"></a>邮件发送</h3><p>我们拿到html信息后需要第一时间通知给我，那么就要用到邮件通知，下面是邮件通知代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">send_mail</span>(<span class="hljs-params">mail_body, receivers</span>):<br>    <span class="hljs-comment"># 发件人邮箱账号</span><br>    sender = <span class="hljs-string">&#x27;1542418645@qq.com&#x27;</span><br>    <span class="hljs-comment"># 发件人邮箱授权码（不是QQ密码）</span><br>    password = <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment"># 此处填写你的授权码</span><br>    <span class="hljs-comment"># SMTP服务器地址</span><br>    smtp_server = <span class="hljs-string">&#x27;smtp.qq.com&#x27;</span><br>    <span class="hljs-comment"># SMTP服务器端口，对于QQ邮箱，使用SSL的465端口</span><br>    smtp_port = <span class="hljs-number">465</span><br><br>    <span class="hljs-comment"># 邮件内容</span><br>    subject = <span class="hljs-string">&#x27;抢到火车票了！&#x27;</span><br>    <span class="hljs-comment"># HTML邮件正文</span><br>    html_body = mail_body<br><br>    <span class="hljs-comment"># 邮件接收者</span><br>    <span class="hljs-comment"># receiver = &#x27;1542418645@qq.com&#x27;</span><br><br>    <span class="hljs-comment"># 创建邮件对象，指定内容为HTML</span><br>    message = MIMEText(html_body, <span class="hljs-string">&#x27;html&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-comment"># 设置From头部，使用formataddr函数来正确设置完整的From头部信息</span><br>    message[<span class="hljs-string">&#x27;From&#x27;</span>] = formataddr((<span class="hljs-string">&#x27;发件人姓名&#x27;</span>, sender))<br>    <span class="hljs-comment"># 设置To头部，同样使用Header</span><br>    <span class="hljs-comment"># message[&#x27;To&#x27;] = Header(receiver, &#x27;utf-8&#x27;)</span><br>    <span class="hljs-comment"># 设置Subject头部，对于中文主题也使用Header</span><br>    message[<span class="hljs-string">&#x27;Subject&#x27;</span>] = Header(subject, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 创建SMTP SSL连接</span><br>        smtpObj = smtplib.SMTP_SSL(smtp_server, smtp_port)<br>        smtpObj.login(sender, password)  <span class="hljs-comment"># 登录到SMTP服务器</span><br><br>        <span class="hljs-comment"># 如果receivers是单个字符串，则转换为列表</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(receivers, <span class="hljs-built_in">str</span>):<br>            receivers = [receivers]<br><br>        <span class="hljs-comment"># 发送邮件给多个接收者</span><br>        smtpObj.sendmail(sender, receivers, message.as_string())<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;邮件发送成功&quot;</span>)<br>        smtpObj.quit()<br>    <span class="hljs-keyword">except</span> smtplib.SMTPException <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;邮件发送失败:&quot;</span>, e)<br></code></pre></td></tr></table></figure><p>这里我们声明是一个协程方法也就是发送邮件是异步的，我无需等待邮件发送后才执行下一个逻辑。</p><h3 id="一些固定规律的解决"><a href="#一些固定规律的解决" class="headerlink" title="一些固定规律的解决"></a>一些固定规律的解决</h3><p>在继续查看返回体的时候发现里面会有固定的 W M F 的返回信息，此处为</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">Jz1NB7nb1uVJBAoXtjLOZGJ20tRCNaJVqDZwRJdiCitslCNE|20241008|3|P4|05|10|1|0|||||||有||有|有|||||1030W0|131|1|0||100415002130087500211004153540|0|||||1|0#0#0#0#z#0#3#z||7|CHN,CHN|||N#N#|330087531009553200925||202409250800|<br></code></pre></td></tr></table></figure><p>也就是我想去掉 |1030W0| 后面的信息由于后续都是无规律的，但是肯定会有M W F 出现，那么我们可以获取当前位置然后进行分割，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_after_wm</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-comment"># 查找&#x27;W&#x27;或&#x27;M&#x27;首次出现的位置</span><br>    <span class="hljs-comment"># 使用min函数和find方法确保我们找到的是两者中较早出现的一个</span><br>    <span class="hljs-comment"># 如果&#x27;W&#x27;或&#x27;M&#x27;都不存在，find会返回-1，而min(-1, -1)也是-1</span><br>    pos_w = s.find(<span class="hljs-string">&#x27;W&#x27;</span>)<br>    pos_m = s.find(<span class="hljs-string">&#x27;M&#x27;</span>)<br>    pos_f = s.find(<span class="hljs-string">&#x27;F&#x27;</span>)<br><br>    <span class="hljs-keyword">if</span> pos_w != -<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> pos_m != -<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> pos_f != -<span class="hljs-number">1</span>:<br>        pos = <span class="hljs-built_in">min</span>(pos_w, pos_m, pos_f)<br>    <span class="hljs-keyword">elif</span> pos_w != -<span class="hljs-number">1</span>:<br>        pos = pos_w<br>    <span class="hljs-keyword">elif</span> pos_m != -<span class="hljs-number">1</span>:<br>        pos = pos_m<br>    <span class="hljs-keyword">elif</span> pos_f != -<span class="hljs-number">1</span>:<br>        pos = pos_f<br>    <span class="hljs-keyword">else</span>:<br>        pos = -<span class="hljs-number">1</span>  <span class="hljs-comment"># 表示&#x27;W&#x27;和&#x27;M&#x27;都不存在</span><br><br>    <span class="hljs-keyword">return</span> s[:pos]<br></code></pre></td></tr></table></figure><h3 id="整体规划"><a href="#整体规划" class="headerlink" title="整体规划"></a>整体规划</h3><p>到现在我们已经拿到了具体的信息，那么就可以规划我们的具体实现，首先我们可以支持 邮件多人发送，请求12306延迟设置防止IP访问频繁被封，用户关注的火车信息，假如我关注的车次只想他有票的时候才会通知也行支持多个车次的设置，假如我们不想一直接收邮件的发送，那么我们可以设置邮件接收的延迟时间，目前支持设置分钟，小时级别的延迟。</p><p>那么上面就是我们要实现的功能，下面就是已经实现的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_info</span>(<span class="hljs-params">url, address, receivers, sleep_time=<span class="hljs-number">10</span>, user_focus_train=<span class="hljs-literal">None</span>, email_delay_time=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    =========== dreamshao 12306查询余票函数调用指南=========</span><br><span class="hljs-string"></span><br><span class="hljs-string">    支持多线程查询火车票余票，使用教程：</span><br><span class="hljs-string">    登录12306 网站 https://www.12306.cn/index/</span><br><span class="hljs-string">    选择起点，终点，时间 点击查询</span><br><span class="hljs-string">    此时页面跳转到列车详情页面，打开network 面板，再次点击查询抓取查询接口</span><br><span class="hljs-string">    注意： 此时可能会用2个接口请求，一个是火车列表信息， 一个是中转信息</span><br><span class="hljs-string">    我们需要的url 是这样的： https://kyfw.12306.cn/otn/leftTicket/queryG?leftTicketDTO.train_date=2024-09-30&amp;leftTicketDTO.from_station=SJP&amp;leftTicketDTO.to_station=XTP&amp;purpose_codes=ADULT</span><br><span class="hljs-string">    然后将其作为Url 参数传入，然后选择改url对应的COOKIE, 在程序中替换之前的即可！</span><br><span class="hljs-string"></span><br><span class="hljs-string">    =========== dreamshao 12306查询余票函数调用指南=========</span><br><span class="hljs-string">    :param url: 请求url</span><br><span class="hljs-string">    :param address: 火车起点重点： 北京-----&gt; 邯郸</span><br><span class="hljs-string">    :param user_focus_train: 你关注的列车有票才会发送邮件，格式是list [&#x27;G3433&#x27;,&#x27;K333&#x27;]</span><br><span class="hljs-string">    :param sleep_time: 请求接口休眠时间</span><br><span class="hljs-string">    :param email_delay_time 邮件延迟发送时间，就是当前不希望每次都收到通知，只是希望间隔多久通知一次， 目前是 minutes, hours 格式是(1, 0.5) 是 小时, 其余是按照分钟处理</span><br><span class="hljs-string">    :param receivers 邮件接收人 可以传递一个列表例如 [&#x27;123232@qq.com&#x27;,&#x27;3333@qq.com]  多人接收邮件</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> url == <span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">or</span> address == <span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">or</span> receivers == <span class="hljs-string">&quot;&quot;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;please input right url or address or receivers&quot;</span><br>    <span class="hljs-built_in">print</span>(<br>        <span class="hljs-string">f&quot;当前请求地址是<span class="hljs-subst">&#123;url&#125;</span>,请求火车票方向是<span class="hljs-subst">&#123;address&#125;</span>,邮件接收人是<span class="hljs-subst">&#123;receivers&#125;</span>,请求间隔时间是<span class="hljs-subst">&#123;sleep_time&#125;</span>秒,用户关注的火车列表是<span class="hljs-subst">&#123;user_focus_train&#125;</span>,邮件间隔报警时间是<span class="hljs-subst">&#123;email_delay_time&#125;</span>&quot;</span>)<br>    time_info = url.split(<span class="hljs-string">&#x27;train_date=&#x27;</span>)[<span class="hljs-number">1</span>].split(<span class="hljs-string">&quot;&amp;&quot;</span>)[<span class="hljs-number">0</span>]  <span class="hljs-comment"># 出发时间</span><br>    <span class="hljs-keyword">global</span> send_info_type, send_numbers, send_email_all_type, send_all_numbers, email_alert_delay_type, email_alert_delay_time  <span class="hljs-comment"># 关注的火车发送邮件状态</span><br>    send_info_type = <span class="hljs-literal">False</span>  <span class="hljs-comment"># 关注火车列表发送状态</span><br>    send_email_all_type = <span class="hljs-literal">False</span>  <span class="hljs-comment"># 所有火车列表发送状态</span><br>    send_numbers = <span class="hljs-number">0</span><br>    send_all_numbers = <span class="hljs-number">0</span><br>    numbers = <span class="hljs-number">0</span><br>    email_alert = []<br>    email_alert_delay_time = delay_time(email_delay_time)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment"># 获取当前时间</span><br>        now = datetime.now()<br>        <span class="hljs-comment"># 是否有票的标志</span><br>        has_ticket = <span class="hljs-literal">False</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前正在抢<span class="hljs-subst">&#123;address&#125;</span>的火车票&quot;</span>)<br>        payload = &#123;&#125;<br>        headers = &#123;<br>            <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36&#x27;</span>,<br>            <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;JSESSIONID=6571054C8C61F63A5F32C82A1A340BED; guidesStatus=off; _big_fontsize=0; highContrastMode=defaltMode; cursorStatus=off; BIGipServerpool_index=821035530.43286.0000; route=6f50b51faa11b987e576cdb301e545c4; BIGipServerotn=670040586.24610.0000&#x27;</span><br><br>        &#125;<br><br>        time.sleep(sleep_time)<br>        response = requests.request(<span class="hljs-string">&quot;GET&quot;</span>, url, headers=headers, data=payload)<br>        <span class="hljs-keyword">if</span> check_http_code(response.status_code):<br>            re_json = json.loads(response.text)<br>            len_nums = <span class="hljs-built_in">len</span>(re_json[<span class="hljs-string">&#x27;data&#x27;</span>][<span class="hljs-string">&#x27;result&#x27;</span>])<br>            <span class="hljs-comment"># print(re_json[&#x27;data&#x27;][&#x27;result&#x27;])</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> (re_json[<span class="hljs-string">&#x27;data&#x27;</span>][<span class="hljs-string">&#x27;result&#x27;</span>]):<br>                numbers += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">try</span>:<br>                    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;|N|&quot;</span> <span class="hljs-keyword">in</span> i:<br>                        <span class="hljs-comment"># print(i.split(&quot;预订&quot;)[1][14:].split(&quot;|N|&quot;)[0])</span><br>                        train_info = i.split(<span class="hljs-string">&quot;预订&quot;</span>)[<span class="hljs-number">1</span>][<span class="hljs-number">14</span>:].split(<span class="hljs-string">&quot;|N|&quot;</span>)[<span class="hljs-number">0</span>]<br>                        <span class="hljs-built_in">print</span>(train_info)<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-comment"># print(i.split(&quot;预订&quot;)[1][14:].split(&quot;|Y|&quot;)[0])</span><br>                        train_info = i.split(<span class="hljs-string">&quot;预订&quot;</span>)[<span class="hljs-number">1</span>][<span class="hljs-number">14</span>:].split(<span class="hljs-string">&quot;|Y|&quot;</span>)[<span class="hljs-number">0</span>]<br>                        <span class="hljs-built_in">print</span>(train_info)<br>                    info = remove_after_wm(<span class="hljs-built_in">str</span>((i.split(<span class="hljs-string">&quot;预订&quot;</span>)[<span class="hljs-number">1</span>][<span class="hljs-number">14</span>:]).split(<span class="hljs-string">&quot;2024&quot;</span>)[<span class="hljs-number">1</span>]))<br>                    <span class="hljs-comment"># print(info)</span><br>                    <span class="hljs-comment"># print(info[20:][:17])</span><br>                    <span class="hljs-built_in">print</span>(numbers)<br>                    <span class="hljs-built_in">print</span>(len_nums)<br>                    <span class="hljs-keyword">if</span> contains_number_or_you(info[<span class="hljs-number">20</span>:][:<span class="hljs-number">17</span>]):<br>                        <span class="hljs-built_in">print</span>(info)<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;有票啦！&quot;</span>)<br>                        email_info = train_info + <span class="hljs-string">&quot; &quot;</span> + info<br>                        <span class="hljs-keyword">if</span> email_info <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> email_alert:<br>                            email_alert.append(email_info)<br>                    <span class="hljs-keyword">if</span> numbers == len_nums:<br>                        <span class="hljs-comment"># 替换成表格</span><br>                        email_alert_update = list_to_html(email_alert)<br>                        <span class="hljs-comment"># print(email_alert_update)</span><br>                        <span class="hljs-comment"># print(type(email_alert_update))</span><br>                        <span class="hljs-keyword">if</span> user_focus_train:<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===================&quot;</span>)<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;用户开启了筛选火车发送邮件，当前选择的是<span class="hljs-subst">&#123;user_focus_train&#125;</span>&quot;</span>)<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===================&quot;</span>)<br>                            <span class="hljs-keyword">for</span> user_train <span class="hljs-keyword">in</span> user_focus_train:<br>                                <span class="hljs-keyword">for</span> train_single_info <span class="hljs-keyword">in</span> email_alert:<br>                                    <span class="hljs-keyword">if</span> user_train <span class="hljs-keyword">in</span> train_single_info:<br>                                        send_info_type = <span class="hljs-literal">True</span><br>                            <span class="hljs-keyword">if</span> send_info_type <span class="hljs-keyword">and</span> send_numbers == <span class="hljs-number">0</span>:<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===================&quot;</span>)<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;现在正在查看<span class="hljs-subst">&#123;address&#125;</span>,现在时间<span class="hljs-subst">&#123;now&#125;</span>&quot;</span>)<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;用户开启了筛选火车发送邮件，存在相同列车信息，将会发送邮件！&quot;</span>)<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===================&quot;</span>)<br>                                send_numbers = <span class="hljs-number">1</span><br>                                asyncio.run(send_mail(mail_body=<span class="hljs-string">f&quot;抢到了<span class="hljs-subst">&#123;time_info&#125;</span>,<span class="hljs-subst">&#123;address&#125;</span>的票<span class="hljs-subst">&#123;email_alert_update&#125;</span>&quot;</span>,<br>                                                      receivers=receivers))<br>                                email_alert.clear()<br><br>                            <span class="hljs-keyword">elif</span> send_numbers != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> send_info_type <span class="hljs-keyword">and</span> email_alert_delay_time:<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===================&quot;</span>)<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前设置了邮件发送延迟&quot;</span>)<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;现在正在查看<span class="hljs-subst">&#123;address&#125;</span>,现在时间<span class="hljs-subst">&#123;now&#125;</span>,定时清空列表时间<span class="hljs-subst">&#123;email_alert_delay_time&#125;</span>&quot;</span>)<br>                                <span class="hljs-built_in">print</span>(<br>                                    <span class="hljs-string">f&quot;当前用户开启了筛选火车发送邮件，存在相同列车信息, 但是在当前设置的延迟发送邮件中, 下次发送时间是<span class="hljs-subst">&#123;email_alert_delay_time&#125;</span>之后, 所以此次不会发送邮件！&quot;</span>)<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===================&quot;</span>)<br>                                email_alert.clear()<br>                                <span class="hljs-keyword">if</span> compare_time(now, email_alert_delay_time):<br>                                    email_alert.clear()<br>                                    send_numbers = <span class="hljs-number">0</span>  <span class="hljs-comment"># 专注火车列表发送次数归零</span><br>                                    <span class="hljs-comment"># send_all_numbers = 0  # 已经发送所有火车有票的记录</span><br>                                    <span class="hljs-comment"># send_email_all_type = True</span><br>                                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;清空列表,重新开始发送邮件&quot;</span>)<br>                                    asyncio.run(send_mail(mail_body=<span class="hljs-string">f&quot;抢到了<span class="hljs-subst">&#123;time_info&#125;</span>,<span class="hljs-subst">&#123;address&#125;</span>的票<span class="hljs-subst">&#123;email_alert_update&#125;</span>&quot;</span>,<br>                                                          receivers=receivers))<br>                                    email_alert_delay_time = delay_time(email_delay_time)<br>                                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;现在正在查看<span class="hljs-subst">&#123;address&#125;</span>,现在时间<span class="hljs-subst">&#123;now&#125;</span>,定时清空列表时间<span class="hljs-subst">&#123;email_alert_delay_time&#125;</span>&quot;</span>)<br>                            <span class="hljs-keyword">else</span>:<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===================&quot;</span>)<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;现在正在查看<span class="hljs-subst">&#123;address&#125;</span>,现在时间<span class="hljs-subst">&#123;now&#125;</span>&quot;</span>)<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;用户开启了筛选火车发送邮件，不存在相同列车信息，不会发送邮件！&quot;</span>)<br>                                email_alert.clear()<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===================&quot;</span>)<br>                        <span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> send_email_all_type <span class="hljs-keyword">and</span> send_all_numbers == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> email_alert_delay_time:<br>                            <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">                            首次发送全部有票的火车, 且当前存在邮件延迟发送时间设置</span><br><span class="hljs-string">                            &quot;&quot;&quot;</span><br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===================&quot;</span>)<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;首次发送全部有票的火车,当前设置了邮件发送延迟&quot;</span>)<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;现在正在查看<span class="hljs-subst">&#123;address&#125;</span>,现在时间<span class="hljs-subst">&#123;now&#125;</span>,定时清空列表时间<span class="hljs-subst">&#123;email_alert_delay_time&#125;</span>&quot;</span>)<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;====================&quot;</span>)<br>                            send_all_numbers += <span class="hljs-number">1</span><br>                            send_email_all_type = <span class="hljs-literal">True</span><br>                            asyncio.run(send_mail(mail_body=<span class="hljs-string">f&quot;抢到了<span class="hljs-subst">&#123;time_info&#125;</span>,<span class="hljs-subst">&#123;address&#125;</span>的票<span class="hljs-subst">&#123;email_alert_update&#125;</span>&quot;</span>,<br>                                                  receivers=receivers))<br>                            email_alert.clear()<br><br>                        <span class="hljs-keyword">elif</span> send_email_all_type <span class="hljs-keyword">and</span> send_all_numbers == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> email_alert_delay_time:<br>                            <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">                             当前存在邮件延迟发送时间设置</span><br><span class="hljs-string">                            &quot;&quot;&quot;</span><br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===================&quot;</span>)<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前设置了邮件发送延迟&quot;</span>)<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;现在正在查看<span class="hljs-subst">&#123;address&#125;</span>,现在时间<span class="hljs-subst">&#123;now&#125;</span>,定时清空列表时间<span class="hljs-subst">&#123;email_alert_delay_time&#125;</span>&quot;</span>)<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;====================&quot;</span>)<br>                            email_alert.clear()<br>                            <span class="hljs-keyword">if</span> compare_time(now, email_alert_delay_time):<br>                                email_alert.clear()<br>                                <span class="hljs-comment"># # send_numbers = 0  # 专注火车列表发送次数归零</span><br>                                <span class="hljs-comment"># send_all_numbers = 1  # 已经发送所有火车有票的记录</span><br>                                <span class="hljs-comment"># send_email_all_type = T  # 回到首次发送的状态</span><br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;清空列表,重新开始发送邮件&quot;</span>)<br>                                asyncio.run(send_mail(mail_body=<span class="hljs-string">f&quot;抢到了<span class="hljs-subst">&#123;time_info&#125;</span>,<span class="hljs-subst">&#123;address&#125;</span>的票<span class="hljs-subst">&#123;email_alert_update&#125;</span>&quot;</span>,<br>                                                      receivers=receivers))<br>                                email_alert_delay_time = delay_time(email_delay_time)<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;现在正在查看<span class="hljs-subst">&#123;address&#125;</span>,现在时间<span class="hljs-subst">&#123;now&#125;</span>,定时清空列表时间<span class="hljs-subst">&#123;email_alert_delay_time&#125;</span>&quot;</span>)<br><br>                        <span class="hljs-keyword">else</span>:<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===================&quot;</span>)<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;现在正在查看<span class="hljs-subst">&#123;address&#125;</span>,现在时间<span class="hljs-subst">&#123;now&#125;</span>&quot;</span>)<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前未设置延迟发送邮件,将即可发送邮件&quot;</span>)<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===================&quot;</span>)<br>                            asyncio.run(send_mail(mail_body=<span class="hljs-string">f&quot;抢到了<span class="hljs-subst">&#123;time_info&#125;</span>,<span class="hljs-subst">&#123;address&#125;</span>的票<span class="hljs-subst">&#123;email_alert_update&#125;</span>&quot;</span>,<br>                                                  receivers=receivers))<br>                            email_alert.clear()<br><br>                        numbers = <span class="hljs-number">0</span>  <span class="hljs-comment"># 控制整体的数目归零</span><br>                <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                    <span class="hljs-built_in">print</span>(e)<br>                    <span class="hljs-built_in">print</span>(remove_after_wm(<span class="hljs-built_in">str</span>((i.split(<span class="hljs-string">&quot;起售&quot;</span>)[<span class="hljs-number">1</span>][<span class="hljs-number">14</span>:]).split(<span class="hljs-string">&quot;2024&quot;</span>)[<span class="hljs-number">1</span>])))<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;12306接口请求失败, 状态码是<span class="hljs-subst">&#123;response.status_code&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><h3 id="多线程和多进程的选择"><a href="#多线程和多进程的选择" class="headerlink" title="多线程和多进程的选择"></a>多线程和多进程的选择</h3><p>刚开始我选择的是多线程，但是在实践中发现在传递信息的时候会发生  A 线路的信息 流转到了 B 线路中，后来查询资料发现，多线程的内存信息共享的可能会发生数据错乱，但是多进程是内存独立的不共享，此时在实现的时候选择了 进程池来实现！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    train_info 函数传递顺序(url, address, receivers, sleep_time, user_focus_train, email_delay_time)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    query_list = [<br>        (<br>            <span class="hljs-string">&quot;https://kyfw.12306.cn/otn/leftTicket/queryG?leftTicketDTO.train_date=2024-10-07&amp;leftTicketDTO.from_station=SJP&amp;leftTicketDTO.to_station=HDP&amp;purpose_codes=ADULT&quot;</span>,<br>            <span class="hljs-string">&quot;石家庄----&gt;邯郸&quot;</span>, [<span class="hljs-string">&quot;154418645@qq.com&quot;</span>, <span class="hljs-string">&quot;385521294@qq.com&quot;</span>], <span class="hljs-number">10</span>, [<span class="hljs-string">&#x27;K7734&#x27;</span>,<span class="hljs-string">&#x27;G543&#x27;</span>], (<span class="hljs-number">2</span>, <span class="hljs-number">1</span>)),  <span class="hljs-comment"># 到邯郸</span><br>        (<br>            <span class="hljs-string">&quot;https://kyfw.12306.cn/otn/leftTicket/queryG?leftTicketDTO.train_date=2024-10-07&amp;leftTicketDTO.from_station=SJP&amp;leftTicketDTO.to_station=XTP&amp;purpose_codes=ADULT&quot;</span>,<br>            <span class="hljs-string">&quot;石家庄----&gt;邢台&quot;</span>, [<span class="hljs-string">&quot;152418645@qq.com&quot;</span>, <span class="hljs-string">&quot;385521294@qq.com&quot;</span>], <span class="hljs-number">20</span>, [], (<span class="hljs-number">2</span>, <span class="hljs-number">2</span>))  <span class="hljs-comment"># 到邢台</span><br>    ]<br><br>    <span class="hljs-keyword">with</span> ProcessPoolExecutor(max_workers=<span class="hljs-number">2</span>) <span class="hljs-keyword">as</span> executor:<br>        <span class="hljs-comment"># 提交任务，每个任务都接收一个args元组，自动解包为多个参数</span><br>        futures = [executor.submit(train_info, *args) <span class="hljs-keyword">for</span> args <span class="hljs-keyword">in</span> query_list]<br>        <span class="hljs-comment"># 等待所有任务完成</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">for</span> future <span class="hljs-keyword">in</span> as_completed(futures):<br>                <span class="hljs-comment"># 处理可能的异常</span><br>                result = future.result()<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Received result: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;进程出错了<span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>上述代码采用了进程池的方式进行请求，最大设置了2个，可以自由设置，通过submit 将任务提交返回一个futures对象，然后我们需要看是否每个都完成了调用as_completed这个方法即可！</p><h2 id="效果查看"><a href="#效果查看" class="headerlink" title="效果查看"></a>效果查看</h2><p>运行后如下：</p><img src="/2024/10/08/12306%E4%BD%99%E7%A5%A8%E6%9F%A5%E8%AF%A2/12306_3.png" class=""><img src="/2024/10/08/12306%E4%BD%99%E7%A5%A8%E6%9F%A5%E8%AF%A2/12306_4.png" class=""><p>可以发现我们实现了我们上述的所有功能，下面看邮件效果：</p><img src="/2024/10/08/12306%E4%BD%99%E7%A5%A8%E6%9F%A5%E8%AF%A2/12306_5.png" class=""><p>可以看到邮箱收到了我们的邮件以及票务信息！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过编写这个脚本我也学到了很多知识，最大就是利用了进程池来实现，也感受到了多进程和多线程在使用上的差距，那么源码已经共享到github 地址是：<a href="https://github.com/dreamshao/12306">https://github.com/dreamshao/12306</a><br>在使用过程中，如果无法查询可以将接口请求的最新cookie替换一下本地接口请求的cookie，如果有更好的建议或者有疑问可以联系我哦！</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>效能工具</category>
      
      <category>12306 火车票余票查询脚本</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>12306 火车票余票查询脚本开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 并发编程之多线程由浅入深</title>
    <link href="/2024/09/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2024/09/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-并发编程之多线程由浅入深"><a href="#Python-并发编程之多线程由浅入深" class="headerlink" title="Python 并发编程之多线程由浅入深"></a>Python 并发编程之多线程由浅入深</h1><p>在python中我们想要了解并发编程，就要知道在并发编程这里我们包含了两部分一部分是多线程，一部分是多进程。那么你具体能知道它们的区别吗？一起来看看！</p><h2 id="线程与进程的区别"><a href="#线程与进程的区别" class="headerlink" title="线程与进程的区别"></a>线程与进程的区别</h2><p>一个进程是操作系统中运行的一个任务<br>    当前的操作系统基本都支持多进程的并发操作。<br>    进程拥有独立的CPU、内存等资源。</p><p>一个线程是一个进程中运行的一个任务<br>    一个进程中同样可以并发多个任务。<br>    线程之间共享进程的CPU、内存等资源。</p><p>看了上述描述，可能感觉还是蒙蒙的，总结来说： 多个进程中的内存 cpu等资源是独立的不分享的。线程是进程中的一个任务，线程之间的CPU、内存等资源都是共享的。</p><h2 id="代码解释多线程入门"><a href="#代码解释多线程入门" class="headerlink" title="代码解释多线程入门"></a>代码解释多线程入门</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>():<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        <span class="hljs-built_in">print</span>(j)<br><br>task()<br>task()<br><br></code></pre></td></tr></table></figure><p>那么我们上面的代码可以看出很简单，只是简单的创建了一个函数遍历了10，然后被调用2次， 输出结果为两次0-9，可以看出顺序和你调用输出是一致的，那么我想使用多线程改造这个函数怎么来呢？下面继续</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">numbers</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(numbers):<br>        <span class="hljs-built_in">print</span>(j)<br><br>thread1 = Thread(target=task,args=(<span class="hljs-number">10</span>,))<br>thread2 = Thread(target=task,args=(<span class="hljs-number">10</span>,))<br><br>thread1.start()<br>thread2.start()<br><br>thread1.join()<br>thread2.join()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;主线程结束了&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>此时可以看到我们导入了一个包就是从threading里面导入了Thread，这个就是python处理多线程的函数，其中target为目标函数此时传递我们要执行的函数，记住千万不能加()，join方法就是等待改线程结束，然后主线程才可以往下继续执行。args就是我们传入的参数的意思，这里要求的格式必须是元组。要执行对应的多线程直接调用start即可。</p><p>输出结果如下：</p><img src="/2024/09/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B1.png" class=""><p>可以看到一个奇怪的现象就是这个输出结果有点顺序不对了，有的9和其他的数字混在后面了，是因为线程是并行的所以有时候你无法控制哪一个线程先优先输出数据。</p><h2 id="代码解释线程进阶"><a href="#代码解释线程进阶" class="headerlink" title="代码解释线程进阶"></a>代码解释线程进阶</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTask</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, numbers</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <br>        self.setName(name) <span class="hljs-comment"># super 父类定义方法</span><br>        self.numbers = numbers<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.numbers):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.getName()&#125;</span> - <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br>            time.sleep(<span class="hljs-number">0.01</span>)<br><br><br>mythread1=ThreadTask(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-number">10</span>)<br>mythread2=ThreadTask(<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-number">10</span>)<br><br>mythread1.start()<br>mythread2.start()<br><br></code></pre></td></tr></table></figure><p>代码解释：从上述代码我们就可以看出我们这次写的是类而不是函数，那么我们是继承了Thread，然后在定义的<code>__init__</code>方法中我们初始化了父类的方法，其中setName() 用来展示线程的名字，这个是父类中已经有的函数。那么我们下面依旧是一个遍历和我们最初的是一样的。可以看到运行的结果如下：</p><img src="/2024/09/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B2.png" class=""><h2 id="守护线程是什么？"><a href="#守护线程是什么？" class="headerlink" title="守护线程是什么？"></a>守护线程是什么？</h2><p>下面我们来介绍一下什么是守护线程，守护线程就是主线程结束了守护线程也会结束，非守护线程就是主线程必须等非守护线程结束主线程才会结束。</p><h3 id="代码解释守护线程"><a href="#代码解释守护线程" class="headerlink" title="代码解释守护线程"></a>代码解释守护线程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTask</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, numbers</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <br>        self.setName(name) <span class="hljs-comment"># super 父类定义方法</span><br>        self.setDaemon(<span class="hljs-literal">True</span>) <span class="hljs-comment"># 守护线程设置</span><br>        self.numbers = numbers<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.numbers):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.getName()&#125;</span> - <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br>            time.sleep(<span class="hljs-number">0.01</span>)<br><br><br>mythread1=ThreadTask(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-number">10</span>)<br>mythread2=ThreadTask(<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-number">10</span>)<br><br>mythread1.start()<br>mythread2.start()<br></code></pre></td></tr></table></figure><p>代码解释：如果你是函数执行那么你在thread(task&#x3D;mytask,daemon&#x3D;True)的时候直接传入新的参数daemon&#x3D;True即可，就可以实现守护线程，如果是通过继承Thread的方式，那么在初始化的时候调用父类方法setDaemon(True)即可实现守护线程。那么运行程序可以看到如下：</p><img src="/2024/09/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B3.png" class=""><p>可以看到此时只是各自输出了0就结束了，因为此时主线程已经执行完毕，守护线程也会执行结束。</p><p>那么我们也可以增加join等待就可以实现等待守护线程执行完毕后在结束，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTask</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, numbers</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <br>        self.setName(name) <span class="hljs-comment"># super 父类定义方法</span><br>        self.setDaemon(<span class="hljs-literal">True</span>) <span class="hljs-comment"># 守护线程设置</span><br>        self.numbers = numbers<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.numbers):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.getName()&#125;</span> - <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br>            time.sleep(<span class="hljs-number">0.01</span>)<br><br><br>mythread1=ThreadTask(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-number">10</span>)<br>mythread2=ThreadTask(<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-number">10</span>)<br><br>mythread1.start()<br>mythread2.start()<br><br>mythread1.join()<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><img src="/2024/09/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B4.png" class=""><h3 id="守护线程的应用场景"><a href="#守护线程的应用场景" class="headerlink" title="守护线程的应用场景"></a>守护线程的应用场景</h3><p>守护线程一般用在非关键性的线程，如日志、无关紧要的逻辑等都可以在主线程结束后也理解停止运行。</p><h2 id="线程安全队列"><a href="#线程安全队列" class="headerlink" title="线程安全队列"></a>线程安全队列</h2><p>从现在开始我们描述一个新的概念是队列，之所以在这里讲这个，是因为我们的线程是不安全的！因为我们的线程有可能发生多个线程的混乱。那么我们期望我们的是一个完整的有序的，就用到了我们的线程安全队列。</p><p>假如：我们有两个线程一个用来放，一个用来取，如果此时线程先运行了取后面才运行了放，那么就会发生问题，因为取不到，就是不安全的！</p><p>那么在python中的queue中的模块Queue就提供了线程安全队列的功能，我们可以一起来使用！</p><h3 id="队列里面的一些方法"><a href="#队列里面的一些方法" class="headerlink" title="队列里面的一些方法"></a>队列里面的一些方法</h3><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>queue.put(item,block&#x3D;False)</td><td>队列放入元素的时候如果满了则会抛出异常，改为True则会一直等待下去</td></tr><tr><td>queue.put(item,timeout&#x3D;3)</td><td>队列放入元素满了则会等待3秒，超过3秒抛出异常</td></tr><tr><td>queue.get(block&#x3D;False)</td><td>队列获取元素的时候如果为空则会抛出异常，改为Treu则会一直等待下去</td></tr><tr><td>queue.get(timeout&#x3D;3)</td><td>队列获取元素空了则会等待3秒，超过3秒抛出异常</td></tr><tr><td>queue.qsize()</td><td>队列长度</td></tr><tr><td>queue.empty()</td><td>队列是否为空</td></tr><tr><td>queue.full()</td><td>队列是否已经放满了</td></tr></tbody></table><h3 id="队列代码生产者消费者"><a href="#队列代码生产者消费者" class="headerlink" title="队列代码生产者消费者"></a>队列代码生产者消费者</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageProducer</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, numbers, queue</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <br>        self.setName(name)<br>        self.numbers=numbers<br>        self.queue = queue<br>    <br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.numbers):<br>            message = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.getName()&#125;</span> - <span class="hljs-subst">&#123;n&#125;</span>&quot;</span><br>            self.queue.put(message, block=<span class="hljs-literal">True</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageConsumer</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name,  queue</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <br>        self.setName(name)<br>        self.setDaemon=<span class="hljs-literal">True</span><br>        self.queue = queue<br>    <br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            message = self.queue.get(block=<span class="hljs-literal">True</span>)<br>            <span class="hljs-built_in">print</span>( <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.getName()&#125;</span> - <span class="hljs-subst">&#123;message&#125;</span>\n&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br><br>queue = Queue(<span class="hljs-number">3</span>)<br>threads = <span class="hljs-built_in">list</span>()<br>threads.append(MessageProducer(<span class="hljs-string">&quot;PA&quot;</span>,<span class="hljs-number">10</span>,queue))<br>threads.append(MessageProducer(<span class="hljs-string">&quot;PB&quot;</span>,<span class="hljs-number">10</span>,queue))<br>threads.append(MessageProducer(<span class="hljs-string">&quot;PC&quot;</span>,<span class="hljs-number">10</span>,queue))<br><br>threads.append(MessageConsumer(<span class="hljs-string">&quot;CA&quot;</span>,queue))<br>threads.append(MessageConsumer(<span class="hljs-string">&quot;CB&quot;</span>,queue))<br><br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>    t.start()<br>            <br></code></pre></td></tr></table></figure><p>代码解释：在上述代码中我们创建了一个生成消息的生产者，创建了一个消费消息的消费者，其中在生产者中，我们除了之前的代码我们新增了一个queue，也就是一个队列，此时我们也引入了Queue,那么我们在run方法中呢多了一个将消息放入到队列中，其中我们用到了put方法，这个在上面的方法介绍中也写到了。</p><p>然后我们在消费者这里也是声明了一个queue，然后我们声明了我们的线程是守护线程，之所以声明是守护线程因为我们要用while true的方式去数据，一旦主线程结束那么我们的线程也需要结束否则会死循环。这里我们也使用了get方法，在我们的上面也同样介绍了该方法，然后我们打印了消费者的线程名称以及生产者的线程名称和放入的数据！</p><p>那么我们后面声明了一个队列，队列的长度是3，我们写了一个列表将生产者写了3个线程，消费者写了2个进程，这样我们就可以看到两个消费者和生产者之前的争夺关系！运行结果如下：</p><img src="/2024/09/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B5.png" class=""><h2 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h2><p>首先我们来看什么事线程锁以及为何需要线程锁，当多个线程在同一时刻访问相同的数据时可能会产生数据丢失，覆盖，不完整等问题。那么线程锁就是用来解决这个问题的重要手段！</p><h3 id="代码解释线程争夺"><a href="#代码解释线程争夺" class="headerlink" title="代码解释线程争夺"></a>代码解释线程争夺</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> -round <span class="hljs-subst">&#123;i&#125;</span>- stpe 1&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> -round <span class="hljs-subst">&#123;i&#125;</span>- stpe 2&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> -round <span class="hljs-subst">&#123;i&#125;</span>- stpe 3&quot;</span>)<br><br>t1=Thread(target=task,args=(<span class="hljs-string">&quot;A&quot;</span>,))<br>t2=Thread(target=task,args=(<span class="hljs-string">&quot;B&quot;</span>,))<br>t3=Thread(target=task,args=(<span class="hljs-string">&quot;C&quot;</span>,))<br><br>t1.start()<br>t2.start()<br>t3.start()<br></code></pre></td></tr></table></figure><p>代码解释：上述代码中我们声明了一个task函数其中遍历3次打印传入的名字，这里我们声明了3个线程然后调用start运行，结果如下：</p><img src="/2024/09/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B6.png" class=""><p>可以看出本应该是按顺序打印的但是我们还是发现了A B C的顺序不一致的情况，假如是一个需要按照顺序的写操作则会带来致命的麻烦！</p><h3 id="代码解释加锁"><a href="#代码解释加锁" class="headerlink" title="代码解释加锁"></a>代码解释加锁</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread, Lock<br><br><br>lock = Lock()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">global</span> lock<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        lock.acquire()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> -round <span class="hljs-subst">&#123;i&#125;</span>- stpe 1&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> -round <span class="hljs-subst">&#123;i&#125;</span>- stpe 2&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> -round <span class="hljs-subst">&#123;i&#125;</span>- stpe 3&quot;</span>)<br>        lock.release()<br><br>t1=Thread(target=task,args=(<span class="hljs-string">&quot;A&quot;</span>,))<br>t2=Thread(target=task,args=(<span class="hljs-string">&quot;B&quot;</span>,))<br>t3=Thread(target=task,args=(<span class="hljs-string">&quot;C&quot;</span>,))<br><br>t1.start()<br>t2.start()<br>t3.start()<br></code></pre></td></tr></table></figure><p>代码解释：这里我们首先解释Lock(),也是在threading中给我们提供的方法，用来实现获取锁，使得线程可以按照首次运行时候的顺序执行，但是需要注意的是我们这里写了一个acuire() 就是上锁，release()就是释放锁，但是需要注意：当锁释放后，不会按照我们的顺序到第二个去拿锁，因为此时谁会拿到锁是随机的，是操作系统进行分配的，这里依旧是一个随机的顺序！执行结果如下：</p><img src="/2024/09/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B7.png" class=""><h3 id="代码解释手动编写安全队列利用锁"><a href="#代码解释手动编写安全队列利用锁" class="headerlink" title="代码解释手动编写安全队列利用锁"></a>代码解释手动编写安全队列利用锁</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread, Lock, Condition<br><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">safeQueue</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, size</span>):<br>        self.__item_list = <span class="hljs-built_in">list</span>()<br>        self.size = size<br>        sefl.__item_lock = Condition()<br>        <br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">self,item</span>):<br>        <span class="hljs-comment">#self.__item_lock.acquire()</span><br>        <span class="hljs-keyword">with</span> self._item_lock：<br>            <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(self.__item_list) &gt;= self.size:<br>                self.__item_lock.wait() <span class="hljs-comment"># 如果当前满了等待队列空出，因为是随机的叫醒，还需要判断是否满折</span><br>            <br>            self.__item_list.insert(<span class="hljs-number">0</span>, item)<br>            self.__item_lock.notify_all() <span class="hljs-comment"># 当前取出一个后通知所有有所的</span><br>            <span class="hljs-comment"># self.__item_lock.release()</span><br>            <br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-comment"># self.__item_lock.acquire</span><br>        <span class="hljs-keyword">with</span> self._item_lock：<br>            <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(self.__item_list) == <span class="hljs-number">0</span>:<br>                 self.__item_lock.wait() <span class="hljs-comment"># 当前队列为空等待，因为是随机的叫醒，还需要判断是否为空</span><br>            <br>            result = self.__item_list.pop()<br>            self.__item_lock.notify_all() <span class="hljs-comment"># 当前取出一个后通知所有有所的</span><br>            <span class="hljs-comment"># self.__item_lock.release()</span><br>        <br>        <span class="hljs-keyword">return</span> result<br>        <br></code></pre></td></tr></table></figure><p>代码解释：这里我们可以看到我们声明了一个类，这里在初始化的时候声明了一个list，一个size,一把锁注意这里的锁用的是Condtition，不是上面的Lock。这里的Condition()里面有这么几个方法：wait() 如果锁需要等待通知后才会运行， notify_all() 用于通知wait()这里是通知所有的锁，因为如果是notify是只会通知一把锁，也是随机的，这里通知所有的锁是为了避免通知到不是需要的锁。</p><p>那么我们这里依旧是写了一个队列的放入和取出的逻辑，其中在put逻辑中，我们首先是加了一把锁，因为我们进来的时候需要让其他的先等待，然后我们判断当前的队列的长度是否满了，如果满了就wait,此时在get中有一个notify_all的操作就是我们取出了就会通知所有锁可以醒来了，之所以这里使用的是while,是因为我们的锁可能醒来的不是对的，所以要每次都校验一遍！然后放入list中的第一个位置。</p><p>在get逻辑中我们也是先加了一把锁，然后校验list的长度是否为0，如果为0则会执行wait等待，然后我们在Put方法中依旧有一个notify_all的通知，就是我们放入一个元素就通知给get然后也是通知所有的锁，也是进行了while的校验，和上面put锁的机制是一样的！</p><p>在锁这里是支持上下文操作的，所以我们只需要执行 with self._item_lock：在结束的时候会自动执行释放锁的操作！</p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>在了解线程池之前，我们可以来看一下在创建线程的时候我们要付出的代价有多大！</p><p>1.线程的创建和销毁相对比较昂贵</p><p>2.频繁的创建和销毁线程不利于高性能</p><p>线程池是一个可以便于管理和提高性能，也就是一个非常好的管理线程的工具！</p><h3 id="代码解释创建线程池"><a href="#代码解释创建线程池" class="headerlink" title="代码解释创建线程池"></a>代码解释创建线程池</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> -step 1&quot;</span>)<br>    time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> -step 2&quot;</span>)<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> complete&quot;</span><br>    <br><br><span class="hljs-keyword">with</span> ThreadPoolExecutor() <span class="hljs-keyword">as</span> executor:<br>    re1 = executor.submit(task, <span class="hljs-string">&#x27;A&#x27;</span>)<br>    re2 = executor.submit(task, <span class="hljs-string">&#x27;B&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(re1.result()) <span class="hljs-comment"># 等待有结果的时候返回</span><br>    <span class="hljs-built_in">print</span>(re2.result()) <span class="hljs-comment"># 等待有结果的时候返回</span><br>    <br></code></pre></td></tr></table></figure><p>代码解释：首先我们引入了线程池 from concurrent.futures import ThreadPoolExecutor，然后我们创建了一个task函数，可以传递一个name作为打印信息，后面return 回去这个name,因为线程池是支持上下文管理器的，所以我们写了一个上下文管理器来创建线程池，submit()用来提交一个线程，result() 用来获取返回值，reuslt会等待有结果的时候才返回！结果如下</p><img src="/2024/09/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B8.png" class=""><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> -step 1&quot;</span>)<br>    time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> -step 2&quot;</span>)<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> complete&quot;</span><br>    <br><br><span class="hljs-keyword">with</span> ThreadPoolExecutor() <span class="hljs-keyword">as</span> executor:<br>    results = executor.<span class="hljs-built_in">map</span>(task, [<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> results:<br>        <span class="hljs-built_in">print</span>(i)<br>    <br></code></pre></td></tr></table></figure><p>代码解释：这里我们改造了使用map()提交，主要用于我们同一个函数，传递不同的值这样我们就可以很方便不需要每次的submit,只需要这样写就可以达到同样的效果。运行结果如下：</p><img src="/2024/09/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B9.png" class=""><h3 id="代码解释下载图片利用线程池"><a href="#代码解释下载图片利用线程池" class="headerlink" title="代码解释下载图片利用线程池"></a>代码解释下载图片利用线程池</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor<br><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen, Request<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download_img</span>(<span class="hljs-params">url</span>)<br>    headers = &#123;<br>        <span class="hljs-string">&quot;user-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36&quot;</span><br>    &#125;<br>    <br>    site_url = Reuqest(url, headers=headers)<br>    <span class="hljs-keyword">with</span> urlopen(site_url) <span class="hljs-keyword">as</span> web_file:<br>        img_data = web_file.read()<br>    <br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> img_data:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">f&quot;Error: download error from <span class="hljs-subst">&#123;url&#125;</span> &quot;</span>)<br>    <br>    file_name = os.path.basename(url)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_name, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> file:<br>        file.write(img_data)<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Download image successfully, <span class="hljs-subst">&#123;url&#125;</span>&quot;</span><br>    <br><br><span class="hljs-keyword">with</span> ThreadPoolExecutor() <span class="hljs-keyword">as</span> executor:<br>    urls = &#123;<br>        <span class="hljs-string">&quot;demourl&quot;</span>,<br>        <span class="hljs-string">&quot;demourl&quot;</span>,<br>         <span class="hljs-string">&quot;demourl&quot;</span><br>    &#125;<br>    <br>    results = executor.<span class="hljs-built_in">map</span>(download_img, urls)<br>    <span class="hljs-keyword">for</span> res <span class="hljs-keyword">in</span> results:<br>        <span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><p>代码解释：这里我们是写一个下载图片的案例，首先我们引入了urlopen, Request这里不再讲述相关库的介绍，感兴趣可以自行查询，然后我们也是做了对应的请求，然后存储到本地，这里urls 可以使用你们找到的图片网址，然后我们使用线程池来实现下载即可，这里和上述没啥区别，更多的是有了具象化的感觉。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们这次虽然文字众多，但是我们从线程和进程的区分到线程的每一步进阶，到队列，锁，线程池等完全覆盖所有线程相关的重要知识点，希望各位同学都可以把握这些重要的知识点，对我们的工作将会有很大的帮助!</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 并发编程多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chrome调试webview</title>
    <link href="/2024/09/10/chrome%E8%B0%83%E8%AF%95webview/"/>
    <url>/2024/09/10/chrome%E8%B0%83%E8%AF%95webview/</url>
    
    <content type="html"><![CDATA[<h1 id="如何在Chrome上调试WebView"><a href="#如何在Chrome上调试WebView" class="headerlink" title="如何在Chrome上调试WebView"></a>如何在Chrome上调试WebView</h1><p>有时候在测试过程中，我们会遇见在app或者ios上面跳转wap页面的需求，常见在日常的活动页面等。如果要是这些页面出了问题该怎么办呢？例如我们平常的wap页面可以通过调试工具查看console或者debug等来查看问题，那么这样的在手机端怎么来调试呢？下面一起学习吧！</p><h2 id="详细调试过程"><a href="#详细调试过程" class="headerlink" title="详细调试过程"></a>详细调试过程</h2><p>1.这时候我们只需要将手机通过usb线连接到电脑上面，然后打开chrome，输入网址：chrome:&#x2F;&#x2F;inspect&#x2F;#devices  就可以看到：</p><img src="/2024/09/10/chrome%E8%B0%83%E8%AF%95webview/chrome%E8%B0%83%E8%AF%951.png" class=""><p>2.稍等一下，这时候手机会提示是否允许调试，那么你点击允许调试即可！然后就可以看到手机的型号此时连接成功！</p><img src="/2024/09/10/chrome%E8%B0%83%E8%AF%95webview/chrome%E8%B0%83%E8%AF%952.png" class=""><p>3.打开你的app，打开webview此时就可以看到对应的信息！</p><img src="/2024/09/10/chrome%E8%B0%83%E8%AF%95webview/chrome%E8%B0%83%E8%AF%953.png" class=""><p>4.此时点击inspect</p><img src="/2024/09/10/chrome%E8%B0%83%E8%AF%95webview/chrome%E8%B0%83%E8%AF%954.png" class=""><p>此时就看到了和我们平常调试网页一样的界面，那么你就可以按照调试网页的方式来调试webview了！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过这个调试方式我们可以轻松应对在测试中面临的webview的问题定位，方便了我们的工作！</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Chrome调试</category>
      
      <category>Chrome调试webview</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Chrome调试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python reduce函数</title>
    <link href="/2024/09/04/pythonreduce%E5%87%BD%E6%95%B0/"/>
    <url>/2024/09/04/pythonreduce%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-reduce-函数介绍"><a href="#Python-reduce-函数介绍" class="headerlink" title="Python reduce 函数介绍"></a>Python reduce 函数介绍</h1><p>reduce() 函数是 Python 中的一个内置高阶函数，于对序列（如列表、元组等）中的元素进行累积操作。reduce() 函数会对参数序列中元素进行迭代，用指定的函数对两个元素（左参数和右参数）进行某种操作，然后将结果和序列中的下一个元素做同样的操作，直到遍历完序列中的所有元素，最终返回累积的结果。那么下面就进行代码解释</p><h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce  <br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> x + y<br><br>number_list = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>sum_info = reduce(add,number_list)<br><span class="hljs-built_in">print</span>(sum_info) <span class="hljs-comment"># 15</span><br></code></pre></td></tr></table></figure><p>代码解释：我们定义了一个函数，实现了一个简单的加法运算，但是如果我们想传入一个数字list求和呢？就可以像上面我们写的通过reduce将函数和list传入reduce函数，那么就可以实现将其list中的数字进行求和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce  <br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> x + y<br><br>number_list = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>sum_info = reduce(add,number_list)<br><span class="hljs-built_in">print</span>(sum_info) <span class="hljs-comment"># 20</span><br></code></pre></td></tr></table></figure><p>代码解释： 这个就是将加法改成了乘法依然适用！</p><h2 id="代码解释-lambda函数"><a href="#代码解释-lambda函数" class="headerlink" title="代码解释 lambda函数"></a>代码解释 lambda函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce  <br><br>number_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]  <br>sum_info = reduce(<span class="hljs-keyword">lambda</span> x, y: x + y, number_list)  <br><span class="hljs-built_in">print</span>(sum_info)  <span class="hljs-comment"># 输出: 15</span><br></code></pre></td></tr></table></figure><p>代码解释： 虽然我们上面实现了一个加法，但是总体比较臃肿，我们可以借助lambda函数实现一行代码搞定，我们可以看到reduce依旧传入了一个函数和一个list。lambda 函数 lambda x, y: x + y 被用作 reduce() 的第一个参数，它接受两个参数并返回它们的和，numbers 列表作为第二个参数传递给 reduce()，reduce() 函数会依次将列表中的元素相加，最终返回总和。乘法或者其他都一样只需改运算符即可！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1.reduce() 函数在处理大型数据集时可能会比较慢，因为它需要遍历整个序列。</p><p>2.在很多情况下，使用列表推导式、循环或其他内置函数（如 sum()）可能更加直观和高效。</p><p>3.reduce() 函数的主要优势在于其通用性和灵活性，它允许你通过自定义函数来执行几乎任何类型的累积操作。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python reduce函数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python的property属性</title>
    <link href="/2024/09/02/python%E7%9A%84property%E5%B1%9E%E6%80%A7/"/>
    <url>/2024/09/02/python%E7%9A%84property%E5%B1%9E%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="Python的property属性讲解"><a href="#Python的property属性讲解" class="headerlink" title="Python的property属性讲解"></a>Python的property属性讲解</h1><p>当我们在编程类的时候假如我们想做到一些限制，例如这个类型的不允许修改，虽然可以通过函数逻辑处理进行达到目的，但是我们可以通过python自带的property属性做到哦！</p><h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><p>假如我们要写一个关于金额的限制，这里首先限制关于假如我们的密码这里不允许更改，当然只是举例子，现实肯定是可以修改的！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">user_account</span>:<br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">password</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;密码：123456&quot;</span><br><br>xiaoming = user_account()<br><span class="hljs-built_in">print</span>(xiaoming.password)<br></code></pre></td></tr></table></figure><p>代码解释： 运行上述代码 我们定义了一个user_account类，这个类里的一个password方法里面retrun 了一个字符串，假如此时运行程序我们会发现输出了密码：123456，下一步我们进行修改我们的password。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">user_account</span>:<br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">password</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;密码：123456&quot;</span><br><br>xiaoming = user_account()<br><span class="hljs-built_in">print</span>(xiaoming.password)<br>xiaoming.password = <span class="hljs-string">&quot;密码：123456abcd&quot;</span><br><span class="hljs-built_in">print</span>(xiaoming.password)<br></code></pre></td></tr></table></figure><p>代码解释：此时我们想要将 <code>密码：123456</code> 改为 <code>密码：123456abc</code>。但是运行程序后报错了，报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">ERROR!<br>密码：123456<br>Traceback (most recent call last):<br>  File &quot;&lt;main.py&gt;&quot;, line 8, in &lt;module&gt;<br>AttributeError: property &#x27;password&#x27; of &#x27;user_account&#x27; object has no setter<br></code></pre></td></tr></table></figure><p>提示我们无法修改这个内存变量password，那么为什么呢？是因为我们如果使用了@property 属性此时这个变量就变成了只读的，不可以被修改，这样我们就做到了无法修改密码的要求，但是现实是需要修改的，我们又不想随意修改，那么我们可以引进新的概念！</p><h2 id="setter、getter-和-deleter-方法"><a href="#setter、getter-和-deleter-方法" class="headerlink" title="setter、getter 和 deleter 方法"></a>setter、getter 和 deleter 方法</h2><p>那么在这里我们有setter, getter, deleter方法，其中setter 是在@property属性里面可以进行修改， getter是获取， deleter是删除，可能各位同学听起来还是晕晕的，那么我们就直接进入正题代码解惑！</p><h3 id="代码解释-getter"><a href="#代码解释-getter" class="headerlink" title="代码解释 getter"></a>代码解释 getter</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">user_account</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>            self._password = ‘初始密码 <span class="hljs-number">123456</span>’<br>     <br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">password</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;如果您是首次访问系统，初始密码是123456，请您及时修改您的密码，避免被盗！&quot;</span>)<br>        <span class="hljs-keyword">return</span> self._password<br> <br><span class="hljs-meta">    @password.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">password</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前您正在进行修改密码的操作，请注意周围安全！&quot;</span>)<br>        self._password = value<br> <br><span class="hljs-meta">    @password.deleter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">password</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前您正在进行删除密码的操作，请慎重！&quot;</span>)<br>        <span class="hljs-keyword">del</span> self._password<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;del complite&#x27;</span>)<br><br><br>xiaoming = user_account()<br>xiaoming.password  <span class="hljs-comment"># 如果您是首次访问系统，初始密码是123456，请您及时修改您的密码，避免被盗！</span><br><br></code></pre></td></tr></table></figure><p>代码解释： 此处我们声明了一个类，此时写了四个方法，第一个是初始化了我们的密码，第而个是和上面一样的声明了@property属性，第二个是setter， 第三个是deleter 方法。</p><p>此处我们要说的是getter方法，我们下面写的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">xiaoming = user_account()<br>xiaoming.password  <span class="hljs-comment"># getter 方法</span><br></code></pre></td></tr></table></figure><p>就是一个getter方法用来获取我们的密码信息。</p><h3 id="代码解释-setter"><a href="#代码解释-setter" class="headerlink" title="代码解释 setter"></a>代码解释 setter</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">user_account</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>            self._password = ‘初始密码 <span class="hljs-number">123456</span>’<br>     <br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">password</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;如果您是首次访问系统，初始密码是123456，请您及时修改您的密码，避免被盗！&quot;</span>)<br>        <span class="hljs-keyword">return</span> self._password<br> <br><span class="hljs-meta">    @password.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">password</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前您正在进行修改密码的操作，请注意周围安全！&quot;</span>)<br>        self._password = value<br> <br><span class="hljs-meta">    @password.deleter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">password</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前您正在进行删除密码的操作，请慎重！&quot;</span>)<br>        <span class="hljs-keyword">del</span> self._password<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;del complite&#x27;</span>)<br><br><br>xiaoming = user_account()<br>xiaoming.password  <br><br>xiaoming.password = <span class="hljs-string">&quot;123456abc&quot;</span> <span class="hljs-comment"># setter</span><br><span class="hljs-built_in">print</span>(xiaoming.password) <br><br><span class="hljs-comment"># 输出结果</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">当前您正在进行修改密码的操作，请注意周围安全！</span><br><span class="hljs-string">如果您是首次访问系统，初始密码是123456，请您及时修改您的密码，避免被盗！</span><br><span class="hljs-string">123456abc</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br></code></pre></td></tr></table></figure><p>这里我们使用的就是setter方法，可以发现我们在最开始的无法修改密码，到现在可以修改成功了就是我们的setter方法实现的！</p><h3 id="代码解释-deleter"><a href="#代码解释-deleter" class="headerlink" title="代码解释 deleter"></a>代码解释 deleter</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">user_account</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>            self._password = ‘初始密码 <span class="hljs-number">123456</span>’<br>     <br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">password</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;如果您是首次访问系统，初始密码是123456，请您及时修改您的密码，避免被盗！&quot;</span>)<br>        <span class="hljs-keyword">return</span> self._password<br> <br><span class="hljs-meta">    @password.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">password</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前您正在进行修改密码的操作，请注意周围安全！&quot;</span>)<br>        self._password = value<br> <br><span class="hljs-meta">    @password.deleter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">password</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前您正在进行删除密码的操作，请慎重！&quot;</span>)<br>        <span class="hljs-keyword">del</span> self._password<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;删除密码成功！&#x27;</span>)<br><br><br>xiaoming = user_account()<br>xiaoming.password  <span class="hljs-comment"># getter 方法</span><br><br>xiaoming.password = <span class="hljs-string">&quot;123456abc&quot;</span><br><span class="hljs-built_in">print</span>(xiaoming.password) <span class="hljs-comment">#setter 方法</span><br><br><span class="hljs-keyword">del</span> xiaoming.password<br><span class="hljs-built_in">print</span>(xiaoming.password) <span class="hljs-comment"># deleter方法 出错 提示无当前变量信息因为已经删除</span><br><br><span class="hljs-comment"># 输出信息</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">如果您是首次访问系统，初始密码是123456，请您及时修改您的密码，避免被盗！</span><br><span class="hljs-string">当前您正在进行修改密码的操作，请注意周围安全！</span><br><span class="hljs-string">如果您是首次访问系统，初始密码是123456，请您及时修改您的密码，避免被盗！</span><br><span class="hljs-string">123456abc</span><br><span class="hljs-string">当前您正在进行删除密码的操作，请慎重！</span><br><span class="hljs-string">删除密码成功！</span><br><span class="hljs-string">如果您是首次访问系统，初始密码是123456，请您及时修改您的密码，避免被盗！</span><br><span class="hljs-string">ERROR!</span><br><span class="hljs-string">Traceback (most recent call last):</span><br><span class="hljs-string">  File &quot;&lt;main.py&gt;&quot;, line 29, in &lt;module&gt;</span><br><span class="hljs-string">  File &quot;&lt;main.py&gt;&quot;, line 8, in password</span><br><span class="hljs-string">AttributeError: &#x27;user_account&#x27; object has no attribute &#x27;_password&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>那么上面就是deleter 方法，此时我们可以看到我们进行了删除密码的操作，这样的话我们就完成了所有的信息。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>由此可见使用属性的一些好处例如：</p><p>1.封装：属性提供了一种封装数据的方式，隐藏了数据实现的细节，只暴露访问和修改数据的接口。</p><p>2.验证：在设置属性值时，你可以执行验证逻辑，确保数据的有效性。</p><p>3.灵活性：属性的实现可以更改，而不需要更改使用这些属性的代码。</p><p>4.接口一致性：通过使用属性，你可以让类的接口看起来更像是数据访问，而不是方法调用，这对于不熟悉Python的开发者来说可能更直观。</p><p>但是，也是存在一些弊端问题例如：</p><p>1.虽然属性提供了一种强大的方式来控制数据的访问，但过度使用可能会使代码难以理解和维护。</p><p>2.在某些情况下，直接使用公有变量或私有变量加方法访问可能更为简单和直观。</p><p>3.在设计类的接口时，要仔细考虑哪些数据应该暴露为属性，哪些应该保持私有。</p><p>那么，各位同学你掌握了吗？</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 的property属性</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python函数指定必须带形参传递</title>
    <link href="/2024/08/28/python%E6%8C%87%E5%AE%9A%E5%8F%82%E6%95%B0/"/>
    <url>/2024/08/28/python%E6%8C%87%E5%AE%9A%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-函数指定参数必须带形参传递"><a href="#Python-函数指定参数必须带形参传递" class="headerlink" title="Python 函数指定参数必须带形参传递"></a>Python 函数指定参数必须带形参传递</h1><p>可能大家看到这个标题很难理解是什么意思，这里给大家解释一下，就是我们定义函数的时候，会用形参的设置，有时候呢，我们只需要按照顺序传递值就行，不需要在传递的时候指定形参的名字，但是有时候公司要求必须带，但是有的人忘记了怎么办？那么python其实是可以做到不传递就报错的，那么一起来看看怎么实现吧！</p><h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">t,y</span>):<br>    <span class="hljs-keyword">return</span> t,y<br>    <br>result=test(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(result)  <span class="hljs-comment"># (1, 2)</span><br></code></pre></td></tr></table></figure><p>这里呢就是虽然我们设置了形参t, y 但是你传递的时候可以只是按照顺序即可，无需使用test(t&#x3D;1,y&#x3D;2)的方式，那么python如何强制使用呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">*,t,y</span>):<br>    <span class="hljs-keyword">return</span> t,y<br>    <br>result=test(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p>此时你发现，我在函数定义的时候加了一个*,那么python 就会要去你必须在调用函数的时候带上形参要不然就报错，运行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">ERROR!<br>Traceback (most recent call last):<br>  File &quot;&lt;main.py&gt;&quot;, line 4, in &lt;module&gt;<br>TypeError: test() takes 0 positional arguments but 2 were given<br><br></code></pre></td></tr></table></figure><p>那么我们来修改这个，让其正确运行！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">*,t,y</span>):<br>    <span class="hljs-keyword">return</span> t,y<br>    <br>result=test(t=<span class="hljs-number">1</span>,y=<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(result) <span class="hljs-comment"># (1, 2)</span><br></code></pre></td></tr></table></figure><p>那么，这样就可以了！python实现起来就是这么的简单方便！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在我们平常要求中可能会有类似的，如果你知道了这个，就无需在注释中强调编码风格，这样就可以强制其他同事按照这个方式实现！</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 函数指定必须带形参传递</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jmeter之Jdbc请求</title>
    <link href="/2024/08/20/jdbc%E8%AF%B7%E6%B1%82jmeter/"/>
    <url>/2024/08/20/jdbc%E8%AF%B7%E6%B1%82jmeter/</url>
    
    <content type="html"><![CDATA[<h1 id="Jmeter之Jdbc并发请求"><a href="#Jmeter之Jdbc并发请求" class="headerlink" title="Jmeter之Jdbc并发请求"></a>Jmeter之Jdbc并发请求</h1><p>在Jmeter中我们可以使用多种请求协议，其中就包含我们的数据库的压力测试，那么今天就介绍如何通过Jmeter连接mysql进行测试。</p><h2 id="下载jdbc-连接driver"><a href="#下载jdbc-连接driver" class="headerlink" title="下载jdbc 连接driver"></a>下载jdbc 连接driver</h2><p>首先是查看自己mysql的版本，我的是8.0.19，执行命令select version() 即可查看，那么我们就从网上下载我们的driver。</p><p>然后将我们下载好的driver放到jmeter的lib下的ext中。</p><img src="/2024/08/20/jdbc%E8%AF%B7%E6%B1%82jmeter/jdbc.png" class=""><h2 id="添加jdbc配置原件"><a href="#添加jdbc配置原件" class="headerlink" title="添加jdbc配置原件"></a>添加jdbc配置原件</h2><img src="/2024/08/20/jdbc%E8%AF%B7%E6%B1%82jmeter/config.png" class=""><h2 id="添加jdbc请求"><a href="#添加jdbc请求" class="headerlink" title="添加jdbc请求"></a>添加jdbc请求</h2><img src="/2024/08/20/jdbc%E8%AF%B7%E6%B1%82jmeter/request.png" class=""><h2 id="添加结果树"><a href="#添加结果树" class="headerlink" title="添加结果树"></a>添加结果树</h2><img src="/2024/08/20/jdbc%E8%AF%B7%E6%B1%82jmeter/result.png" class=""><p>这时候我们可以看到我们这边请求成功了！</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>一些注意的配置项放在这里</p><p>DatabaseUrl:jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;ui_auto?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&amp;serverTimezone&#x3D;UTC</p><p>Jdbc Driver class: com.mysql.jdbc.Driver</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上述的讲解我相信同学已经会了连接mysql，那么其他的数据库也是一样的道理！</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Jmeter</category>
      
      <category>Jmeter之Jdbc请求</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Jmeter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>招聘</title>
    <link href="/2024/08/17/%E6%8B%9B%E8%81%98/"/>
    <url>/2024/08/17/%E6%8B%9B%E8%81%98/</url>
    
    <content type="html"><![CDATA[<h1 id="本公司招聘测试职位"><a href="#本公司招聘测试职位" class="headerlink" title="本公司招聘测试职位"></a>本公司招聘测试职位</h1><p>职位描述：<br>1、独立完成所负责业务的测试用例设计、测试方案的设计和指定。<br>2、针对复杂模块，深入了解代码逻辑，熟练运用相关工具和方法，承担并能独立完成产品的功能、接口、性能以及其他各种测试。<br>3、参与完整的产品迭代流程，除正常的测试工作外，在需求&#x2F;交互评审以及上线流程中起到质量保障的作用。<br>4、根据产品和项目特点，提出、设计和实施合理的自动化解决方案，提高测试效率。<br>5、独立完成测试任务的计划安排、沟通协调和项目进度汇报。<br>6、经常性的对工作中的问题、知识点进行总结，同时能够了解业界前沿的测试技术，并在实际项目中实践和推广。<br>职位要求：<br>1、2年以上信贷或金融行业APP和H5测试经验。<br>2、熟悉Python语言，可以熟练编写自动化和性能测试脚本。<br>3、精通并且能独立搭建和使用至少一种开源测试工具或框架，如UIAutomator、Appium、JMeter等。<br>4、英语读写能力强，做过海外项目优先。<br>5、有责任心，能承担压力，能够独立解决问题，有创新想法。</p><p>boss 投递地址：<a href="https://www.zhipin.com/job_detail/c3e5dd3ae9ce3c981HNy0t-9EVZY.html?ka=hot-job-2">https://www.zhipin.com/job_detail/c3e5dd3ae9ce3c981HNy0t-9EVZY.html?ka=hot-job-2</a></p>]]></content>
    
    
    <categories>
      
      <category>招聘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>招聘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python上下文管理器</title>
    <link href="/2024/08/15/python%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    <url>/2024/08/15/python%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-上下文管理器"><a href="#Python-上下文管理器" class="headerlink" title="Python 上下文管理器"></a>Python 上下文管理器</h1><p>大家都用过Python中的with语句，使用with语句其实就是一个上下文管理器，那么他主要做了一个在执行某个动作前做了一件事情，做完了这个事情之后又做了另外一件事情。虽然听起来比较难懂，但是大体意思是这样的，那么我们就一起用代码来看看是怎么回事吧！</p><h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">info = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;mydata.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br>info.write(<span class="hljs-string">&quot;hello welcome to my blog&quot;</span>)<br>info.close()<br></code></pre></td></tr></table></figure><p>上面就是实现了一个简单的打开mydata.txt文件，然后写入字符，然后关闭。这样的一个操作过程。</p><p>那么使用with 改造后呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;mydata.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> info:<br>    info.write(<span class="hljs-string">&quot;welocme to my blog&quot;</span>)<br></code></pre></td></tr></table></figure><p>那么当我们使用with上下文管理器的时候，就是这样的了，可能同学会发现咦，怎么没有关闭文件了，这个呢就是上下文管理器的神奇之处，他会在写完数据后自动执行关闭的操作，是不是比我们自己写的要更加简单以及安全！那么执行完毕后就会生成mydata.txt文件。</p><p>那么我们重新来看一个程序！</p><h2 id="上下文管理器内部逻辑"><a href="#上下文管理器内部逻辑" class="headerlink" title="上下文管理器内部逻辑"></a>上下文管理器内部逻辑</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br>start=time.perf_counter()<br>nums = []<br><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>    nums.append(n**<span class="hljs-number">5</span>)<br><br>stop= time.perf_counter()<br><br>cost = stop - start<br><br><span class="hljs-built_in">print</span>(cost)<br><br></code></pre></td></tr></table></figure><p>那么上面的代码中简单的实现了一个这样的逻辑，就是实现计算n的5次方，然后计算从0到1000，然后加入列表中，开始计时查看中间的时间差。这时候，我们通过写内部真正实际操作的逻辑！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Timer</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.cost = <span class="hljs-number">0</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__enter__</span>(<span class="hljs-params">self</span>):<br>        self.start=time.perf_counter()<br>        <span class="hljs-keyword">return</span> self<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__exit__</span>(<span class="hljs-params">self, exc_type, exc_val, exc_tb</span>):<br>        self.stop = time.perf_counter()<br>        self.cost = self.stop - self.start<br>     <br>        <br><br><span class="hljs-keyword">with</span> Timer() <span class="hljs-keyword">as</span> timer:<br>    nums = []<br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>        nums.append(n**<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(timer.cost)<br></code></pre></td></tr></table></figure><p>那么这时候可以看出来，我们写了一个with的上下文管理器，当执行的时候首先进去Timer这个类里面，需要注意的是，这时候首先执行的是 <code>__enter__</code> 这个方法，然后当我们整个with结束的时候执行的是 <code>__exit__</code> 这个方法，此时在<code>__exit__</code>中我们做了记录结束的时间并且做了两者相减的时间差的值，这样我们就可以在打印timer.cost的时候获取时间差。</p><p>需要注意的是在<code>__enter__</code> 这个里面有一个return self。是因为我们在执行with Timer() as timer的时候 timer 并不是真正的拿到Timer(), 其实是拿到的是<code>__enter__</code>这里的返回信息，也就是self.start 此时需要用retrun 将其返回记录的！</p><h2 id="代码内的总结"><a href="#代码内的总结" class="headerlink" title="代码内的总结"></a>代码内的总结</h2><p>一个上下文管理器需要实现如下的方法：</p><p><code>__enter__</code> 安装上下文，可以返回对象</p><p><code>__exit__</code> 清楚释放对象</p><h2 id="上下文应用场景"><a href="#上下文应用场景" class="headerlink" title="上下文应用场景"></a>上下文应用场景</h2><p>Python 的上下文管理器是一个强大的特性，它允许你以非常优雅和简洁的方式管理资源，比如文件操作、数据库连接、网络套接字等。使用上下文管理器可以确保即使在发生异常的情况下，资源也能被正确地清理和释放。上下文管理器通常与 <code>with</code> 语句一起使用。</p><p>以下是上下文管理器的一些典型应用场景：</p><h3 id="1-文件操作"><a href="#1-文件操作" class="headerlink" title="1. 文件操作"></a>1. 文件操作</h3><p>文件操作是上下文管理器最常见的应用场景之一。使用 <code>with</code> 语句可以自动管理文件的打开和关闭，即使在读写文件时发生异常，文件也会被正确关闭。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;example.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    content = file.read()<br><span class="hljs-comment"># 文件在这里已经被自动关闭</span><br></code></pre></td></tr></table></figure><h3 id="2-线程锁（Threading-Locks）"><a href="#2-线程锁（Threading-Locks）" class="headerlink" title="2. 线程锁（Threading Locks）"></a>2. 线程锁（Threading Locks）</h3><p>在多线程编程中，为了防止数据竞争，可能需要使用锁来同步对共享资源的访问。Python 的 <code>threading</code> 模块提供了锁（Lock 和 RLock），这些锁可以作为上下文管理器使用，以确保锁在使用后能被正确释放。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Lock<br><br>lock = Lock()<br><span class="hljs-keyword">with</span> lock:<br>    <span class="hljs-comment"># 执行临界区代码</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-comment"># 锁在这里被自动释放</span><br></code></pre></td></tr></table></figure><h3 id="3-数据库连接"><a href="#3-数据库连接" class="headerlink" title="3. 数据库连接"></a>3. 数据库连接</h3><p>在处理数据库时，正确管理数据库连接非常重要。虽然标准的数据库连接库（如 SQLite, PostgreSQL 的 psycopg2 等）不直接提供上下文管理器接口，但你可以通过定义自己的上下文管理器类或使用第三方库（如 SQLAlchemy）来管理数据库连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 假设 db_connect 是获取数据库连接的函数</span><br><span class="hljs-keyword">with</span> db_connect() <span class="hljs-keyword">as</span> conn:<br>    <span class="hljs-comment"># 执行数据库操作</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-comment"># 连接在这里被自动关闭或回滚</span><br></code></pre></td></tr></table></figure><h3 id="4-网络套接字"><a href="#4-网络套接字" class="headerlink" title="4. 网络套接字"></a>4. 网络套接字</h3><p>网络编程中，套接字（Sockets）的创建、使用和关闭也可以利用上下文管理器来管理，以确保即使在发生异常时，套接字也能被正确关闭。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SocketContext</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, host, port</span>):<br>        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>        self.sock.connect((host, port))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__enter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.sock<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__exit__</span>(<span class="hljs-params">self, exc_type, exc_val, exc_tb</span>):<br>        self.sock.close()<br><br><span class="hljs-keyword">with</span> SocketContext(<span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-number">12345</span>) <span class="hljs-keyword">as</span> sock:<br>    <span class="hljs-comment"># 发送和接收数据</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-comment"># 套接字在这里被自动关闭</span><br></code></pre></td></tr></table></figure><h3 id="5-临时目录和文件"><a href="#5-临时目录和文件" class="headerlink" title="5. 临时目录和文件"></a>5. 临时目录和文件</h3><p>在处理需要临时文件或目录的场景时，可以使用像 <code>tempfile</code> 这样的库来创建它们，并通过自定义上下文管理器来确保在不再需要时它们被正确删除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tempfile<br><span class="hljs-keyword">import</span> shutil<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TempDir</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.temp_dir = tempfile.mkdtemp()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__enter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.temp_dir<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__exit__</span>(<span class="hljs-params">self, exc_type, exc_val, exc_tb</span>):<br>        shutil.rmtree(self.temp_dir)<br><br><span class="hljs-keyword">with</span> TempDir() <span class="hljs-keyword">as</span> tempdir:<br>    <span class="hljs-comment"># 使用临时目录</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-comment"># 临时目录在这里被自动删除</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上下文管理器应用广泛涉及到前后状态改变的都可以使用，也就是，任何需要确保资源在使用后被正确释放或清理的场景，都可以利用上下文管理器来实现。所以你掌握了其中的原理了吗？</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 上下文管理器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jmeter 逻辑控制器之交替控制器</title>
    <link href="/2024/08/12/jmeter%E4%BA%A4%E6%9B%BF%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
    <url>/2024/08/12/jmeter%E4%BA%A4%E6%9B%BF%E6%8E%A7%E5%88%B6%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Jmeter-逻辑控制器之交替控制器"><a href="#Jmeter-逻辑控制器之交替控制器" class="headerlink" title="Jmeter 逻辑控制器之交替控制器"></a>Jmeter 逻辑控制器之交替控制器</h1><p>大家知道在Jmeter中我们在添加了HTTP请求后，我们有时候都要添加逻辑控制器，也就是需要添加一些对于请求的逻辑控制，那么今天我们介绍的是交替控制器</p><h2 id="什么是交替控制器"><a href="#什么是交替控制器" class="headerlink" title="什么是交替控制器"></a>什么是交替控制器</h2><p>交替控制器顾名思义就是在请求的时候可以进行交替的请求，那么从文字上面很难实现理解，直接来实际操作展示！</p><h2 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h2><h3 id="首先我们要添加一个线程组"><a href="#首先我们要添加一个线程组" class="headerlink" title="首先我们要添加一个线程组"></a>首先我们要添加一个线程组</h3><img src="/2024/08/12/jmeter%E4%BA%A4%E6%9B%BF%E6%8E%A7%E5%88%B6%E5%99%A8/jmeter1.png" class=""><p>这里设置的线程组中的线程数：1，Ramp-up 秒：0， 循环次数：3， 也就是启动三个线程。</p><h3 id="添加HTTP请求"><a href="#添加HTTP请求" class="headerlink" title="添加HTTP请求"></a>添加HTTP请求</h3><img src="/2024/08/12/jmeter%E4%BA%A4%E6%9B%BF%E6%8E%A7%E5%88%B6%E5%99%A8/jmeter2.png" class=""><h3 id="添加交替控制器"><a href="#添加交替控制器" class="headerlink" title="添加交替控制器"></a>添加交替控制器</h3><img src="/2024/08/12/jmeter%E4%BA%A4%E6%9B%BF%E6%8E%A7%E5%88%B6%E5%99%A8/jmeter3.png" class=""><img src="/2024/08/12/jmeter%E4%BA%A4%E6%9B%BF%E6%8E%A7%E5%88%B6%E5%99%A8/jmeter4.png" class=""><p>此时添加了交替控制器，那么我们将需要交替请求的请求添加到交替控制器中。</p><h3 id="添加交替请求"><a href="#添加交替请求" class="headerlink" title="添加交替请求"></a>添加交替请求</h3><img src="/2024/08/12/jmeter%E4%BA%A4%E6%9B%BF%E6%8E%A7%E5%88%B6%E5%99%A8/jmeter6.png" class=""><img src="/2024/08/12/jmeter%E4%BA%A4%E6%9B%BF%E6%8E%A7%E5%88%B6%E5%99%A8/jmeter7.png" class=""><p>这里添加了3个请求，百度地图， 百度贴吧， 百度图片。</p><h3 id="添加额外请求"><a href="#添加额外请求" class="headerlink" title="添加额外请求"></a>添加额外请求</h3><img src="/2024/08/12/jmeter%E4%BA%A4%E6%9B%BF%E6%8E%A7%E5%88%B6%E5%99%A8/jmeter8.png" class=""><p>这里添加了百度视频的请求</p><p>6.添加查看结果树</p><img src="/2024/08/12/jmeter%E4%BA%A4%E6%9B%BF%E6%8E%A7%E5%88%B6%E5%99%A8/jmeter9.png" class=""><h3 id="此时运行查看结果"><a href="#此时运行查看结果" class="headerlink" title="此时运行查看结果"></a>此时运行查看结果</h3><img src="/2024/08/12/jmeter%E4%BA%A4%E6%9B%BF%E6%8E%A7%E5%88%B6%E5%99%A8/jemter5.png" class=""><p>可以看到这里的交替控制器发生了效果，形成了：</p><p>百度-&gt;百度图片-&gt;百度视频</p><p>百度-&gt;百度地图-&gt;百度视频</p><p>百度-&gt;百度贴吧-&gt;百度视频</p><p>每次的请求都按照上述的请求顺序进行交替的请求，这下我想就应该明白了交替控制器的具体逻辑了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我们要善于使用Jmeter逻辑请求中的各个控制器，其中这个交替控制器就是实现了交替请求的效果！</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Jmeter</category>
      
      <category>Jmeter 交替控制器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Jmeter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 装饰器</title>
    <link href="/2024/08/07/python%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <url>/2024/08/07/python%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-装饰器"><a href="#Python-装饰器" class="headerlink" title="Python 装饰器"></a>Python 装饰器</h1><p>装饰器是什么东西呢？想必大家也多少了解过了一点，它就是实现了我们在不修改原有函数的基础上，给函数或方法增加新的功能，其实装饰器本身也是一个函数，她接收一个函数作为参数并返回一个新的函数，这个新的函数通常包含原函数的调用，并包含一额外新增的功能。</p><p>那么在了解装饰器之前呢，你需要了解一个东西叫做闭包，只有了解了它你才能更加了解装饰器。那么可以看我之前写的关于闭包的文章。</p><p>链接：<a href="https://8888666.top/2024/08/05/python%E9%97%AD%E5%8C%85/">https://8888666.top/2024/08/05/python%E9%97%AD%E5%8C%85/</a></p><h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><h3 id="使用类定义函数装饰器未带参数"><a href="#使用类定义函数装饰器未带参数" class="headerlink" title="使用类定义函数装饰器未带参数"></a>使用类定义函数装饰器未带参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBlogDecorator</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, function</span>):<br>        self.function = function<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The blog name is yunshao&quot;</span>)<br>        result_info = self.function(*args, **kwargs)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The blog is download, now you can see!&quot;</span>)<br>        <span class="hljs-keyword">return</span> result_info<br>        <br><br><span class="hljs-meta">@MyBlogDecorator</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">open_blog</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;welcome to my blog&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;oh,is very nice blog&quot;</span><br><br><span class="hljs-built_in">print</span>(open_blog())<br></code></pre></td></tr></table></figure><p>代码解释： 上述代码就是简单实现了一个装饰器。</p><p>1.首先我定义一个函数，这个函数用来模拟我们打开我的网站的一个对话，整个函数就是打印了一串文字，retrun 了一串文字。</p><p>2.然后我定义了一个装饰器MyBlogDecorator，在装饰器中首先在<code>__init__</code>方法中我们定义的function 此时传入的并不是一个变量，而是一个函数，这就是装饰器的灵魂所在。</p><p>3.那么我们还定义了魔法函数<code>__call__</code> 在运行类MyBlogDecorator，会自动调用我们的 <code>__call__</code> 方法，那么在<code>__call__</code> 方法中我们设置了可以传入参数设置，也就是假设你的open_blog 函数需要传变量，那么这里也是可以完美支持，只不过我们的案例中没写而已。</p><p>4.在里面我们也是首先打印了一串文字，然后此时调用了我们的self.function(*args, **kwargs)这里其实就是将open_blog() 函数进行了调用，然后程序会执行open_blog，然后输出”welcome to my blog”, 此时result_info 进行接收return 返回的值，然后打印“The blog is download, now you can see!”，最后程序输出return的值oh,is very nice blog。</p><p>完整的输出信息:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">The blog name is yunshao<br>welcome to my blog<br>The blog is download, now you can see!<br>oh,is very nice blog<br></code></pre></td></tr></table></figure><p>相信大家在此刻也就对装饰器了解更加彻底了！</p><h3 id="使用类定义函数装饰器带参数"><a href="#使用类定义函数装饰器带参数" class="headerlink" title="使用类定义函数装饰器带参数"></a>使用类定义函数装饰器带参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBlogDecorator</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        self.name = name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, function</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">warp</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;hello <span class="hljs-subst">&#123;self.name&#125;</span>&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The blog name is yunshao&quot;</span>)<br>            result_info = function(*args, **kwargs)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The blog is download, now you can see!&quot;</span>)<br>            <span class="hljs-keyword">return</span> result_info<br>        <span class="hljs-keyword">return</span> warp<br>        <br><br><span class="hljs-meta">@MyBlogDecorator(<span class="hljs-params"><span class="hljs-string">&quot;xiaoming&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">example_test</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;welcome to my blog&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;oh,is very nice blog&quot;</span><br><br><span class="hljs-built_in">print</span>(example_test())<br></code></pre></td></tr></table></figure><p>代码解释： 那么如果你看了上述的代码解释，我这里就不会在详细的讲解每一步了，这里我主要来讲不一样的地方。</p><p>1.首先我们这里发生变化的地方是我们的装饰器增加了参数，也就是name，我们通过MyBlogDecorator进行了传递name是 xiaoming 的参数，但是要注意的是此时我们接收的name就是在<code>__init__</code> 方法里，和上述不一样的是我们这里不能接收函数了。</p><p>2.我们需要写一个函数的装饰器进行接收，也就是在<code>__call__</code> 里面进行接收fucntion ,然后通过内部的函数 wrap 进行调用，此时我们需要注意在进入<code>__call__</code>中我们首先执行的是return warp 让warp函数执行，然后我们里面的和我们上述讲的程序执行就是一样的了。</p><p>代码输出结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">hello xiaoming<br>The blog name is yunshao<br>welcome to my blog<br>The blog is download, now you can see!<br>oh,is very nice blog<br></code></pre></td></tr></table></figure><h3 id="给类添加装饰器"><a href="#给类添加装饰器" class="headerlink" title="给类添加装饰器"></a>给类添加装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">cls_MyBlogDecorator</span>(<span class="hljs-params">cls</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The blog name is yunshao&quot;</span>)<br>    <span class="hljs-keyword">return</span> cls<br>    <br><br><span class="hljs-meta">@cls_MyBlogDecorator</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Open_blog</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;welcome to my blog&quot;</span>)<br><br>Open_blog()<br></code></pre></td></tr></table></figure><p>代码解释：上述代码定义了一个类Open_blog, 然后类里面打印了一串文字，我们定义了一个装饰器cls_MyBlogDecorator，此时装饰器实现了将Open_blog传入到了cls_MyBlogDecorator中, 也就是cls，然后打印了一串文字，return了 cls 也就调用了Open_blog 这个类 输出了 welcome to my blog</p><p>程序输出结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">welcome to my blog<br>The blog name is yunshao<br></code></pre></td></tr></table></figure><p>那么，如果我重复调用Open_blog() 这个类会发生什么呢？大部分同学应该会说，那肯定输出上面的两串文字 两次，那么现实真的是吗？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">cls_MyBlogDecorator</span>(<span class="hljs-params">cls</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The blog name is yunshao&quot;</span>)<br>    <span class="hljs-keyword">return</span> cls<br>    <br><br><span class="hljs-meta">@cls_MyBlogDecorator</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Open_blog</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;welcome to my blog&quot;</span>)<br><br>Open_blog()<br>Open_blog()<br></code></pre></td></tr></table></figure><p>程序输出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">welcome to my blog<br>The blog name is yunshao<br></code></pre></td></tr></table></figure><p>哈哈，大家发现了没有，此时我们调用两次也没有执行输出两次，是因为我们的装饰器已经装饰完到内存了，你虽然调用了两次，但是每次调用的还是那个装饰器装饰到内存的那个，所以会只是输出一次，那么怎么让他输出两次呢？ 可以这样来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">cls_MyBlogDecorator</span>(<span class="hljs-params">cls</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The blog name is yunshao&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;the blog is download&quot;</span>)<br>        result_object = cls()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;wow the blog is very nice!&quot;</span>)<br>        <span class="hljs-keyword">return</span> result_object<br>    <span class="hljs-keyword">return</span> inner<br>    <br><br><span class="hljs-meta">@cls_MyBlogDecorator</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Open_blog</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;welcome to my blog&quot;</span>)<br><br>open1 = Open_blog()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===================&quot;</span>)<br>open2 = Open_blog()<br></code></pre></td></tr></table></figure><p>代码解释： 此时我们进行了改进在之前的函数中新增了inner函数，此时逻辑变为当我们每次调用的Open_blog 这个类的时候实际我们在调用inner这个函数，函数里面呢将类进行了实例化，此时我们return 底部的也变为了inner，也就是每次调用都会执行inner()这个函数。</p><p>程序输出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">welcome to my blog<br>The blog name is yunshao<br>the blog is download<br>wow the blog is very nice!<br>===================<br>the blog is download<br>wow the blog is very nice!<br></code></pre></td></tr></table></figure><p>这样你就会发现我们每调用一次都会调用一次inner里面的！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>python 中的装饰器是一种了非常灵活的方式来增强函数的功能，而不需要修改函数本身的代码。它们是函数式编程在 Python 中的一种优雅体现，能够极大地提高代码的可读性和可维护性。在众多的设计模式中也用的非常多，例如我们的日志记录、性能测试、事务处理、权限校验等，以及我们在使用Pytest 框架的时候我们会用到很多框架提供给我们的装饰器，非常强大且使用方便！</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 装饰器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
      <tag>装饰器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 闭包</title>
    <link href="/2024/08/05/python%E9%97%AD%E5%8C%85/"/>
    <url>/2024/08/05/python%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-闭包"><a href="#Python-闭包" class="headerlink" title="Python 闭包"></a>Python 闭包</h1><p>大家接触过python肯定都知道闭包这个东西，但是有些人看过也就忘记了，感觉对他的用处也不是很明朗，只是知道有这个东西，那么今天就随着我一起学习这个闭包吧！</p><h2 id="闭包介绍"><a href="#闭包介绍" class="headerlink" title="闭包介绍"></a>闭包介绍</h2><p>简单来说： 内部函数对外部函数作用域内变量的引用（非全局变量），则称内部函数为闭包。乍一听好像也是丈二和尚摸不着头脑，那么就让我们看代码来进一步了解吧！</p><h2 id="代码介绍"><a href="#代码介绍" class="headerlink" title="代码介绍"></a>代码介绍</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>():<br>    message = <span class="hljs-string">&quot;welcome to python&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;message&#125;</span>&quot;</span>)<br>    inner()<br><br>outer()<br><br></code></pre></td></tr></table></figure><p>那么各位同学可以猜想一下,运行结束后，输出什么呢？ 我想各位都猜对了，那就是 welcome to python, 其实这个就是一个闭包， 我们的inner是内部程序，这时候我们用到了外部的outer的变量也就是message，这样我们就成为一个闭包。应该比较容易理解吧！那么下一步我会进行一个程序变形，那么你能看出下一步输出什么吗？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>():<br>    message = <span class="hljs-string">&quot;welcome to python&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;message&#125;</span>&quot;</span>)<br>    message = <span class="hljs-string">&quot;wow python is amazing!&quot;</span><br>    <span class="hljs-keyword">return</span> inner<br><br>f = outer()<br>f()<br></code></pre></td></tr></table></figure><p>那么我们现在改完后，各位同学还能猜出输出什么吗？哈哈，可能部分同学认为输出的依旧是“welcome to python”,理由可能如下：</p><p>我们运行outer的时候实际上返回了inner函数，此时inner执行的时候直接就会输出 outer里面的message，所以输出的是 welcome to python。 那么事实真的如此吗？我们来运行看看！</p><img src="/2024/08/05/python%E9%97%AD%E5%8C%85/%E9%97%AD%E5%8C%851.png" class=""><p>可惜，可能和部分同学想的不一样了，那么为什么会输出wow python is amazing 呢？下面我来讲解一下：</p><h2 id="闭包的原理"><a href="#闭包的原理" class="headerlink" title="闭包的原理"></a>闭包的原理</h2><p>其实，我们在执行上述程序的时候，先运行的outer，此时实际上python悄默默的的做了一件事情，那就是将Message存了起来，等到inner运行的时候从里面拿出来，那么同学说我怎么看不到呢？下面使用debug模式我们来看一下！</p><img src="/2024/08/05/python%E9%97%AD%E5%8C%85/%E9%97%AD%E5%8C%852.png" class=""><p>大家可以看到我debug的时候查看一个内部函数，f.<code>__closure__</code> 这个是什么呢？ 其实这个就是闭包函数，closure 翻译成闭包就是中文的意思，那么此时做了什么事情呢？ 实际上 <code>__closure__ </code>是一个元组类型的，实际上是进行了一个复制操作将wow python is amazing 复制了一份放在了元祖中，所以在使用的时候实际上是从这个地方去出来的数据，为了证实我们可以进一步来看！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>():<br>    message = <span class="hljs-string">&quot;welcome to python&quot;</span><br>    name = <span class="hljs-string">&quot;xiao ming &quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span>+<span class="hljs-subst">&#123;message&#125;</span>&quot;</span>)<br><br>    <span class="hljs-comment"># message = &quot;wow python is amazing!&quot;</span><br>    <span class="hljs-keyword">return</span> inner<br><br><br>f = outer()<br>f()<br><br></code></pre></td></tr></table></figure><p>运行结果：</p><img src="/2024/08/05/python%E9%97%AD%E5%8C%85/%E9%97%AD%E5%8C%853.png" class=""><p>我们可以看出确实将信息存储在了<code>__closure__</code> 中，如果你理解了上述的，你也就明白了闭包为什么是内部函数使用外部函数的变量信息。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>说了这么多，那么闭包的应用场景有哪些呢？ 那就一起来看吧！</p><h3 id="1-数据封装和隐私保护"><a href="#1-数据封装和隐私保护" class="headerlink" title="1. 数据封装和隐私保护"></a>1. 数据封装和隐私保护</h3><p>闭包可以用来封装数据，使得数据只通过特定的函数接口进行访问和修改，从而保护数据的隐私性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-built_in">print</span>(text)<br>    <span class="hljs-keyword">return</span> inner<br><br><span class="hljs-comment"># 使用闭包</span><br>my_printer = outer(<span class="hljs-string">&quot;Hello, World!&quot;</span>)<br>my_printer()  <span class="hljs-comment"># 输出: Hello, World!</span><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>text</code> 变量被封装在 <code>outer</code> 函数的作用域中，只有通过 <code>inner</code> 函数才能访问。</p><h3 id="2-装饰器"><a href="#2-装饰器" class="headerlink" title="2. 装饰器"></a>2. 装饰器</h3><p>Python 中的装饰器是一种常用的闭包应用场景。装饰器允许你在不修改原有函数代码的情况下，给函数增加新的功能。</p><p>关于装饰器可以看这我这篇更加详细的介绍：<a href="https://8888666.top/2024/08/07/python%E8%A3%85%E9%A5%B0%E5%99%A8/">https://8888666.top/2024/08/07/python%E8%A3%85%E9%A5%B0%E5%99%A8/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_decorator</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something is happening before the function is called.&quot;</span>)<br>        func()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something is happening after the function is called.&quot;</span>)<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@my_decorator</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello!&quot;</span>)<br><br>say_hello()<br><span class="hljs-comment"># 输出:</span><br><span class="hljs-comment"># Something is happening before the function is called.</span><br><span class="hljs-comment"># Hello!</span><br><span class="hljs-comment"># Something is happening after the function is called.</span><br></code></pre></td></tr></table></figure><h3 id="3-工厂函数"><a href="#3-工厂函数" class="headerlink" title="3. 工厂函数"></a>3. 工厂函数</h3><p>工厂函数是返回函数的函数，这些返回的函数可以捕获并操作创建它们时的环境。这常用于生成具有特定行为或状态的函数实例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_multiplier_of</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">multiplier</span>(<span class="hljs-params">x</span>):<br>        <span class="hljs-keyword">return</span> x * n<br>    <span class="hljs-keyword">return</span> multiplier<br><br>times_two = make_multiplier_of(<span class="hljs-number">2</span>)<br>times_three = make_multiplier_of(<span class="hljs-number">3</span>)<br><br><span class="hljs-built_in">print</span>(times_two(<span class="hljs-number">10</span>))  <span class="hljs-comment"># 输出: 20</span><br><span class="hljs-built_in">print</span>(times_three(<span class="hljs-number">10</span>))  <span class="hljs-comment"># 输出: 30</span><br></code></pre></td></tr></table></figure><h3 id="4-回调函数"><a href="#4-回调函数" class="headerlink" title="4. 回调函数"></a>4. 回调函数</h3><p>在某些异步编程或事件驱动编程场景中，回调函数经常被用作闭包。它们允许在将来某个时间点调用一个函数，同时保持对当前环境或数据的引用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">perform_action</span>(<span class="hljs-params">action, value</span>):<br>    result = action(value)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The result is <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_ten</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x + <span class="hljs-number">10</span><br><br>perform_action(add_ten, <span class="hljs-number">5</span>)  <span class="hljs-comment"># 闭包的概念在这里不是直接体现，但回调函数常与闭包结合使用</span><br><br><span class="hljs-comment"># 假设在异步或事件驱动环境中，回调函数作为闭包传递，以保持对外部环境的引用</span><br></code></pre></td></tr></table></figure><h3 id="5-缓存机制"><a href="#5-缓存机制" class="headerlink" title="5. 缓存机制"></a>5. 缓存机制</h3><p>闭包可以用来实现缓存机制，尤其是当函数计算代价较高且其结果可以重用时。通过缓存函数的返回值，可以显著提高程序的性能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">memoize</span>(<span class="hljs-params">func</span>):<br>    cache = &#123;&#125;<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>(<span class="hljs-params">*args</span>):<br>        <span class="hljs-keyword">if</span> args <span class="hljs-keyword">in</span> cache:<br>            <span class="hljs-keyword">return</span> cache[args]<br>        result = func(*args)<br>        cache[args] = result<br>        <span class="hljs-keyword">return</span> result<br>    <span class="hljs-keyword">return</span> inner<br><br><span class="hljs-meta">@memoize</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fibonacci</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> n<br>    <span class="hljs-keyword">return</span> fibonacci(n-<span class="hljs-number">1</span>) + fibonacci(n-<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 调用 fibonacci 多次，可以看到缓存的效果</span><br></code></pre></td></tr></table></figure><p>这些只是闭包在 Python 中应用的几个例子，实际上闭包的应用场景非常广泛，几乎可以在任何需要封装数据或函数逻辑的场景中使用。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 闭包</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
      <tag>闭包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 单例模式</title>
    <link href="/2024/08/02/python%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/08/02/python%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-单例模式"><a href="#Python-单例模式" class="headerlink" title="Python 单例模式"></a>Python 单例模式</h1><p>在众多设计模式中，单例模式对于在测试开发过程中应用的还是比较广泛的，例如log, driver实例等。都需要使用到我们的单例模式</p><h2 id="什么是单例模式？"><a href="#什么是单例模式？" class="headerlink" title="什么是单例模式？"></a>什么是单例模式？</h2><p>用我自己的理解的话语来说：“单例模式就是如果一个地方都需要用到这个东西（对象），那么我们只需要创建一次就可以实现维护全局状态的使用”。就是我声明了在用的时候只需还是最初的那个即可，无需再次创建！</p><h2 id="应用常见场景"><a href="#应用常见场景" class="headerlink" title="应用常见场景"></a>应用常见场景</h2><p>单例模式一般用于对于共享资源的并发访问， 例如：数据库的连接， 日志的生成， 全局的工具对于测试而言就是我们的driver实例化。</p><h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">  因为单例模式在全局内只有一个实例，因此可以节省比较多的内存空间。</span><br><span class="hljs-string">全局只有一个接入点，可以更好地进行数据同步控制，避免多重占用。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">  函数装饰器实现</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sinleton</span>(<span class="hljs-params">cls</span>):<br>    <span class="hljs-comment"># 创建一个字典用来保存被装饰类的实例对象</span><br>    _instance = &#123;&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_singleton</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-comment"># 判断这个类有没有创建过对象， 没有就新创建一个， 有的话则返回之前创建的</span><br>        <span class="hljs-keyword">if</span> cls <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> _instance:<br>            _instance[cls] = cls(*args, **kwargs)<br>        <span class="hljs-keyword">return</span> _instance[cls]<br><br>    <span class="hljs-keyword">return</span> _singleton<br><br><br><span class="hljs-meta">@sinleton</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, a=<span class="hljs-number">0</span></span>):<br>        self.a = a<br><br><br>a1 = A(<span class="hljs-number">1</span>)<br>a2 = A(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a1), <span class="hljs-built_in">id</span>(a2)) <span class="hljs-comment"># 135962997305040 135962997305040</span><br></code></pre></td></tr></table></figure><p>可以看出上述的id 是一致的也就是我们实现了单例模式。</p><p>下面以初始化driver为例来展示实际应用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SeleniumSingleton</span>:<br>    _instance = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        <span class="hljs-keyword">if</span> cls._instance <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            cls._instance = <span class="hljs-built_in">super</span>().__new__(cls)<br>            options = webdriver.ChromeOptions()<br>            options.add_argument(<span class="hljs-string">&#x27;--disable-blink-features=AutomationControlled&#x27;</span>)<br>            cls._instance._driver = webdriver.Chrome(options=options)<br>        <span class="hljs-keyword">return</span> cls._instance<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getattr__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">getattr</span>(self._driver, name)<br></code></pre></td></tr></table></figure><p>上述代码解释：</p><p>_instance &#x3D; None：这是一个类属性，用于存储唯一的实例。它初始值为 None，表示还没有创建实例。</p><p><strong>new</strong>(cls, *args, **kwargs)：这是 Python 类中的一个特殊方法，用于创建类的实例。这个方法被重写，确保只创建一次实例。</p><p>如果 _instance 为 None，说明还没有创建实例，则创建一个新的 SeleniumSingleton 实例并赋给 _instance。<br>然后，创建 webdriver.Chrome 实例，并将其保存到 _instance._driver 属性中。<br>最后，返回 _instance。<br><strong>getattr</strong>(self, name)：这个方法用于处理属性访问。当使用 SeleniumSingleton 实例访问属性时，它会调用这个方法。</p><p>它从 self._driver 属性中获取对应属性，并返回给调用者。</p><p>代码的用途:</p><p>这段代码通过单例模式，确保只创建一次 Selenium WebDriver 实例。这样，在不同的地方使用 Selenium WebDriver 时，都可以访问同一个实例，避免重复创建，提高代码效率。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>单例模式在程序编写中有广泛的应用，大家可以把我这个设计模式，做到更加高效的开发！</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 设计模式</category>
      
      <category>Python 单例模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>真的是人善被人欺吗？</title>
    <link href="/2024/07/29/%E8%84%BE%E6%B0%94/"/>
    <url>/2024/07/29/%E8%84%BE%E6%B0%94/</url>
    
    <content type="html"><![CDATA[<h1 id="人善真的被人欺？"><a href="#人善真的被人欺？" class="headerlink" title="人善真的被人欺？"></a>人善真的被人欺？</h1><p>其实我们大家早就听说过人善被人欺，可能大家也经历过，最近我也经历了一次，那么就听我细细到来吧！</p><p>事情起因是这样的，由于租的房子漏水了，然后联系了房屋中介，中介就联系了物业，中介说：“物业在吃饭，一会来”。我就开始等待，等了40分钟还是没有人来，这时候我又打过去，中介说：“物业不来了”，然后我就说怎么会这样，刚刚还说来的，然后此时媳妇，开始抢过手机说：</p><p>“我在你这租的房子你为什么不管？”。</p><p>物业说：“我一直在打电话，打了1个小时了”。</p><p>媳妇说：“我管你打几个小时，人来了吗？你解决问题了吗？”。</p><p>物业说：“你什么意思？我一直在打呀！”。</p><p>媳妇说：“我在你这租的房子，你就得解决问题，半天了也叫不来物业”。</p><p>物业说：“我给你手机号你自己叫行不”</p><p>媳妇说：“那我租你的房子交的钱是干嘛的？”</p><p>然后媳妇就挂了。</p><p>也是一会物业就发消息说：“物业一会就到了！”</p><p>也是等了大概10分钟，物业来了！</p><p>整个事情背后，媳妇说：“你还是心太软，你怎么就不厉害点！，他就是没做好，你应该理直气壮的质问他！”。</p><p>其实我也想那时候我觉得大家都不容易就比较心平气和说了，后来想想也确实，你不狠点这世界也没人会可伶你，所以就说：“如果，你占理！还是要语气上占上风！”。</p><p>所以人善被人欺，或许是真的，但是也是建立在我们有理的时候，还是也不能太可怜别人，因为他不一定可怜你！</p><img src="/2024/07/29/%E8%84%BE%E6%B0%94/11.jpg" class="">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
      <category>2024年随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>随笔</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python JsonPath介绍</title>
    <link href="/2024/07/24/jsonpath/"/>
    <url>/2024/07/24/jsonpath/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-JsonPath介绍"><a href="#Python-JsonPath介绍" class="headerlink" title="Python JsonPath介绍"></a>Python JsonPath介绍</h1><p>JsonPath 是一种用于JSON数据的查询语言，类似于我们使用Xpath在xml一样，都是提供了一种简洁强大的语法来浏览和从复杂的JSON数据结构中提取数据，总之，有了它我们可以更加方便快捷、高效的提取JSON数据。</p><h2 id="JsonPath-语法"><a href="#JsonPath-语法" class="headerlink" title="JsonPath 语法"></a>JsonPath 语法</h2><p>首先可以来看一个表格，也是从互联网上收集过来的，对于两者有很好的对比描述</p><table><thead><tr><th>XPath</th><th>JsonPath</th><th>说明</th></tr></thead><tbody><tr><td>&#x2F;</td><td>$</td><td>文档根元素</td></tr><tr><td>.</td><td>@</td><td>当前元素</td></tr><tr><td>&#x2F;</td><td>.或[]</td><td>匹配下级元素</td></tr><tr><td>..</td><td>N&#x2F;A</td><td>匹配上级元素，JsonPath不支持此操作符</td></tr><tr><td>&#x2F;&#x2F;</td><td>..</td><td>递归匹配所有子元素</td></tr><tr><td>*</td><td>*</td><td>通配符，匹配下级元素</td></tr><tr><td>@</td><td>N&#x2F;A</td><td>匹配属性，JsonPath不支持此操作符</td></tr><tr><td>[]</td><td>[]</td><td>下标运算符，根据索引获取元素，XPath索引从1开始，JsonPath索引从0开始</td></tr><tr><td></td><td></td><td>[,]</td></tr><tr><td>N&#x2F;A</td><td>[start:end:step]</td><td>数据切片操作，XPath不支持</td></tr><tr><td>[]</td><td>?()</td><td>过滤表达式</td></tr><tr><td>N&#x2F;A</td><td>()</td><td>脚本表达式，使用底层脚本引擎，XPath不支持</td></tr><tr><td>()</td><td>N&#x2F;A</td><td>分组，JsonPath不支持</td></tr></tbody></table><p>那么我们可以看到xpath 拥有的功能 JsonPath 基本都可以实现， 只不过他们的具体语法不一样，那么下面我们来具体描述一下！</p><h2 id="JsonPath-实例"><a href="#JsonPath-实例" class="headerlink" title="JsonPath 实例"></a>JsonPath 实例</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bizCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10000</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;innerMsg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;eventsByTournament&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;topLeagues&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;liveCount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;totalCount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;userFavorite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;events&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                        <span class="hljs-punctuation">&#123;</span><br>                            <span class="hljs-attr">&quot;hasTips&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;hasVideo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;eventId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:match:51595857&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;markets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCompetitorLogo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.matchplay.com/static/competitor/5962.png&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCompetitorLogo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.matchplay.com/static/competitor/126304.png&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCompetitor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Lincoln Red Imps&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCompetitor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Qarabag FK&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCompetitorId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:competitor:126304&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCompetitorId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:competitor:5962&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;startTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1721750400000</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;ap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;aet&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeResult&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayResult&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;halfScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0:1&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeScoreWholeMatch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayScoreWholeMatch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCurrentPeriodScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCurrentPeriodScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeScoreInCurrentSection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayScoreInCurrentSection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;currentServer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;matchStatus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;FT&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;remainTimeOfCurrentPeriod&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;eventTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;remainTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;userSubscribed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>                        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-punctuation">&#123;</span><br>                            <span class="hljs-attr">&quot;hasTips&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;hasVideo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;eventId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:match:51595849&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;markets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCompetitorLogo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.matchplay.com/static/competitor/2218.png&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCompetitorLogo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.matchplay.com/static/competitor/3177.png&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCompetitor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Shamrock Rovers&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCompetitor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Sparta Prague&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCompetitorId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:competitor:3177&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCompetitorId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:competitor:2218&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;startTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1721761200000</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;ap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;aet&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeResult&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayResult&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;halfScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0:1&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeScoreWholeMatch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayScoreWholeMatch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCurrentPeriodScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCurrentPeriodScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeScoreInCurrentSection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayScoreInCurrentSection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;currentServer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;matchStatus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;FT&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;remainTimeOfCurrentPeriod&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;eventTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;remainTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;userSubscribed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>                        <span class="hljs-punctuation">&#125;</span><br>                    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;hasVideo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;categoryLogo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.matchplay.com/static/manage-sport/ac294391-25db-4ca7-a516-4d5c1da9f696.png&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;International Clubs&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;categoryId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:category:393&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;sportId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:sport:1&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;tournamentId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:tournament:7&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;tournament&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;UEFA Champions League&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;liveCount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;totalCount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;userFavorite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;events&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                        <span class="hljs-punctuation">&#123;</span><br>                            <span class="hljs-attr">&quot;hasTips&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;hasVideo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;eventId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:match:46655705&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;markets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCompetitorLogo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.matchplay.com/static/competitor/3216.png&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCompetitorLogo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.matchplay.com/static/competitor/191648.png&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCompetitor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Deportivo Riestra&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCompetitor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Argentinos Juniors&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCompetitorId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:competitor:191648&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCompetitorId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:competitor:3216&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;startTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1721757600000</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;ap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;aet&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeResult&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayResult&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;halfScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0:0&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeScoreWholeMatch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayScoreWholeMatch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCurrentPeriodScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCurrentPeriodScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeScoreInCurrentSection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayScoreInCurrentSection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;currentServer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;matchStatus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;FT&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;remainTimeOfCurrentPeriod&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;eventTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;remainTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;userSubscribed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>                        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-punctuation">&#123;</span><br>                            <span class="hljs-attr">&quot;hasTips&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;hasVideo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;eventId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:match:46655717&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;markets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCompetitorLogo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.matchplay.com/static/competitor/3201.png&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCompetitorLogo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.matchplay.com/static/competitor/3205.png&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCompetitor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Gimnasia Y Esgrima La Plata&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCompetitor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CA San Lorenzo de Almagro&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCompetitorId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:competitor:3205&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCompetitorId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:competitor:3201&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;startTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1721771100000</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;ap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;aet&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeResult&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayResult&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;halfScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0:1&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeScoreWholeMatch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayScoreWholeMatch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeCurrentPeriodScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayCurrentPeriodScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;homeScoreInCurrentSection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;awayScoreInCurrentSection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;currentServer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;matchStatus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;FT&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;remainTimeOfCurrentPeriod&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;eventTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;remainTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;userSubscribed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>                        <span class="hljs-punctuation">&#125;</span><br>                    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;hasVideo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;categoryLogo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.matchplay.com/static/manage-sport/ecf033b1-8831-4961-aea1-832b8095f78e.png&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Argentina&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;categoryId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:category:48&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;sportId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:sport:1&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;tournamentId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:tournament:155&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;tournament&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Liga Profesional&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;allLeagues&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;liveCount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;totalCount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;userFavorite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;eventsByGroup&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;hasVideo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;categoryLogo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.matchplay.com/static/manage-sport/ecf033b1-8831-4961-aea1-832b8095f78e.png&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Argentina&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;categoryId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:category:48&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;sportId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:sport:1&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;tournamentId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:tournament:155&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;tournament&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Liga Profesional&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;liveCount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;totalCount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;userFavorite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;eventsByGroup&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;hasVideo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;categoryLogo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.matchplay.com/static/manage-sport/3c89bcbc-c186-4b9c-ab56-0cca81dc7cf2.png&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Australia&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;categoryId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:category:34&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;sportId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:sport:1&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;tournamentId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sr:tournament:1268&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;tournament&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Queensland NPL&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;eventsByTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>查找出当前bizCode的值：</p><p>我们可以使用： $.bizCode 来去取到，$ 表示根目录 . 下一级 bizCode 对应的key</p><img src="/2024/07/24/jsonpath/jsonpath3.png" class=""><p>查找出当前topLeagues下的所有数据：</p><p>我们可以使用： $..topLeagues 来去取到，$ 表示根目录，.. 表示递归匹配所有子元素，也就是取到所有的topLeagues的信息</p><img src="/2024/07/24/jsonpath/jsonpath1.png" class=""><p>查找出allLeagues里面第一个数据段的sportId</p><p>我们可以使用： $..allLeagues[0][‘sportId’] $ 表示根目录，.. 表示递归匹配所有子元素，也就是取到所有的topLeagues的信息 其中[0] 表示提取列表中的第一个，[‘sportId’]表示对应的字段信息</p><img src="/2024/07/24/jsonpath/jsonpath2.png" class=""><p>大家可以在这个网站上体验在线提取信息：<a href="https://jsonpath.com/">https://jsonpath.com/</a></p><p>我想经过上面的案例你已经掌握了具体取出值的语法，那么在python中怎么应用呢？假如我们写一个接口测试，我们还用上面的举例，比如此时我要断言当前返回的bizCode是否是10000，因为我们可以自己定义业务code，假设10000 是正常的业务码，那么我们怎么应用呢？</p><h2 id="Python中应用-JsonPath"><a href="#Python中应用-JsonPath" class="headerlink" title="Python中应用 JsonPath"></a>Python中应用 JsonPath</h2><p>那么我们想要提取bizCode的话可以这么做， 首先执行安装第三方的包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install jsonpath<br></code></pre></td></tr></table></figure><p>python 代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jsonpath<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">assert_json</span>(<span class="hljs-params">data,key</span>):<br>    data = json.loads(data)<br>    assert_value = jsonpath.jsonpath(data, key)<br>    <span class="hljs-keyword">if</span> assert_value == <span class="hljs-number">10000</span>:<br>        <span class="hljs-keyword">return</span> assert_value<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>assert_json(data=biz_json, key=<span class="hljs-string">&#x27;$.bizCode&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>上面的代码写了一个方法，需要传入一个json和一个jsonpath语法。jsonpath.jsonpath(data,key) 如果函数未找到返回False, 找到则返回对应的值。那么我们在做接口断言的时候我们就可以轻松的实现对应具体的信息进行测试。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>大家可以看出其实这个还是很简单的，只要我们掌握了这些知识，就可以使得我们在工作中的效率大大提升！</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python JsonPath介绍</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 深拷贝浅拷贝</title>
    <link href="/2024/07/22/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <url>/2024/07/22/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-深拷贝浅拷贝"><a href="#Python-深拷贝浅拷贝" class="headerlink" title="Python 深拷贝浅拷贝"></a>Python 深拷贝浅拷贝</h1><p>大家肯定在学习Python基础知识的时候，已经学过这个了。但是我为什么写在这里呢？因为这里涉及到的知识不仅是深拷贝和浅拷贝还有我们的可变数据结构以及不可变数据结构，说到这个可能大家就会有点陌生了，这又是什么呢？有什么联系呢？那么一起来学习吧！</p><h2 id="深拷贝浅拷贝"><a href="#深拷贝浅拷贝" class="headerlink" title="深拷贝浅拷贝"></a>深拷贝浅拷贝</h2><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>在Python 中我们经常会听见深拷贝和浅拷贝的概念，那么什么是浅拷贝呢？ 下面代码来演示！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>b = a<br><span class="hljs-built_in">print</span>(a==b) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b) <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><p>大家可以从上面的代码中看到，声明了一个列表变量名字为a, 然后将 a 赋值给了 b， 这时候我们查看 a&#x3D;&#x3D;b  a is b 可以看出打印出来的都是true, 那么下面我会进行其他的操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>b = a<br><span class="hljs-built_in">print</span>(a==b)<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<br><br>a.append(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(a==b) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b) <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><p>我在上面的操作中是在a的列表中添加了一个4，但是此时我在执行 a&#x3D;&#x3D;b， a is b 结果仍旧是True,那么大家思考为什么呢？明明我将[1,2,3]也就是初始的a 赋值给了 b， 但是此时我并再次赋值给b,为何会还是一样的呢？那么就是我们要说的浅拷贝了。</p><p>浅拷贝：也就是在内存中重新申请一块，然后存储你浅拷贝的那个对象的地址引用。</p><p>也就是期初在你赋值的时候，b里面存放的是a的内存地址的引用，访问b的时候实际访问的还是a的内存地址，a 和 b 都指向同一个内存对象，当我们修改了a的列表内容的时候，访问b的时候也就会访问到我们最新修改的a。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>b = a<br><span class="hljs-built_in">print</span>(a==b)<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b) <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a)) <span class="hljs-comment"># 138984912667136</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(b)) <span class="hljs-comment"># 138984912667136</span><br><br>a.append(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(a==b)<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a)) <span class="hljs-comment"># 138984912667136</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(b)) <span class="hljs-comment"># 138984912667136</span><br></code></pre></td></tr></table></figure><p>那么经过上述的查看a,b的内存地址就可以更加了解了，那么下面总结一下：</p><img src="/2024/07/22/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/%E6%B5%85%E6%8B%B7%E8%B4%9D.png" class=""><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>代码演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br><br>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>b = copy.deepcopy(a)<br><span class="hljs-built_in">print</span>(a==b) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b) <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><p>此时我们引入了python自带的copy函数，使用了其中的deepcopy方法，这个方法就是深拷贝，当我们使用这个方法的时候，就和上面的浅拷贝不一样了，我们可以看到a和b 的值依旧是一样的，但是a is b 是False, 这是为什么呢？ 下面我们加两行代码就知道了！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br><br>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>b = copy.deepcopy(a)<br><span class="hljs-built_in">print</span>(a==b)<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a)) <span class="hljs-comment"># 134937665356864</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(b)) <span class="hljs-comment"># 134937667268096</span><br></code></pre></td></tr></table></figure><p>那么到这里我相信很多同学已经明白了深拷贝与浅拷贝的不同之处了！</p><p>深拷贝：声明的内存中真正的存储被拷贝的值，不在引用源数据的内存地址。</p><p>那么我们在使用深拷贝的时候就是真正的复制了值到了b中，a和b 也就完全独立了互不影响！可以通过下面的代码来看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br><br>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>b = copy.deepcopy(a)<br><span class="hljs-built_in">print</span>(a==b)<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a)) <span class="hljs-comment"># 134937665356864</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(b)) <span class="hljs-comment"># 134937667268096</span><br><br>a.append(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(a==b) <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b) <span class="hljs-comment"># False</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a)) <span class="hljs-comment"># 134937665356864</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(b)) <span class="hljs-comment"># 134937667268096</span><br></code></pre></td></tr></table></figure><p>那么到此我想你已经明白了深拷贝的含义了！那么刚刚我提到的 可变数据结构 和 不可变数据结构 和这个深拷贝和浅拷贝有什么关系呢？那就让我们一起继续学习吧！</p><h2 id="可变数据结构和不可变数据结构"><a href="#可变数据结构和不可变数据结构" class="headerlink" title="可变数据结构和不可变数据结构"></a>可变数据结构和不可变数据结构</h2><h3 id="可变数据结构"><a href="#可变数据结构" class="headerlink" title="可变数据结构"></a>可变数据结构</h3><p>可变数据结构顾名思义就是这个数据结构可以被改变，比如你可以增加，修改，删除元素。</p><p>那么在python 中可变数据结构有以下几种：</p><ul><li><p><strong>列表（list）</strong>：列表是最常用的可变数据结构之一。你可以向列表中添加、删除或更改元素。</p></li><li><p><strong>字典（dict）</strong>：字典存储键值对，其中键必须是唯一的且不可变（通常是字符串或数字），但值可以是任何数据类型，包括可变类型。你可以添加、删除或更改字典中的键值对。</p></li><li><p><strong>集合（set）</strong> 和 <strong>可变集合（mutable set）</strong>：集合是一个无序的不重复元素集。Python中的集合默认就是可变的，你可以向集合中添加或删除元素，但不能直接修改元素（因为集合的元素必须是唯一的，并且通常是不可变的）。</p></li><li><p><strong>列表推导式、字典推导式等</strong> 生成的数据结构类型（根据推导式的内容，可以是列表、字典等），其可变性取决于推导出的数据结构类型。</p></li></ul><p>在刚刚的浅拷贝例子中就可以看到，我们修改了列表中的元素新增了一个，你也可以执行删除，修改等操作。对于字典，集合， 推导式等都可以做到增删更新操作，这里不在介绍基本的python语法，不太了解的可以自己搜索一下！</p><h3 id="不可变的数据结构"><a href="#不可变的数据结构" class="headerlink" title="不可变的数据结构"></a>不可变的数据结构</h3><p>那么不可变的数据结构就是不允许被更改，比如修改，增加，删除等操作。</p><p>那么python中有以下不可变的数据结构：</p><ul><li><p><strong>整数（int）</strong> 和 <strong>浮点数（float）</strong>：这些基本数据类型是不可变的，你不能改变一个整数或浮点数的值。</p></li><li><p><strong>字符串（str）</strong>：字符串在Python中是不可变的。如果你尝试修改字符串中的某个字符，比如通过索引赋值，Python会抛出一个TypeError。相反，你需要创建一个新的字符串。</p></li><li><p><strong>元组（tuple）</strong>：元组也是不可变的。一旦你创建了一个元组，你就不能更改它的元素（尽管如果元组中的元素是可变的，比如列表，你可以修改列表的元素，但元组的结构本身——即元素的顺序和数量——是不可变的）。</p></li></ul><p>以上的数据结构是无法更改内容的，也就是不可变的数据结构，下面代码解释：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;1&#x27;</span><br>b = a<br><span class="hljs-built_in">print</span>(a==b) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b) <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><p>那么，我们以字符类型举例，可见我还是我们赋值给了b，两者也是相同的值，相同的内存地址，那么如果我此时修改a的内容会引发什么呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;1&#x27;</span><br>b = a<br><span class="hljs-built_in">print</span>(a==b)<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<br><br>a = <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-built_in">print</span>(a==b) <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b) <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><p>这时可能有同学就会有疑问了，哎，怎么上面刚刚说完浅拷贝如果改了会都发生变化呀，哈哈，这里其实浅拷贝对应如果是可变的数据结构是可以的，但是如果对应到不可变数据结构就不行了，因为我们的数据结构已经定义了不能被改变，所以这就是为什么要将深拷贝浅拷贝和可变数据结构以及不可变结构放在一起介绍的原因。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;1&#x27;</span><br>b = a<br><span class="hljs-built_in">print</span>(a==b)<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a)) <span class="hljs-comment"># 135575780975872</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(b)) <span class="hljs-comment"># 135575780975872</span><br><br>a = <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-built_in">print</span>(a==b)<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a)) <span class="hljs-comment"># 135575780975928</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(b)) <span class="hljs-comment"># 135575780975872</span><br></code></pre></td></tr></table></figure><p>根据上面的例子你会发现，浅拷贝的意义依然是存在的，我们可以看到b的内存与起初a的是一样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br>a = <span class="hljs-string">&#x27;1&#x27;</span><br>b = copy.deepcopy(a)<br><span class="hljs-built_in">print</span>(a==b)<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a)) <span class="hljs-comment"># 133333075571968</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(b)) <span class="hljs-comment"># 133333075571968</span><br><br>a = <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-built_in">print</span>(a==b)<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a)) <span class="hljs-comment"># 133333075572024</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(b)) <span class="hljs-comment"># 133333075571968</span><br></code></pre></td></tr></table></figure><p>从上面的例子也可以发现，即使我们使用了深拷贝，b 也依旧保存的是 a 的内存地址，当a 发生了变化b 也不会发生变化。</p><p>那么 我再将上面的可变数据结构的例子放在一起对比一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>b = copy.deepcopy(a)<br><span class="hljs-built_in">print</span>(a==b)<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a)) <span class="hljs-comment"># 134937665356864</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(b)) <span class="hljs-comment"># 134937667268096</span><br><br>a.append(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(a==b) <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b) <span class="hljs-comment"># False</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a)) <span class="hljs-comment"># 134937665356864</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(b)) <span class="hljs-comment"># 134937667268096</span><br></code></pre></td></tr></table></figure><p>那么我们可以发现，在可变数据结构中当我们深拷贝a的时候 此时 a,b的内存地址是不一样的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>深拷贝 和 浅拷贝 在面对可变和不可变的数据结构的时候，对应的表现是不一样的，所以我们要掌握可变数据结构和不可变数据结构，在编写程序的时候选择对应的数据结构才能使得我们的程序更加健壮！</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 深拷贝浅拷贝</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你认为的</title>
    <link href="/2024/07/15/%E4%BD%A0%E8%AE%A4%E4%B8%BA%E7%9A%84/"/>
    <url>/2024/07/15/%E4%BD%A0%E8%AE%A4%E4%B8%BA%E7%9A%84/</url>
    
    <content type="html"><![CDATA[<h1 id="你认为的"><a href="#你认为的" class="headerlink" title="你认为的"></a>你认为的</h1><p>最近，突然发现一种不一样的感觉，其实这也不能说最近，应该是一直都有，只是最近的感觉越来越浓烈，也不知道是工作原因还是生活上的原因，就是你认为的不一定是对的，听到的看到的也不一定是真的！</p><p>可能很多朋友会觉得这啥意思，就拿例子来举证，最近的粮油里面添加了矿油，第一开始我听到这个事件的时候，我会觉得怎么可以这样，没有一丝的对食品安全的敬畏之心，对国家部门的失望，也会加入声讨的队伍中，但是后来我又发现了有人从不一样的角度解析了这件事情，说这个油为什么没说最终运往了哪里呢？在化工领域也会存在大豆油的使用，会不会是去了化工类的公司呢？记者是否在制造舆论呢？</p><p>种种分析让我开始又站在了这一面，这时候其实我也矛盾了，开始仔细的想这件事情，为什么我们在没看到是事实的时候总会听信一件事，然后发表自己的言论，当另一种观点出现的时候又被折服，换到工作中，生活中也是一样，老人对你说坏的东西可以吃点好的那部分，然后扔掉！医生告诉你不能吃，我们不好好学习，长大就会没出息，也有人说你看谁谁家孩子都没上学现在都是老板了！</p><p>这样的声音随着我长大会听的越来越多，所以我总结不管在生活中还是工作中，当听到某一件事情的时候如果涉及到了一些负面评论或利益关系，首先不要着急的听取一方的话，然后下决定，要多看多观察多思考，听听不一样的声音，总会让你对事情了解的更彻底，这样再去采取对应的措施去解决，会比你第一开始就扎进去来的好的多！</p><p>随着年龄的增长，我们的见识，思想，处理方式都会发生变化，在面对不一样的事情的时候多多听听不同角度的声音，我想这总是好的，你认为呢？</p><img src="/2024/07/15/%E4%BD%A0%E8%AE%A4%E4%B8%BA%E7%9A%84/you.jpeg" class="">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
      <category>2024年随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>随笔</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python __init__.py 的介绍</title>
    <link href="/2024/07/15/init%E6%96%B9%E6%B3%95/"/>
    <url>/2024/07/15/init%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-init-py-的介绍"><a href="#Python-init-py-的介绍" class="headerlink" title="Python__init__.py 的介绍"></a>Python__init__.py 的介绍</h1><p>大家在平常的时候都会看到__init__.py这个文件，但是大家知道这个__init__.py实际上拥有很多功能，那么你知道那些呢？一起来看看吧！</p><h2 id="什么是-init-py"><a href="#什么是-init-py" class="headerlink" title="什么是__init__.py?"></a>什么是__init__.py?</h2><p>在Python中，<strong>init</strong>.py 通常用来声明这是一个paython package, 但是不是一个普通的文件，有了它Python就可以正确导入和使用该目录下的模块和子文件。</p><h2 id="标识文件夹是Python-Package"><a href="#标识文件夹是Python-Package" class="headerlink" title="标识文件夹是Python Package"></a>标识文件夹是Python Package</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">demo/<br>    --__init__.py<br>    --demo.py<br></code></pre></td></tr></table></figure><h2 id="可以赋予一些初始化想要做的功能"><a href="#可以赋予一些初始化想要做的功能" class="headerlink" title="可以赋予一些初始化想要做的功能"></a>可以赋予一些初始化想要做的功能</h2><p>当我们在写项目的时候，有时候需要log记录，那么我们只需在 __init__的文件中声明即可在程序启动的时候进行初始化，无需在某个文件中再次导入初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># demo/__init__.py</span><br><br><span class="hljs-keyword">from</span> demo.logs <span class="hljs-keyword">import</span> logger<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_logs</span>():<br>    logger().get_loger()<br></code></pre></td></tr></table></figure><p>那么在本目录下我们只需要</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> get_logger()<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">run_case</span>():<br>    logger().info(<span class="hljs-string">&quot;这是一个log&quot;</span>)<br>    <span class="hljs-keyword">pass</span><br>    <br></code></pre></td></tr></table></figure><h2 id="控制import-下导入的模块"><a href="#控制import-下导入的模块" class="headerlink" title="控制import * 下导入的模块"></a>控制import * 下导入的模块</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">demo/<br>    --__init__.py<br>    --demo1.py<br>    --demo2.py<br>    --demo3.py<br></code></pre></td></tr></table></figure><p>假如我们在目录下有个demo4.py 想要使用import *(原则上不推荐这么导入包，最好指定包名)，但是不想导入demo3里面的内容，那么我就可以在__init__.py文件内定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">demo/__init__.py<br>    __all__ = [<span class="hljs-string">&#x27;demo1&#x27;</span>, <span class="hljs-string">&#x27;demo2&#x27;</span>]<br></code></pre></td></tr></table></figure><p>当你执行 import * 的时候只会导入 demo1, demo2 的内容。或者在__init__ 文件下定义需要导入的函数名称，包含子函数的递归等。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在Python中，<strong>init</strong>.py 文件是一个特殊的文件，它存在于Python包的目录中。Python通过__init__.py文件来识别目录是否应该被视为一个Python包（package）。当一个目录包含__init__.py文件时，Python解释器就会将该目录视为一个Python包，允许你通过import语句来导入该目录下的模块或子包。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python __init__.py 的介绍</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Pytest的接口测试框架</title>
    <link href="/2024/07/12/pytest%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <url>/2024/07/12/pytest%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="基于Pytest的接口测试框架"><a href="#基于Pytest的接口测试框架" class="headerlink" title="基于Pytest的接口测试框架"></a>基于Pytest的接口测试框架</h1><p>这是一款基于pytest框架的开源测试框架,功能涵盖请求体保存, allure生成, log生成, 全局变量存储, 全局变量使用, 断言返回体 等多种功能组合</p><p>github地址是：<a href="https://github.com/dreamshao/pytest-autotest-interface">https://github.com/dreamshao/pytest-autotest-interface</a></p><h2 id="详细介绍"><a href="#详细介绍" class="headerlink" title="详细介绍"></a>详细介绍</h2><pre><code class="hljs">框架图：  —接口自动化测试     --allure_report     --allure-results     --BaseRequests       ---__init__.py       ---BaseRequests.py     --Data       ---data.db       ---data.xlsx       ---sqlite 可视化安装包       ---read_data.py     --logs     --RequestObject       ---request_runner.py     --TestCases       -- 测试用例     --Utils       --json_assert.py       --logger.py       --replace_requests.py       --variable_handler.py      --man.py      --requirements.txt</code></pre><h2 id="开始前必须了解的东西"><a href="#开始前必须了解的东西" class="headerlink" title="开始前必须了解的东西"></a>开始前必须了解的东西</h2><h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><p>数据存储用到了sqlite，这个轻量级的数据库，无需额外安装第三方的包，也没有mysql那么大对资源要求低，当然也支持excel，里面也封装好了数据。</p><p>支持运行生成sql 的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data_from_sqlite</span>(<span class="hljs-params">self, sql_command, name, sql_db_path=<span class="hljs-literal">None</span>, query_sql_type=<span class="hljs-literal">False</span></span>):<br>    <span class="hljs-keyword">try</span>:<br>        cur = self.connect_sqlite(name)<br>        <span class="hljs-keyword">if</span> query_sql_type:<br>            <span class="hljs-keyword">if</span> cur:<br>                logger.info(<span class="hljs-string">f&quot;执行查询操作 执行语句是 <span class="hljs-subst">&#123;sql_command&#125;</span>&quot;</span>)<br>                cur[<span class="hljs-number">0</span>].execute(sql_command)<br>                re = cur[<span class="hljs-number">0</span>].fetchall()<br>                <span class="hljs-built_in">print</span>(re)<br>                <span class="hljs-comment"># 关闭Cursor</span><br>                cur[<span class="hljs-number">0</span>].close()<br>                <span class="hljs-comment"># 关闭conn</span><br>                cur[<span class="hljs-number">1</span>].close()<br>                list_of_re = [[item <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> tup] <span class="hljs-keyword">for</span> tup <span class="hljs-keyword">in</span> re]<br>                logger.info(<span class="hljs-string">f&quot;执行查询操作 成功返回的数据是 <span class="hljs-subst">&#123;list_of_re&#125;</span>&quot;</span>)<br>                <span class="hljs-keyword">return</span> list_of_re<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> cur:<br>                logger.info(<span class="hljs-string">f&quot;执行非查询操作 执行语句是 <span class="hljs-subst">&#123;sql_command&#125;</span>&quot;</span>)<br>                cur[<span class="hljs-number">0</span>].execute(sql_command)<br>                cur[<span class="hljs-number">1</span>].commit()<br>                <span class="hljs-comment"># 关闭Cursor</span><br>                cur[<span class="hljs-number">0</span>].close()<br>                <span class="hljs-comment"># 关闭conn</span><br>                cur[<span class="hljs-number">1</span>].close()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        logger.info(<span class="hljs-string">f&quot;创建数据库失败,具体原因是 <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>其中要传入sql_command 是sql语句，name 是 数据库名字，query_sql_type 是要确定是你要查询还是 增删改 数据 查询传递True，其余就是False</p><p>这里也准备了sqlite的可是化安装包，不过是windows，这个网络很多也可以自己下载</p><img src="/2024/07/12/pytest%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/sqlite%E5%8F%AF%E8%A7%86%E5%8C%96.png" class=""><p>数据库的表目前有两个，分别是： requests, variable</p><p>requests: 存储请求信息断言信息等。</p><img src="/2024/07/12/pytest%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/requests%E8%A1%A8.png" class=""><p>variable 存储变量信息。</p><img src="/2024/07/12/pytest%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/variable%E8%A1%A8.png" class=""><h3 id="数据断言及变量获取"><a href="#数据断言及变量获取" class="headerlink" title="数据断言及变量获取"></a>数据断言及变量获取</h3><p>这里都用到了一个东西叫jsonpath，这里不知道的可以自己查询一下，稍后我也会更新关于jsonpath的文章，将连接填写到这里方便查看</p><p>文章已经更新： 关于jsonpath的文章地址：<a href="https://8888666.top/2024/07/24/jsonpath/">https://8888666.top/2024/07/24/jsonpath/</a> </p><p>可以看一下已经存储的jsonpath：</p><img src="/2024/07/12/pytest%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/jsonpath.png" class=""><h3 id="报告及log"><a href="#报告及log" class="headerlink" title="报告及log"></a>报告及log</h3><p>报告生成采用的allure，allure report 目前没有保存旧的报告，可以去掉相关代码，实现旧的报告存储，log日志生成规则按天生成文件夹，按启动时间生成日志</p><p>allure 报告：</p><img src="/2024/07/12/pytest%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/allure%E6%8A%A5%E5%91%8A.png" class=""><img src="/2024/07/12/pytest%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/allure%E6%8A%A5%E5%91%8A2.png" class=""><p>log 日志：</p><img src="/2024/07/12/pytest%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/log.png" class=""><h2 id="具体封装逻辑及操作详解"><a href="#具体封装逻辑及操作详解" class="headerlink" title="具体封装逻辑及操作详解"></a>具体封装逻辑及操作详解</h2><h3 id="基本请求封装"><a href="#基本请求封装" class="headerlink" title="基本请求封装"></a>基本请求封装</h3><p>我们的接口请求一般都是GET, POST, PUT, DELETE这四种较为常见, 目前就是封装了这四种 具体的文件是 BaseRequests 下的 BaseRequests.py文件</p><p>举例 按照 GET 请求讲解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_request</span>(<span class="hljs-params">self, url, params=<span class="hljs-literal">None</span>, headers=<span class="hljs-literal">None</span></span>):<br>       <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">       get 请求</span><br><span class="hljs-string">       :param url: 请求url</span><br><span class="hljs-string">       :param params: 请求入参</span><br><span class="hljs-string">       :param headers: 请求头</span><br><span class="hljs-string">       :return: Boolean</span><br><span class="hljs-string">       &quot;&quot;&quot;</span><br>       <span class="hljs-keyword">try</span>:<br>           logger.info(<span class="hljs-string">f&quot;开始进入get请求, 当前请求url是<span class="hljs-subst">&#123;url&#125;</span>, params是<span class="hljs-subst">&#123;params&#125;</span>, headers是<span class="hljs-subst">&#123;headers&#125;</span>&quot;</span>)<br>           result = requests.get(url=url, params=params, headers=headers)<br>           <span class="hljs-keyword">if</span> result.status_code == <span class="hljs-number">200</span>:<br>               logger.info(<span class="hljs-string">f&#x27;当前请求成功，返回的http_code是 200, 返回结果是 <span class="hljs-subst">&#123;result.text&#125;</span>&#x27;</span>)<br>               <span class="hljs-keyword">return</span> result.text<br>           <span class="hljs-keyword">else</span>:<br>               logger.info(<span class="hljs-string">f&#x27;当前返回出现了问题，返回的http_code是<span class="hljs-subst">&#123;result.status_code&#125;</span>,返回的信息是<span class="hljs-subst">&#123;result.text&#125;</span>&#x27;</span>)<br>               <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>       <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>           logger.info(<span class="hljs-string">f&quot;当前请求出现了问题，请求方式是 GET, 地址是 <span class="hljs-subst">&#123;url&#125;</span>, params是<span class="hljs-subst">&#123;params&#125;</span>, headers是<span class="hljs-subst">&#123;headers&#125;</span>, 出现的问题是 <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>这里首先封装了一个基础请求也就是把我们的requests下的get请求进行了简单封装，判断了返回的httpcode是否是200，返回布尔值。</p><h3 id="更进一步的封装一个get请求"><a href="#更进一步的封装一个get请求" class="headerlink" title="更进一步的封装一个get请求"></a>更进一步的封装一个get请求</h3><p>我的思路是在封装的时候最底层的最少接触业务层代码，所以在 RequestObject 下重新二次封装业务信息的 request_runner.py</p><p>举例 按照 POST 请求讲解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">post_request_runner</span>(<span class="hljs-params">self, <span class="hljs-built_in">id</span>, replace_type=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">     post请求</span><br><span class="hljs-string">    :param id: id: 数据库用例Id</span><br><span class="hljs-string">    :param replace_type: replace_type: 替换类型 1：url 替换 2：data 替换 默认None 不替换</span><br><span class="hljs-string">    :return: 失败 False 成功 dict</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    logger.info(<span class="hljs-string">&quot;当前进入post测试用例中&quot;</span>)<br>    <span class="hljs-keyword">if</span> replace_type == <span class="hljs-number">1</span>:<br>        self.url = Replace_Request(url=self.url).repalce_request_url()<br>    <span class="hljs-keyword">else</span>:<br>        self.data = Replace_Request(data=self.data).replace_request_data()<br>    result = BaseRequests().post_request(url=self.url, headers=json.loads(self.headers), data=self.data)<br>    <span class="hljs-keyword">if</span> result:<br>        result_json = json.loads(result)<br>        DataManger().get_data_from_sqlite(name=<span class="hljs-string">&quot;data&quot;</span>,<br>                                          sql_command=<span class="hljs-string">&quot;UPDATE requests SET response_body = &#x27;&#123;response_body&#125;&#x27; where id = &#123;id&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<br>                                              response_body=json.dumps(result), <span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>),<br>                                          query_sql_type=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">if</span> self.assert_info <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            result = Assert_Json().assert_info(result_json, self.assert_info)<br>            <span class="hljs-keyword">if</span> result:<br>                logger.info(<span class="hljs-string">&quot;测试全部通过&quot;</span>)<br>                <span class="hljs-keyword">return</span> result_json<br>            <span class="hljs-keyword">else</span>:<br>                logger.info(<span class="hljs-string">&quot;测试存在失败&quot;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">else</span>:<br>            logger.info(<span class="hljs-string">&quot;测试全部通过&quot;</span>)<br>            <span class="hljs-keyword">return</span> result_json<br><br>    <span class="hljs-keyword">else</span>:<br>        logger.info(<span class="hljs-string">&quot;当前请求失败&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;失败了！&quot;</span>)<br></code></pre></td></tr></table></figure><p>其中需要传递当前数据库存储的用例id, 以及是否要进行替换，这里说明一下两个参数的作用。</p><p>第一： id 是为了存储当前用例请求返回后存储的值</p><p>第二： replace_type 是为了是否进行替换，在我们流程性请求中我们一般都需要进行整体性的测试，那么我们就需要做到可以拿到上个的某个返回值作为下一个接口的输入值，这<br>      个作用就是这个, 1 是url 进行替换 2 是 data进行替换</p><p>如果需要断言 则是 Assert_Json 这个类 需要传入一个接口返回值， 以及断言的jsponpath</p><p>返回： 成功则是返回接口的返回体，不成功则返回False</p><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><p>我们的测试用例也是只需写部分代码即可完成断言，变量的存储，变量的替换。</p><p>举例：Today 比赛列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@allure.step(<span class="hljs-params"><span class="hljs-string">&quot;Today比赛列表&quot;</span></span>)</span><br><span class="hljs-meta">  @pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&#x27;id, url, method, headers, request_data, params, json, assert_jsonpath, response_body, remarks&#x27;</span>,</span></span><br><span class="hljs-params"><span class="hljs-meta">                           DataManger(<span class="hljs-params"></span>).get_data_from_sqlite(<span class="hljs-params">name=<span class="hljs-string">&quot;data&quot;</span>,sql_command=<span class="hljs-string">&#x27;&#x27;&#x27;select * from requests where id= 2&#x27;&#x27;&#x27;</span>,</span></span></span><br><span class="hljs-params"><span class="hljs-params"><span class="hljs-meta">                                                             query_sql_type=<span class="hljs-literal">True</span></span>)</span>)</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_match_list</span>(<span class="hljs-params">self, <span class="hljs-built_in">id</span>, url, method, headers, request_data, params, json, assert_jsonpath, response_body, remarks</span>):<br>      logger.info(<span class="hljs-string">f&quot;开始测试比赛列表&quot;</span>)<br>      result = Request_Runner(url=url, headers=headers, assert_info=assert_jsonpath).get_request_runner(<span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>)<br>      logger.info(<span class="hljs-string">f&quot;测试结果是 <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>      <span class="hljs-keyword">if</span> result:<br>          Variable_Handler(variable_name=[<span class="hljs-string">&quot;eventid&quot;</span>,<span class="hljs-string">&quot;competitorid&quot;</span>], response_body=result).variable_handler()<br>      <span class="hljs-keyword">assert</span> result <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>这里用了allure报告的setp方法进行标识用例信息，采用了pytest.mark.parametrize的参数化方法，这里是从数据库里面提取数据，当前也支持从excel中提取数据，里面调用了封装的请求方法传递了id,这里还调用了Variable_Handler 这个类， 这里类就是实现存储变量的方法，variable_name 需要传递一个列表，里面是你的变量名称，response_body 是接口返回的值。这样我们就可以将我们需要的变量存储下来。</p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>json_assert.py 是实现 断言的 采用的是 jsonpath 的方法获取对应信息进行对比</p><p>logger.py 是日志的生成</p><p>replace_request.py 是变量的替换，支持url 替换， data 替换</p><p>variable_handler.py 是变量的存储功能</p><h3 id="main-文件"><a href="#main-文件" class="headerlink" title="main 文件"></a>main 文件</h3><p>也就是主文件，用来实现调用pytest以及生成allure报告 </p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-v&#x27;</span>, <span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;--alluredir=allure-results&#x27;</span>, <span class="hljs-string">&#x27;--clean-alluredir&#x27;</span>])<br>    cmd = <span class="hljs-string">&quot;allure generate ./allure-results report --clean&quot;</span><br>    subprocess.run(cmd, shell=<span class="hljs-literal">True</span>)<br>    cmd = <span class="hljs-string">&quot;allure open -h 127.0.0.1 -p 8883 allure-report&quot;</span><br>    subprocess.run(cmd, shell=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h2 id="demo-解析"><a href="#demo-解析" class="headerlink" title="demo 解析"></a>demo 解析</h2><p>当案例中有四个url</p><p>其中包含变量存储 以及 替换的是：remarks 里面的 比赛列表页， 这里存储了两个变量分别是eventid, competitorid。将对应的值保存到variable表中。</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@allure.step(<span class="hljs-params"><span class="hljs-string">&quot;Today比赛列表&quot;</span></span>)</span><br><span class="hljs-meta">  @pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&#x27;id, url, method, headers, request_data, params, json, assert_jsonpath, response_body, remarks&#x27;</span>,</span></span><br><span class="hljs-params"><span class="hljs-meta">                           DataManger(<span class="hljs-params"></span>).get_data_from_sqlite(<span class="hljs-params">name=<span class="hljs-string">&quot;data&quot;</span>,sql_command=<span class="hljs-string">&#x27;&#x27;&#x27;select * from requests where id= 2&#x27;&#x27;&#x27;</span>,</span></span></span><br><span class="hljs-params"><span class="hljs-params"><span class="hljs-meta">                                                             query_sql_type=<span class="hljs-literal">True</span></span>)</span>)</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_match_list</span>(<span class="hljs-params">self, <span class="hljs-built_in">id</span>, url, method, headers, request_data, params, json, assert_jsonpath, response_body, remarks</span>):<br>      logger.info(<span class="hljs-string">f&quot;开始测试比赛列表&quot;</span>)<br>      result = Request_Runner(url=url, headers=headers, assert_info=assert_jsonpath).get_request_runner(<span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>)<br>      logger.info(<span class="hljs-string">f&quot;测试结果是 <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>      <span class="hljs-keyword">if</span> result:<br>          Variable_Handler(variable_name=[<span class="hljs-string">&quot;eventid&quot;</span>,<span class="hljs-string">&quot;competitorid&quot;</span>], response_body=result).variable_handler()<br>      <span class="hljs-keyword">assert</span> result <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>使用变量的是 remarks 是订阅比赛，深度数据 这里分别用到了 url 替换 以及 data 替换。</p><p>代码：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta"> @allure.step(<span class="hljs-params"><span class="hljs-string">&quot;订阅比赛，采用全局变量&quot;</span></span>)</span><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-meta">    <span class="hljs-string">&#x27;id, url, method, headers, request_data, params, json, assert_jsonpath, response_body, remarks&#x27;</span>,</span></span><br><span class="hljs-params"><span class="hljs-meta">    DataManger(<span class="hljs-params"></span>).get_data_from_sqlite(<span class="hljs-params">name=<span class="hljs-string">&quot;data&quot;</span>, sql_command=<span class="hljs-string">&#x27;&#x27;&#x27;select * from requests where id= 4&#x27;&#x27;&#x27;</span>,</span></span></span><br><span class="hljs-params"><span class="hljs-params"><span class="hljs-meta">                                      query_sql_type=<span class="hljs-literal">True</span></span>)</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_match_subscribe_list</span>(<span class="hljs-params">self, <span class="hljs-built_in">id</span>, url, method, headers, request_data, params, json, assert_jsonpath,</span><br><span class="hljs-params">                           response_body,</span><br><span class="hljs-params">                           remarks</span>):<br>    logger.info(<span class="hljs-string">f&quot;订阅比赛信息&quot;</span>)<br>    result = Request_Runner(url=url, headers=headers, data=request_data, assert_info=assert_jsonpath).post_request_runner(<span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>, replace_type=<span class="hljs-number">1</span>)<br>    logger.info(<span class="hljs-string">f&quot;测试结果是 <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>    <span class="hljs-comment"># if result[0] is True:</span><br>    <span class="hljs-comment">#     Variable_Handler(id=2, variable_name=&quot;eventid&quot;).variable_handler()</span><br>    <span class="hljs-keyword">assert</span> result <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">False</span><br><br><span class="hljs-meta">@allure.step(<span class="hljs-params"><span class="hljs-string">&quot;深度数据，采用全局变量&quot;</span></span>)</span><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-meta">    <span class="hljs-string">&#x27;id, url, method, headers, request_data, params, json, assert_jsonpath, response_body, remarks&#x27;</span>,</span></span><br><span class="hljs-params"><span class="hljs-meta">    DataManger(<span class="hljs-params"></span>).get_data_from_sqlite(<span class="hljs-params">name=<span class="hljs-string">&quot;data&quot;</span>, sql_command=<span class="hljs-string">&#x27;&#x27;&#x27;select * from requests where id= 5&#x27;&#x27;&#x27;</span>,</span></span></span><br><span class="hljs-params"><span class="hljs-params"><span class="hljs-meta">                                      query_sql_type=<span class="hljs-literal">True</span></span>)</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_match_subscribe_list</span>(<span class="hljs-params">self, <span class="hljs-built_in">id</span>, url, method, headers, request_data, params, json, assert_jsonpath,</span><br><span class="hljs-params">                              response_body,</span><br><span class="hljs-params">                              remarks</span>):<br>    logger.info(<span class="hljs-string">f&quot;订阅比赛信息&quot;</span>)<br>    result = Request_Runner(url=url, headers=headers, data=request_data,<br>                            assert_info=assert_jsonpath).post_request_runner(<span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>, replace_type=<span class="hljs-number">2</span>)<br>    logger.info(<span class="hljs-string">f&quot;测试结果是 <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">assert</span> result <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>之前我做的是基于Django+vue 的测试开发平台，已经稳定运行了3年+, 最近想要把部分功能用Pytest实现，也就做出了一版，这版肯定有很多不足，欢迎各位大神批评和建议！让我们一起进步努力！</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>接口测试框架</category>
      
      <category>基于Pytest的接口测试框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>pytest</tag>
      
      <tag>接口测试框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个网页集合所有AI访问！</title>
    <link href="/2024/07/04/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    <url>/2024/07/04/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h1 id="AI-生产力工具集合"><a href="#AI-生产力工具集合" class="headerlink" title="AI 生产力工具集合"></a>AI 生产力工具集合</h1><p>在当前AI浪潮下如果你还没使用过AI那你肯定是落伍了，你还在苦于寻找AI网站吗？来这里全部给你做好了！</p><h2 id="ChatGpt-热门"><a href="#ChatGpt-热门" class="headerlink" title="ChatGpt 热门"></a>ChatGpt 热门</h2><p>支持4.0模型和MJ绘画</p><p>超级智能助理 - <a href="https://chaoji.aizhuli.cc/" target="_blank">超级智能助理</a></p><hr><p>国内TOP级AI大模型</p><p>KimiChat - <a href="https://kimi.moonshot.cn/" target="_blank">KimiChat</a></p><hr><p>体验口碑还不错</p><p>讯飞星火 - <a href="https://xinghuo.xfyun.cn/" target="_blank">讯飞星火</a></p><hr><p>清华开源热门大模型</p><p>智谱清言 - <a href="https://chatglm.cn/" target="_blank">智谱清言</a></p><hr><p>阿里出品，国内顶级大模型</p><p>阿里通义千问 - <a href="https://tongyi.aliyun.com/" target="_blank">阿里通义千问</a></p><hr><p>百度出品, 我经常使用</p><p>文心一言 - <a href="https://yiyan.baidu.com/" target="_blank">文心一言</a>></p><hr><p>字节旗下AI大模型</p><p>豆包 - <a href="https://doubao.com" target="_blank">豆包</a></p><h2 id="多种角色AI生产力工具"><a href="#多种角色AI生产力工具" class="headerlink" title="多种角色AI生产力工具"></a>多种角色AI生产力工具</h2><p>官方设计样式，简洁好用</p><p>AI问答复刻版 - <a href="https://m.openaichat.cc/web/" target="_blank">AI问答复刻版</a></p><hr><p>一键生成角色扮演指令</p><p>ChatGPT角色生成器 - <a href="https://role.aicoser.com.cn/zh" target="_blank">ChatGPT角色生成器</a></p><hr><p>一键生成BRTR任务指令模板</p><p>ChatGPT指令生成器 - <a href="https://prompt.aicoser.com.cn/" target="_blank">ChatGPT指令生成器</a></p><hr><p>纯正小红书风，一键轻松创作</p><p>小红书生成器 - <a href="https://ai.xiaohongshu.live/zh" target="_blank">小红书生成器</a></p><hr><p>AI佛祖，在线为你解忧</p><p>AI佛祖 - <a href="https://ask.aifozu.cn/zh" target="_blank">AI佛祖</a></p><hr><p>AI律师，在线咨询法律问题</p><p>AI律所 - <a href="https://ask.ailvsuo.com.cn/zh" target="_blank">AI律所</a></p><hr><p>无脑夸，一定让你开心自信起来！</p><p>AI夸夸 - <a href="https://me.aikuakua.cn/zh" target="_blank">AI夸夸</a></p><hr><p>支持上百种文档报告和流程图</p><p>多墨智能 - <a href="https://duomosmart.com/" target="_blank">多墨智能</a></p><hr><p>通过问答快速制作Excel</p><p>ChatExcel - <a href="https://chatexcel.com/" target="_blank">ChatExcel</a></p><hr><p>通过问答快速制作PPT</p><p>ChatPPT - <a href="https://chatppt.yoo-ai.com/" target="_blank">ChatPPT</a></p><hr><p>一键总结B站视频内容</p><p>BiliGPT - <a href="https://b.jimmylv.cn/" target="_blank">BiliGPT</a></p><h2 id="国内新生势力AI"><a href="#国内新生势力AI" class="headerlink" title="国内新生势力AI"></a>国内新生势力AI</h2><p>非常好用的AI搜索工具</p><p>秘塔AI搜索 - <a href="https://metaso.cn/" target="_blank">秘塔AI搜索</a></p><hr><p>腾讯旗下AI大模型</p><p>腾讯元宝 - <a href="https://yuanbao.tencent.com" target="_blank">腾讯元宝</a></p><hr><p>百川智能旗下AI大模型</p><p>百小应AI - <a href="https://ying.baichuan-ai.com/" target="_blank">百小应AI</a></p><hr><p>零代码生成AI应用，支持模型训练</p><p>Zelinai - <a href="https://www.zelinai.com/" target="_blank">Zelinai</a></p><hr><p>[内测]定制语料训练的机器人，百姓AI出品</p><p>Chato - <a href="https://chato.cn/" target="_blank">Chato</a></p><hr><p>商汤老牌AI</p><p>商汤日日新 - <a href="https://techday.sensetime.com/" target="_blank">商汤日日新</a></p><hr><p>昆仑</p><p>昆仑天工大模型 - <a href="https://tiangong.kunlun.com/" target="_blank">昆仑天工大模型</a></p><hr><p>复旦团队出品</p><p>Moss大模型 - <a href="https://moss.fastnlp.top/" target="_blank">Moss大模型</a></p><hr><p>MiniMax</p><p>MiniMax大模型 - <a href="https://api.minimax.chat/" target="_blank">MiniMax大模型</a></p><hr><p>提供GPT书本翻译服务，付费</p><p>风声雨声 - <a href="https://fsys.app/" target="_blank">风声雨声</a></p><hr><p>可使用AzureGPT服务</p><p>Mbmzone - <a href="https://openai.mbmzone.com/" target="_blank">Mbmzone</a></p><h2 id="海外ChatGpt"><a href="#海外ChatGpt" class="headerlink" title="海外ChatGpt"></a>海外ChatGpt</h2><p>[海外]chatgpt聊天官网</p><p>ChatGPT官网 - <a href="https://chatgpt.com" target="_blank">ChatGPT官网</a></p><hr><p>AI写作助手，chatgpt的强力竞争者</p><p>Notion AI - <a href="https://www.notion.so/product/ai" target="_blank">Notion AI</a></p><hr><p>[海外]和ChatGPT同样强大的AI大模型</p><p>Claude - <a href="https://www.claude.ai" target="_blank">Claude</a></p><hr><p>[海外]平替，集成gpt、claude等十款机器人</p><p>Poe - <a href="https://poe.com/" target="_blank">Poe</a></p><hr><p>[海外]必应搜索用GPT</p><p>Bing Chat - <a href="https://www.bing.com/" target="_blank">Bing Chat</a></p><hr><p>[海外]用户创建AI角色</p><p>Character AI - <a href="https://beta.character.ai/" target="_blank">Character AI</a></p><hr><p>历史人物Ai对话</p><p>Hellohistory - <a href="https://www.hellohistory.ai/" target="_blank">Hellohistory</a></p><hr><p>虚拟人视频口语练习</p><p>CallAnnie - <a href="https://callannie.ai/" target="_blank">CallAnnie</a></p><hr><p>AI人物语音口语练习</p><p>TalkMe - <a href="https://www.talkme.ai/" target="_blank">TalkMe</a></p><hr><p>GitHub的编程AI神器</p><p>GitHub Copilot - <a href="https://github.com/features/preview/copilot-x" target="_blank">GitHub Copilot</a></p><hr><p>支持上传文件创建助手</p><p>Chatbase - <a href="https://www.chatbase.co/" target="_blank">Chatbase</a></p><hr><p>可创建自己的机器人应用</p><p>Dify - <a href="https://dify.ai/" target="_blank">Dify</a></p><hr><p>微软办公软件接入ChatGPT</p><p>微软Copilot - <a href="https://news.microsoft.com/reinventing-productivity/" target="_blank">微软Copilot</a></p><h2 id="ChatGpt学习"><a href="#ChatGpt学习" class="headerlink" title="ChatGpt学习"></a>ChatGpt学习</h2><p>chatgpt指令，中英双语版本</p><p>Shortcut - <a href="https://www.aishort.top/" target="_blank">Shortcut</a></p><hr><p>ChatGPT中文版角色调教指令大全</p><p>ChatGPT调教指令 - <a href="https://ai.weurl.com.cn/chatgpt-role-prompts/" target="_blank">ChatGPT调教指令</a></p><hr><p>科大讯飞官方出品</p><p>讯飞星火指令大全 - <a href="https://xinghuo.xfyun.cn/instruction" target="_blank">讯飞星火指令大全</a></p><hr><p>台风编写的角色指令三板斧</p><p>ChatGPT角色指令调教指南 - <a href="https://mp.weixin.qq.com/s/ItTOCAYCXWzVo1Tp_AGrqw" target="_blank">ChatGPT角色指令调教指南</a></p><hr><p>提供ChatGPT和MJ教程</p><p>Learningprompt wiki - <a href="https://learningprompt.wiki/" target="_blank">Learningprompt wiki</a></p><hr><p>提供ChatGPT/MJ和SD教程</p><p>Learningprompt pro - <a href="https://www.learnprompt.pro/" target="_blank">Learningprompt pro</a></p><h2 id="ChatGpt插件"><a href="#ChatGpt插件" class="headerlink" title="ChatGpt插件"></a>ChatGpt插件</h2><p>ChatGPT角色指令语法模板</p><p>LangGPT - <a href="https://github.com/yzfly/LangGPT/blob/main/README_zh.md" target="_blank">LangGPT</a></p><hr><p>支持Mac和Win，更稳定方便</p><p>ChatGPT客户端 - <a href="https://github.com/lencx/ChatGPT/releases" target="_blank">ChatGPT客户端</a></p><hr><p>可使用API的ChatGPT客户端</p><p>ChatBox - <a href="https://chatboxapp.xyz/" target="_blank">ChatBox</a></p><hr><p>IOSGPT应用支持输入法</p><p>OpenCat - <a href="https://apps.apple.com/cn/app/opencat/id6445999201" target="_blank">OpenCat</a></p><hr><p>ChatGPT分享会话插件</p><p>ShareGPT插件 - <a href="https://sharegpt.com/" target="_blank">ShareGPT插件</a></p><hr><p>官网服务运行状态查询</p><p>ChatGPT Status - <a href="https://status.openai.com/" target="_blank">ChatGPT Status</a></p><h2 id="AI绘画国内"><a href="#AI绘画国内" class="headerlink" title="AI绘画国内"></a>AI绘画国内</h2><p>拥有数千万用户的AI绘画平台</p><p>意间AI绘画 - <a href="http://portal.yjai.art/" target="_blank">意间AI绘画</a></p><hr><p>可选多个绘画模型</p><p>6Pen - <a href="https://6pen.art/" target="_blank">6Pen</a></p><hr><p>百度出品的AI绘画平台</p><p>文心一格 - <a href="https://yige.baidu.com/" target="_blank">文心一格</a></p><hr><p>西湖心辰公司出品</p><p>造梦日记 - <a href="https://zmrj.art/" target="_blank">造梦日记</a></p><hr><p>稿定设计出品</p><p>稿定AI绘画 - <a href="https://www.gaoding.com/ai" target="_blank">稿定AI绘画</a></p><hr><p>万兴出品</p><p>万兴爱画 - <a href="https://aigc.wondershare.cn/" target="_blank">万兴爱画</a></p><hr><p>站酷出品</p><p>站酷梦笔 - <a href="https://www.zcool.com.cn/ailab" target="_blank">站酷梦笔</a></p><h2 id="海外绘画"><a href="#海外绘画" class="headerlink" title="海外绘画"></a>海外绘画</h2><p>Discod旗下AI绘画工具</p><p>Midjourney - <a href="https://www.midjourney.com/" target="_blank">Midjourney</a></p><hr><p>免费开源的AI绘画模型</p><p>Stable Diffusion - <a href="https://stability.ai/" target="_blank">Stable Diffusion</a></p><hr><p>定制角色剧情AI绘画</p><p>Novel AI - <a href="https://novelai.net/" target="_blank">Novel AI</a></p><hr><p>ChatGPT母公司出品的AI绘画模型</p><p>OpenAI DALL-E - <a href="https://openai.com/product/dall-e-2" target="_blank">OpenAI DALL-E</a></p><hr><p>Adobe出品，开放个人申请</p><p>Adobe Firefly - <a href="https://www.adobe.com/sensei/generative-ai/firefly.html" target="_blank">Adobe Firefly</a></p><hr><p>[海外]微软出品，限地区</p><p>Bing AI图像 - <a href="https://bing.com/create" target="_blank">Bing AI图像</a></p><h2 id="AI绘画资源"><a href="#AI绘画资源" class="headerlink" title="AI绘画资源"></a>AI绘画资源</h2><p>多个模型的提示词建议，实图参考</p><p>Aigallery - <a href="https://www.aigallery.top/" target="_blank">Aigallery</a></p><hr><p>可获取海量图库的提示词</p><p>PromptBase - <a href="https://promptbase.com/" target="_blank">PromptBase</a></p><hr><p>根据文稿自动匹配素材，生成字幕和配音</p><p>一帧秒创 - <a href="https://aigc.yizhentv.com/" target="_blank">一帧秒创</a></p><h2 id="AI-视频创造"><a href="#AI-视频创造" class="headerlink" title="AI 视频创造"></a>AI 视频创造</h2><p>腾讯出品的视频剪辑辅助平台</p><p>腾讯智影 - <a href="https://zenvideo.qq.com/" target="_blank">腾讯智影</a></p><hr><p>阿里达摩院出品，英文生成视频更强</p><p>ModelScope - <a href="https://modelscope.cn/studios/damo/text-to-video-synthesis/summary" target="_blank">ModelScope</a></p>]]></content>
    
    
    <categories>
      
      <category>有趣的网站</category>
      
      <category>AI 网站集合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>有趣的网站</tag>
      
      <tag>AI 网站集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android 测试点总结（长期更新）</title>
    <link href="/2024/07/04/android%E6%B5%8B%E8%AF%95%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <url>/2024/07/04/android%E6%B5%8B%E8%AF%95%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-测试点总结"><a href="#Android-测试点总结" class="headerlink" title="Android 测试点总结"></a>Android 测试点总结</h1><p>我们在日常测试Android的时候需要我们注意很多测试点，那么这些也是我慢慢总结的，当然肯定会有落下的，也希望大家可以补充说明，这个帖子是长期更新的帖子不会在新开帖子介绍，欢迎经常来看！</p><h2 id="WebView-的测试"><a href="#WebView-的测试" class="headerlink" title="WebView 的测试"></a>WebView 的测试</h2><p>为什么首先说这个呢？是因为我们现在很多的APP都会有活动的展示，当然WebView不仅仅是活动哈，像一些临时页，改动很频繁的页面等。在测试WebView 我们首先要关注那些点呢？</p><p>1.WebView 在不同机型上的适配情况</p><p>   WebView 在不同的机型上适配情况是我们要关注的，尤其是支持到了小屏手机或者大屏打开的时候，要关注我们主流的要适配的机型，观察页面布局</p><p>   是否正常展示，信息是否遗漏， 按钮是否可以正常点击等！</p><p>2.WebView 呼起Android 内部页面</p><p>  WebView 会含有跳转等，我们要注意若是跳转到APP内部的短链中，需要着重测试一下。</p><p>3.WebView 渲染速度及占用内存</p><p>  WebView 不应该过于复杂，渲染速度应该较快且占用内存小！</p><h2 id="ANR-测试"><a href="#ANR-测试" class="headerlink" title="ANR 测试"></a>ANR 测试</h2><p>  这里可以看我写的ANR 文章里面有很详细的介绍</p><p>  <a href="http://8888666.top/2024/07/03/adroid%E6%B5%8B%E8%AF%95/">http://8888666.top/2024/07/03/adroid%E6%B5%8B%E8%AF%95/</a></p><h2 id="新老版本的测试"><a href="#新老版本的测试" class="headerlink" title="新老版本的测试"></a>新老版本的测试</h2><p>  在测试Andoid的时候尤其要注意新老版本的测试，如果后台发布了新的功能但是只支持新版本，那么就要做版本控制，或者新版本支持老版使用就要看看是否老版能正常使用！</p><h2 id="兼容性测试"><a href="#兼容性测试" class="headerlink" title="兼容性测试"></a>兼容性测试</h2><p>  这个老生常谈的话题，覆盖你主流机型测试</p><h2 id="专项测试"><a href="#专项测试" class="headerlink" title="专项测试"></a>专项测试</h2><p>  耗电，耗流， 性能， 打开速度， 发烧 等等标准且这个和公司有关系，不是强制！</p><h2 id="SDK测试"><a href="#SDK测试" class="headerlink" title="SDK测试"></a>SDK测试</h2><p>  如果app使用了三方的sdk 那么我们也是要关注的，不能因为三方的问题导致我们出现了问题</p><h2 id="弱网测试"><a href="#弱网测试" class="headerlink" title="弱网测试"></a>弱网测试</h2><p>  测试APP在弱网情况下的表现，各个公司有不同的标准！</p>]]></content>
    
    
    <categories>
      
      <category>测试常见问题</category>
      
      <category>Android</category>
      
      <category>Android 测试点总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>测试知识</tag>
      
      <tag>Android 测试知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android ANR是什么？</title>
    <link href="/2024/07/03/adroid%E6%B5%8B%E8%AF%95/"/>
    <url>/2024/07/03/adroid%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-ANR-是什么呢？"><a href="#Android-ANR-是什么呢？" class="headerlink" title="Android ANR 是什么呢？"></a>Android ANR 是什么呢？</h1><p>在日常测试Android我们会经常听到开发讲述一个专业术语ANR，那么ANR是什么呢？又是什么导致的呢？一起来看看吧！</p><h2 id="什么是ANR？"><a href="#什么是ANR？" class="headerlink" title="什么是ANR？"></a>什么是ANR？</h2><p>ANR,(Application Not Responding) 即应用程序无响应，在android应用中，当我们的UI线程被阻塞，就会弹出如下对话框，用户可以选择继续等待或者关闭这个应用程序,这种现象我们称之为ANR.</p><h2 id="ANR的类型"><a href="#ANR的类型" class="headerlink" title="ANR的类型"></a>ANR的类型</h2><p>一共可以分为三种类型：</p><p>1.主线程对输入事件在5秒内没有处理完毕</p><p>   产生这种ANR的前提是要有输入事件，如果用户没有触发任何输入事件，即便是主线程阻塞了，也不会产生ANR，因为InputDispatcher没有分发事件给应用程序，当然也不会检测处理超时和报告ANR了。</p><p>2.主线程在执行BroadcastReceiver的onReceive函数时10秒内没有执行完毕，后台进程是60秒</p><p>   这种情况的ANR系统不会显示对话框提示，仅是输出log而已。</p><p>3.主线程在执行Service的各个生命周期函数时20秒内没有执行完毕,后台进程为200秒</p><p>   同样对这种情况的ANR系统也不会显示对话框提示，仅是输出log。</p><p>总体来说：</p><table><thead><tr><th>Type</th><th>Method call</th><th>Logsample</th><th>time out</th></tr></thead><tbody><tr><td>Input dispatch</td><td>onClick(),onTouch(),onKeydown(),onKeyup()</td><td>Input dispatching timed out</td><td>5</td></tr><tr><td>Broadcast</td><td>onReceive()</td><td>Timeout of broadcast</td><td>FG: 10, BG 60</td></tr><tr><td>Service</td><td>onBind(),onCreate(),onStartCommand(),onUnbind(),onDestroy()</td><td>Timeout executing service</td><td>FG: 20, BG 200</td></tr></tbody></table><h2 id="ANR产生的原因"><a href="#ANR产生的原因" class="headerlink" title="ANR产生的原因"></a>ANR产生的原因</h2><p>1.应用自身进程引起的问题，比如, 在oncreate ，onstart等生命周期中执行耗时操作，ui线程阻塞，挂起，死循环等</p><p>2.其他进程引起的，比如：io操作导致cpu使用过高，导致当前应用进程无法抢占到cpu时间片</p><h3 id="细分的话可以分为以下一些情况："><a href="#细分的话可以分为以下一些情况：" class="headerlink" title="细分的话可以分为以下一些情况："></a>细分的话可以分为以下一些情况：</h3><p>耗时的网络访问</p><p>大量的数据读写</p><p>数据库操作</p><p>硬件操作（比如camera）</p><p>调用thread的join()方法、sleep()方法、wait()方法或者等待线程锁的时候</p><p>service binder的数量达到上限</p><p>system server中发生WatchDog ANR</p><p>service忙导致超时无响应</p><p>其他线程持有锁，导致主线程等待超时</p><p>其它线程终止或崩溃导致主线程一直等待…</p><h2 id="如何避免ANR"><a href="#如何避免ANR" class="headerlink" title="如何避免ANR"></a>如何避免ANR</h2><p>耗时的工作()比如数据库操作，I&#x2F;O，网络操作，采用单独的工作线程处理</p><p>用Handler来处理UIthread和工作thread的交互</p><p>合理使用 Handler 来处理其他线程请求</p><p>合理使用并遵循 Android 生命周期, 避免在 onCreate() and onResume() 做过多的事情</p><p>使用一些架构形成规范来避免内存等问题,例如：MVP、RxJava</p><p>经常使用工具来检查内存问题,例如:MAT、TraceView、AS 自带等工具</p><p>避免加载大图片引起内存不足导致 ANR</p><p>避免内存泄露引起的 ANR</p>]]></content>
    
    
    <categories>
      
      <category>测试常见问题</category>
      
      <category>Android</category>
      
      <category>Android ANR是什么？</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创、转载</tag>
      
      <tag>测试知识</tag>
      
      <tag>Android 测试知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python url编码</title>
    <link href="/2024/07/03/url%E5%8A%A0%E5%AF%86/"/>
    <url>/2024/07/03/url%E5%8A%A0%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-实现url-编码"><a href="#Python-实现url-编码" class="headerlink" title="Python 实现url 编码"></a>Python 实现url 编码</h1><p>在平常的测试中，我们会遇见在测试某些url 要求传递的是url编码后的信息，那么你可以从本文中学会如何使用url编码。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UrlEncode_infor</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">urlencode_infor</span>(<span class="hljs-params">self,data</span>):<br>        s=data<br>        s_re= urllib.parse.quote(s)<br>        <span class="hljs-keyword">return</span> s_re<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    url_encode=UrlEncode_infor()<br>    s=<span class="hljs-string">&#x27;patron:id:generaltoken:1b9554037ee04463beaeabd81573785e&#x27;</span><br>    url_encode.urlencode_infor(s)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python url编码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
      <tag>yield</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python md5加密</title>
    <link href="/2024/07/03/md5%E5%8A%A0%E5%AF%86/"/>
    <url>/2024/07/03/md5%E5%8A%A0%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-实现md5加密"><a href="#Python-实现md5加密" class="headerlink" title="Python 实现md5加密"></a>Python 实现md5加密</h1><p>平常测试过程中，可能会遇到在测试api的时候需要使用md5加密，在编写测试脚本的时候则需要实现其过程，那么在本文中你可以学会如何使用md5加密。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><span class="hljs-keyword">import</span> os,sys<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Md5_Password</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_md5</span>(<span class="hljs-params">self,need_encode</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;md5加密&#x27;&#x27;&#x27;</span><br>        password_md5 = md5()<br>        password_md5.update(need_encode.encode())<br>        pwd_secret = password_md5.hexdigest()<br>        <span class="hljs-keyword">return</span> pwd_secret<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    md5_infor=Md5_Password()<br>    password=<span class="hljs-string">&#x27;123qwe&#x27;</span><br>    md5_infor.do_md5(password)<br></code></pre></td></tr></table></figure><p>当然 你可以实现盐的加密 那就是在加密的时候加入指定的信息即可。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python md5加密</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
      <tag>yield</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 常见排序算法</title>
    <link href="/2024/07/03/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2024/07/03/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-常见排序算法"><a href="#Python-常见排序算法" class="headerlink" title="Python 常见排序算法"></a>Python 常见排序算法</h1><p>在平常面试中，一般都会遇见让写排序算法的要求，那么基本也就这三种排序算法，大家可以掌握学会！</p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>原理： 相邻连个数进行比较，大的下沉，最后一个元素最大</p><p>复杂度： 时间复杂度O(n^2)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">dlist_sort</span>(<span class="hljs-params">dlist</span>):<br>    <span class="hljs-keyword">if</span> dlist == []:<br>        <span class="hljs-keyword">return</span> []<br>    <span class="hljs-keyword">else</span>:<br>        dlist_lenght = <span class="hljs-built_in">len</span>(dlist)<br>        <span class="hljs-keyword">for</span> i  <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">0</span>, dlist_lenght):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (i+<span class="hljs-number">1</span>, dlist_lenght):<br>                <span class="hljs-keyword">if</span> dlist[i] &gt; dlist[j]:<br>                    dlist[i],dlist[j] = dlist[j],dlist[i]<br>        <span class="hljs-keyword">return</span> dlist<br><br><br><span class="hljs-built_in">print</span>(dlist_sort([<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">53</span>]))<br></code></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>原理： 递归思想， 列表中取出第一个元素作为标准，比第一个小的放左侧，比第一个大的放右侧</p><p>复杂度： 时间复杂度O(nlog2n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">quick_sort</span>(<span class="hljs-params">quick_list</span>):<br>    <span class="hljs-keyword">if</span> quick_list == []:<br>        <span class="hljs-keyword">return</span> []<br>    <span class="hljs-keyword">else</span>:<br>        first = quick_list[<span class="hljs-number">0</span>]<br>        less = quick_sort([l <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> quick_list[<span class="hljs-number">1</span>:] <span class="hljs-keyword">if</span> l &lt; first])<br>        more = quick_sort([i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> quick_list[<span class="hljs-number">1</span>:] <span class="hljs-keyword">if</span> i &gt;= first])<br>    <span class="hljs-keyword">return</span> less + [first] + more<br><br><br><span class="hljs-built_in">print</span>(quick_sort([<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>]))<br></code></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>原理：通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序，即只需用到O(1)的额外空间的排序，因而在从后向前扫描过程中，找到排序位置后，需要将已排序元素逐步向后挪位，为最新元素提供插入空间。</p><p>复杂度：O(n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">insertionSort</span>(<span class="hljs-params">arr</span>): <br>  <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(arr)): <br>  <br>        key = arr[i] <br>  <br>        j = i-<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> j &gt;=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> key &lt; arr[j] : <br>                arr[j+<span class="hljs-number">1</span>] = arr[j] <br>                j -= <span class="hljs-number">1</span><br>        arr[j+<span class="hljs-number">1</span>] = key <br>  <br>  <br>arr = [<span class="hljs-number">12</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>] <br>insertionSort(arr) <br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;排序后的数组:&quot;</span>) <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(arr)): <br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;%d&quot;</span> %arr[i])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>面试题目搜集</category>
      
      <category>Python 算法题目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无聊</title>
    <link href="/2024/07/03/%E6%97%A0%E8%81%8A/"/>
    <url>/2024/07/03/%E6%97%A0%E8%81%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="无聊"><a href="#无聊" class="headerlink" title="无聊"></a>无聊</h1><p>有时候会突然觉得无聊</p><p>就是那种感觉什么都没意思</p><p>看看窗外的云，人</p><p>也会思考人的意义</p><p>久而久之</p><p>就形成了规律</p><p>然而</p><p>无聊了这么久</p><p>也未想出抛弃众人都有的之外的意义</p><p>生活依旧如寂静的如死的水面</p><p>偶尔的涟漪</p><p>也未能散出绝美的轮廓</p><img src="/2024/07/03/%E6%97%A0%E8%81%8A/%E6%B6%9F%E6%BC%AA.jpg" class="">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
      <category>2024年随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>随笔</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jmetrer添加验证点</title>
    <link href="/2024/07/03/jmerer%E6%B7%BB%E5%8A%A0%E9%AA%8C%E8%AF%81%E7%82%B9/"/>
    <url>/2024/07/03/jmerer%E6%B7%BB%E5%8A%A0%E9%AA%8C%E8%AF%81%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="Jmetrer添加验证点"><a href="#Jmetrer添加验证点" class="headerlink" title="Jmetrer添加验证点"></a>Jmetrer添加验证点</h1><p>在测试中我们通常都需要有个校验的地方，那么在jmeter中我们可以这样添加验证点</p><h2 id="添加验证点"><a href="#添加验证点" class="headerlink" title="添加验证点"></a>添加验证点</h2><p>选择HTTP请求然后右键选择添加-&gt;断言-&gt;响应断言</p><img src="/2024/07/03/jmerer%E6%B7%BB%E5%8A%A0%E9%AA%8C%E8%AF%81%E7%82%B9/%E9%AA%8C%E8%AF%81%E7%82%B9.png" class=""><p>然后添加断言结果，选择线程组右键-&gt;监听器-&gt;断言结果</p><p>运行后，如果HTTP响应没有包含期待的字符串，那么断言就会失败</p><img src="/2024/07/03/jmerer%E6%B7%BB%E5%8A%A0%E9%AA%8C%E8%AF%81%E7%82%B9/%E9%AA%8C%E8%AF%81%E7%82%B91.png" class="">]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Jmeter</category>
      
      <category>Jmeter 添加验证点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Jmeter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jmeter响应编码异常</title>
    <link href="/2024/07/03/jmerer%E5%93%8D%E5%BA%94%E7%BC%96%E7%A0%81%E5%BC%82%E5%B8%B8/"/>
    <url>/2024/07/03/jmerer%E5%93%8D%E5%BA%94%E7%BC%96%E7%A0%81%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="Jmeter响应编码异常"><a href="#Jmeter响应编码异常" class="headerlink" title="Jmeter响应编码异常"></a>Jmeter响应编码异常</h1><p>当响应数据或响应页面没有设置编码时候，JMeter会按照jmeter.properties文件中的sampleresult.default.encoding设置的格式解析。</p><p>默认为ISO-8859-1,所以解析中文时候肯定会出错，那么我们需要你把编码改为UTF-8.</p><img src="/2024/07/03/jmerer%E5%93%8D%E5%BA%94%E7%BC%96%E7%A0%81%E5%BC%82%E5%B8%B8/%E7%BC%96%E7%A0%81.png" class=""><p>修改完毕后我们需要将”#”去掉，然后重启JMeter</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Jmeter</category>
      
      <category>Jmeter 响应编码异常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Jmeter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jmeter线程组</title>
    <link href="/2024/07/03/jmerer%E7%BA%BF%E7%A8%8B%E7%BB%84/"/>
    <url>/2024/07/03/jmerer%E7%BA%BF%E7%A8%8B%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="Jmeter线程组"><a href="#Jmeter线程组" class="headerlink" title="Jmeter线程组"></a>Jmeter线程组</h1><p>在JMeter中，任何类型的测试都需要先创建线程组，一个线程组可以看做一个测试任务</p><h2 id="添加线程组"><a href="#添加线程组" class="headerlink" title="添加线程组"></a>添加线程组</h2><p>鼠标右键单击“测试计划”在快捷键菜单中单击添加-&gt;Threads(Users)-&gt;线程组</p><p>注意：在JMeter中，任何内容都应该放在线程中！</p><img src="/2024/07/03/jmerer%E7%BA%BF%E7%A8%8B%E7%BB%84/jmeter%E7%BA%BF%E7%A8%8B%E7%BB%84.png" class=""><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>1.线程数：一个线程代表一个虚拟用户</p><p>2.Ramp-Up Period(in seconds)：设置线程的启动时长，单位为S，如果线程数是100，启动时长为5s，那么需要5s启动100个线程，平均每秒启动20个线程</p><p>3.循环次数：每个线程发送的请求次数。如果这个线程中有5个HTTP请求，循环次数为3的话，那么一个线程会发送5*3&#x3D;15个HTTP请求。</p><p>4.如果选择了“永远”复选框，那么所有的线程会无限发送请求，直到手动单击工具栏上的停止按钮。</p><p>如果用来做功能测试&#x2F;接口测试，那么应保持默认设置，线程数设置为1，Ramp-up Period(in seconds)设置为1，循环次数也设置为1</p><h2 id="线程组添加HTTP请求"><a href="#线程组添加HTTP请求" class="headerlink" title="线程组添加HTTP请求"></a>线程组添加HTTP请求</h2><img src="/2024/07/03/jmerer%E7%BA%BF%E7%A8%8B%E7%BB%84/http%E8%AF%B7%E6%B1%82.png" class=""><img src="/2024/07/03/jmerer%E7%BA%BF%E7%A8%8B%E7%BB%84/http%E8%AF%B7%E6%B1%821.png" class="">]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Jmeter</category>
      
      <category>Jmeter 线程组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Jmeter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fiddler弱网测试</title>
    <link href="/2024/07/03/fiddler%E5%BC%B1%E7%BD%91%E6%B5%8B%E8%AF%95/"/>
    <url>/2024/07/03/fiddler%E5%BC%B1%E7%BD%91%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Fiddler弱网测试"><a href="#Fiddler弱网测试" class="headerlink" title="Fiddler弱网测试"></a>Fiddler弱网测试</h1><p>在我们平常测试中有一种测试叫做弱网测试，也就是要模拟信号较差情况下我们网站的加载情况，那么我们可以利用fillder来轻松实现这个模拟！</p><h2 id="弱网场景"><a href="#弱网场景" class="headerlink" title="弱网场景"></a>弱网场景</h2><p>1.网络慢或延迟，导致加载时间长</p><p>2.网络中断，web服务器返回500等状态码</p><p>3.网络延迟，HTTP请求发出后，很久没有响应</p><h2 id="Fillder-实现弱网"><a href="#Fillder-实现弱网" class="headerlink" title="Fillder 实现弱网"></a>Fillder 实现弱网</h2><p>1.启动Fiddler,选择Rules-&gt;Performances-&gt;Simulate Modem Speeds</p><p>2.打开浏览器，访问网站，你会发现打开网页的速度很慢</p><img src="/2024/07/03/fiddler%E5%BC%B1%E7%BD%91%E6%B5%8B%E8%AF%95/%E5%BC%B1%E7%BD%911.png" class=""><h2 id="Fillder-精确控制网速"><a href="#Fillder-精确控制网速" class="headerlink" title="Fillder 精确控制网速"></a>Fillder 精确控制网速</h2><p>有时候我们需要精确控制我们的网速具体的速率就可以使用以下方式：</p><p>1.启动Fiddler,选择Rules-&gt;Performances-&gt;Simulate Modem Speeds</p><p>2.在FiddlerScript中找到如下一段代码</p><img src="/2024/07/03/fiddler%E5%BC%B1%E7%BD%91%E6%B5%8B%E8%AF%95/%E8%84%9A%E6%9C%AC.png" class=""><p>我们可以通过修改对应的数值来控制网速</p><p>3.修改完毕后，原本已经勾选的Simulate Modem Speeds会被取消勾选，再次选中Rules-&gt;Performances-&gt;Simulate Modem Speeds</p><p>4.访问浏览器会更加慢<br> <br>网络取值算法就是 1000&#x2F;下载速速&#x3D;需要延迟的时间(ms)，比如50kbit&#x2F;s需要延迟200ms来接收数据</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Fillder</category>
      
      <category>Fillder 弱网测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Fillder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fiddler前端调试</title>
    <link href="/2024/07/03/fiddler%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95/"/>
    <url>/2024/07/03/fiddler%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Fiddler前端调试"><a href="#Fiddler前端调试" class="headerlink" title="Fiddler前端调试"></a>Fiddler前端调试</h1><p>有时候我们可能需要在服务器上面调试javaScript文件，但是又比较麻烦，此时为了方便可以使用fillder来实现！</p><h2 id="Fiddler-AutoResponder的工作原理"><a href="#Fiddler-AutoResponder的工作原理" class="headerlink" title="Fiddler AutoResponder的工作原理"></a>Fiddler AutoResponder的工作原理</h2><p>使用Fiddler可以替换自动返回的一个伪造的HTTP响应，者跟之前介绍的下断点修改HTTP响应差不多，只不过AutoResponder是自动的，操作更加方便！</p><h3 id="Fiddler在线调试JavaScript文件"><a href="#Fiddler在线调试JavaScript文件" class="headerlink" title="Fiddler在线调试JavaScript文件"></a>Fiddler在线调试JavaScript文件</h3><p>1.首先我们将JS文件保存到本地</p><p>2.然后编辑本地的JavaScript文件，更改需要编辑的代码</p><p>3.启动Fiddler，在浏览器中打开网址，然后使用Fiddler抓住这个JavaScript的HTTP请求</p><p>4.然后将Fiddler中，的这个JS拖拽到AutoResponser中</p><p>5.在RuleEditor中单击“Find a file…”，选择本地JavaScript文件的路径。</p><p>6.选中”Enable rules”，激活规则，选中”Unmatched requests passthrough”放行不匹配的HTTP请求。</p><p>7.单击“Save”按钮</p><p>8.你只需要修改本地机器上的文件，然后刷新浏览器，就可以看到效果了！</p><p>若是不显示CSS&#x2F;JS等文件信息，可以在Filters—Request Headers勾选Show only if URL contains选项</p><p>填写文件类型：</p><p>REGX:(?insx)&#x2F;[^?&#x2F;]<em>.(css|js|json|ico|jpg|png|gif|bmp|wav)(?.</em>)?$</p><p>然后选择Actions-&gt;Run Filterset Now</p><img src="/2024/07/03/fiddler%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95/fillder%E8%B0%83%E8%AF%95.png" class=""><p>替换照片</p><img src="/2024/07/03/fiddler%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95/%E6%9B%BF%E6%8D%A2%E7%85%A7%E7%89%87.png" class=""><p>效果</p><img src="/2024/07/03/fiddler%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95/%E6%95%88%E6%9E%9C.png" class="">]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Fillder</category>
      
      <category>Fillder 前端调试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Fillder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>完美解决自定义域名访问gitpages出现了部分请求404的问题！</title>
    <link href="/2024/07/02/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/"/>
    <url>/2024/07/02/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="gitpages出现了部分请求404的问题"><a href="#gitpages出现了部分请求404的问题" class="headerlink" title="gitpages出现了部分请求404的问题"></a>gitpages出现了部分请求404的问题</h1><p>最近把我的博客通过自定义域名代理了gitpages， 理由如下：</p><pre><code class="hljs">一方面是因为 github 确实在国内的访问速度太感人了😂😂😂! 另一方面也是手里有闲置的域名。</code></pre><p>所以就准备搞一下，采用的模式就是 域名 + cloudfare 的模式进行解析，但是在成功后发现部分请求出现了404的情况，如下图：</p><img src="/2024/07/02/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/404%E6%83%85%E5%86%B5.png" class=""><h2 id="为了解决这个问题花费了太多时间"><a href="#为了解决这个问题花费了太多时间" class="headerlink" title="为了解决这个问题花费了太多时间"></a>为了解决这个问题花费了太多时间</h2><p>之前我访问我的gitpages 域名：<a href="https://dreamshao.github.io/xingblog.github.io/">https://dreamshao.github.io/xingblog.github.io/</a>  一直是可以的所有的请求都是正常的，</p><p>可是这次我部署到个人域名后我就发现这怎么部分请求可以拿到，部分请求就是404呢？</p><p>然后，我就开始纠结是不是我在设置自定义域名的时候出现了问题，从开始的域名解析设置 在阿里云上我改了很多次(此时把DNS解析改回了阿里的)，</p><p>发现还是不行，我就想是不是我这个没有备案呢？ 我就开始改回了 cloudfare 的DNS解析，开始在cloudfare 上开始鼓捣，可是鼓捣了很久还是不行</p><p>后来，我就开始在网上查资料，查了好久也没查到为什么部分请求是404，这就花费了我将近1天的时间在上面！</p><h2 id="突然的灵感来临"><a href="#突然的灵感来临" class="headerlink" title="突然的灵感来临"></a>突然的灵感来临</h2><p>第二天早上，我还是打开了我的网站看404的请求，突然想是不是因为我的域名后面不能包含我的子仓库地址呢？ </p><p>之前我的访问路径是: <a href="https://8888666.top/xingblog.github.io/css/main.css">https://8888666.top/xingblog.github.io/css/main.css</a></p><p>然后复制到浏览器 改成了: <a href="https://8888666.top/css/main.css">https://8888666.top/css/main.css</a></p><p>哎，您猜怎么着， 访问到了！ 可以，瞬间我明白了！🤪🤪🤪， 这不能带我的子仓库地址啊！</p><h2 id="修改hexo-的配置"><a href="#修改hexo-的配置" class="headerlink" title="修改hexo 的配置"></a>修改hexo 的配置</h2><p>马上找我的配置文件发现了问题，之前在 _config.yml 中 我配置的是我的路径：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#URL</span><br><span class="hljs-comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://dreamshao.github.io/xingblog.github.io/</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:day/:title/</span><br><span class="hljs-attr">permalink_defaults:</span><br><span class="hljs-attr">pretty_urls:</span><br>  <span class="hljs-attr">trailing_index:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br>  <span class="hljs-attr">trailing_html:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br></code></pre></td></tr></table></figure><p>然后修改为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#URL</span><br><span class="hljs-comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://dreamshao.github.io/</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:day/:title/</span><br><span class="hljs-attr">permalink_defaults:</span><br><span class="hljs-attr">pretty_urls:</span><br>  <span class="hljs-attr">trailing_index:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br>  <span class="hljs-attr">trailing_html:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br></code></pre></td></tr></table></figure><p>然后清空已经生成的信息，也就是在public 文件夹下，清空完毕后执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean<br>hexo g -d<br></code></pre></td></tr></table></figure><p>结果在域名上访问就发现可以了，原来就是这点问题导致了，还是自己的配置问题！</p><h2 id="得到了什么？"><a href="#得到了什么？" class="headerlink" title="得到了什么？"></a>得到了什么？</h2><p>通过这次自己把博客通过自定义域名访问，确实收获了很多部署方面的知识， 比如什么是 CNAME，什么是 A 模式 等等。</p><p>还有更加了解DNS解析的模式，之前只是简单的了解，通过这次操作确实更加明白了！</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>如果你在部署博客到私人域名下有什么问题，可以留言哦，一定知无不言，言无不尽！</p>]]></content>
    
    
    <categories>
      
      <category>gitpages 自定义域名</category>
      
      <category>部分请求404</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>hexo 博客</tag>
      
      <tag>自定义域名访问gitpages</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 下实现IOS自动化测试</title>
    <link href="/2024/06/28/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    <url>/2024/06/28/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Windows-下实现IOS自动化测试"><a href="#Windows-下实现IOS自动化测试" class="headerlink" title="Windows 下实现IOS自动化测试"></a>Windows 下实现IOS自动化测试</h1><p>最近公司要实现Ios的自动化测试，但是局限是测试这边并没给配备MAC电脑，公司或者个人有MAC的东西可以潇洒的划走了😂😂😂</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="WebDriverAgent-介绍及安装"><a href="#WebDriverAgent-介绍及安装" class="headerlink" title="WebDriverAgent 介绍及安装"></a>WebDriverAgent 介绍及安装</h3><p>WebDriverAgent 是 facebook 推出的一款 ios 自动化测试的通信工具，目前facebook 的项目已经停止维护，现在使用的是 appium 官方维护的版本，下载地址：<a href="https://github.com/appium/WebDriverAgent%E3%80%82">https://github.com/appium/WebDriverAgent。</a></p><p>但是由于 WebDriverAgent 安装需要使用到 Mac 电脑，此处也是唯一需要 mac电脑的，使用 xcode 进行编译安装到手机端，具体操作可以自行百度！</p><p>目前我找 ios 开发同学帮我编译安装。</p><h3 id="Tidevice-介绍及安装"><a href="#Tidevice-介绍及安装" class="headerlink" title="Tidevice 介绍及安装"></a>Tidevice 介绍及安装</h3><p>一直以来，iOS 自动化的实现&amp;执行都依赖 Mac 系统，其主要原因是因为需要通过 Xcodebuild 编译&amp;安装 WDA (WebDriverAgent) 到 iOS 设备中，</p><p>通过 WDA 实现对被测应用进行操作。而 Windows 系统无法运行 Xcode 工具，所以无法运行 iOS 自动化测试。</p><p>针对这种情况，阿里团队开源了一个内部使用的iOS自动化工具 tidevice（<a href="https://github.com/alibaba/taobao-iphone-device%EF%BC%89">https://github.com/alibaba/taobao-iphone-device）</a></p><p>让我们可以更方便、简单的脱离 Mac 的限制，该工具能够用于与 iOS 设备进行通信, 提供以下功能 </p><ol><li><p>截图</p></li><li><p>   获取手机信息</p></li><li><p>   ipa 包的安装和卸载</p></li><li><p>   根据 bundleID 启动和停止应用 </p></li><li><p>列出安装应用信息</p></li><li><p>   模拟 Xcode 运行XCTest，常用的如启动 WebDriverAgent 测试(此方法不依赖xcodebuild)</p></li><li><p>   获取指定应用性能(CPU,MEM,FPS)</p></li><li><p>   支持运行在Mac，Linux，Windows 上 Tidevice 安装</p></li></ol><h4 id="版本要求"><a href="#版本要求" class="headerlink" title="版本要求"></a>版本要求</h4><p>Python 3.6+命令 pip install tidevice</p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>查看版本号 tidevice version列出设备 tidevice list</p><p>查看安装包 tidevice applist更多功能请自己查询官方文档</p><h2 id="Tidevice操作步骤"><a href="#Tidevice操作步骤" class="headerlink" title="Tidevice操作步骤"></a>Tidevice操作步骤</h2><p>cmd 执行tidevice list 查看版本号,可以看到下面的信息</p><img src="/2024/06/28/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/cmd.png" class=""><p>Udid：手机唯一 id后面需要用到</p><p>然后执行 tidevice applist 查看我们的 webdriveragent 具体信息</p><img src="/2024/06/28/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/id.png" class=""><p>这个签名是自己写的，需要找对应安装同学确认一下！</p><p>再然后我们执行： tidevice -u 你的设备 id -B 你的webdriveraget –port 8100看到启动成功的字眼就可以了！</p><p>然后浏览器访问 127.0.0.1:8100&#x2F;status 查看到如下信息即可</p><img src="/2024/06/28/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/infor.png" class=""><p>表示当前服务正常，此时不可关闭当前 cmd 弹窗，需要一直保持！</p><h2 id="Appium-使用"><a href="#Appium-使用" class="headerlink" title="Appium 使用"></a>Appium 使用</h2><p>打开 appium 版本选择 1.20 以上的，我这里只是描述</p><p>然后点击start server V1.15.1</p><img src="/2024/06/28/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/appium.png" class=""><p>然后点击 如上图圈住的</p><img src="/2024/06/28/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/appium1.png" class=""><p>在 JSON Representation 输入</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;deviceName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;iPhone XS Max&quot;</span><span class="hljs-punctuation">,</span> <br><span class="hljs-attr">&quot;platformName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ios&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;udid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;00008020-001604901A01002E&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;bundleId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你的包名&quot;</span><span class="hljs-punctuation">,</span> <br><span class="hljs-attr">&quot;platformVersion&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;14.6&quot;</span><span class="hljs-punctuation">,</span> <br><span class="hljs-attr">&quot;webDriverAgentUrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://localhost:8100&quot;</span><span class="hljs-punctuation">,</span> <br><span class="hljs-attr">&quot;noReset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;usePrebuiltWDA&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span> <br><span class="hljs-attr">&quot;useXctestrunFile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span> <br><span class="hljs-attr">&quot;skipLogCapture&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <br><span class="hljs-attr">&quot;appium:automationName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;XCUITest&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>上面需要替换的信息包含 deviceName udid platformVersion bundleId 对应的写自己的信息即可！</p><p>然后点击 start session 就可以查看元素了</p><h2 id="代码操作"><a href="#代码操作" class="headerlink" title="代码操作"></a>代码操作</h2><p>这里的代码定位啊什么的和android一样，这里就不写这些基本命令了。</p>]]></content>
    
    
    <categories>
      
      <category>自动化测试</category>
      
      <category>Ios</category>
      
      <category>Windows 下实现IOS自动化测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Appium</tag>
      
      <tag>windows 下实现ios自动化测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python常见函数之yield函数</title>
    <link href="/2024/06/28/yield%E5%87%BD%E6%95%B0/"/>
    <url>/2024/06/28/yield%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Python常见函数之yield函数"><a href="#Python常见函数之yield函数" class="headerlink" title="Python常见函数之yield函数"></a>Python常见函数之yield函数</h1><p><code>yield</code> 在 Python 中是一个用于定义生成器的关键字，它允许函数在迭代过程中产生值，而不需要一次性计算所有值。以下是关于 <code>yield</code> 的更详细介绍：</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol><li><p><strong>定义生成器函数</strong>：当一个函数中包含了 <code>yield</code> 语句时，这个函数就被称为生成器函数。调用生成器函数时，它不会立即执行函数体中的全部代码，而是返回一个生成器对象。</p></li><li><p><strong>生成器的工作原理</strong>：生成器是一种特殊类型的迭代器，由生成器函数创建。当生成器函数执行到 <code>yield</code> 语句时，它会生成一个值，并保存其当前状态，然后等待下一次调用来继续执行。</p></li></ol><h3 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h3><ol><li><p><strong>暂停和恢复</strong>：<code>yield</code> 允许函数在迭代过程中暂停和恢复，从而逐个生成值，而不是一次性计算所有值。</p></li><li><p><strong>内存效率</strong>：使用 <code>yield</code> 可以避免创建大型的列表来保存数据，从而节约内存。特别是当处理大量数据时，这种优势尤为明显。</p></li><li><p><strong>状态保持</strong>：生成器能够记住上一次返回时的状态，包括局部变量和堆栈信息等。这使得生成器能够在下次迭代时从上次离开的位置继续执行。</p></li></ol><h3 id="yield-的应用场景"><a href="#yield-的应用场景" class="headerlink" title="yield 的应用场景"></a>yield 的应用场景</h3><ol><li><p><strong>节省内存</strong>：生成器在生成值时会“暂停”函数，而不是像列表推导式那样一次性生成所有值。这对于处理大量数据或无限序列时非常有用，因为它允许你按需生成值，从而节省内存。</p></li><li><p><strong>简化代码</strong>：生成器可以用于简化复杂的迭代逻辑。例如，你可以使用生成器来模拟一个无限序列（如斐波那契数列），而无需在内存中存储整个序列。</p></li><li><p><strong>协同程序</strong>：虽然这不是 Python 的标准用法，但 <code>yield</code> 也可以用于实现协同程序（coroutines），这是一种可以暂停和恢复执行的函数。在 Python 3.5 及更高版本中，<code>async</code> 和 <code>await</code> 关键字被引入以更直接地支持异步编程，但 <code>yield</code> 仍然在某些场景中用于此目的。</p></li><li><p><strong>数据流水线</strong>：在数据分析和机器学习等领域中，生成器常用于创建数据流水线。你可以使用生成器函数从数据源中读取数据，对数据进行预处理，然后将处理后的数据传递给下一个阶段。由于生成器按需生成数据，因此这种流水线可以非常高效地处理大量数据。</p></li><li><p><strong>惰性求值</strong>：生成器允许你实现惰性求值（lazy evaluation），即只有在需要时才计算值。这在处理复杂计算或大型数据集时非常有用，因为它可以避免不必要的计算并节省资源。</p></li><li><p><strong>与迭代器的交互</strong>：生成器也是迭代器的一种，因此它们可以与任何接受迭代器的 Python 结构（如 <code>for</code> 循环、列表推导式、<code>map()</code>、<code>filter()</code> 等）一起使用。这使得生成器在 Python 中非常灵活和强大。</p></li></ol><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">simple_generator</span>():<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span><br><br><span class="hljs-comment"># 创建生成器对象</span><br>generator = simple_generator()<br><br><span class="hljs-comment"># 通过 for 循环迭代生成器</span><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> generator:<br>    <span class="hljs-built_in">print</span>(value)  <span class="hljs-comment"># 输出: 1, 2, 3</span><br><br><span class="hljs-comment"># 也可以使用 next() 函数迭代生成器</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(generator))  <span class="hljs-comment"># 输出: StopIteration（因为生成器已经迭代完毕）</span><br></code></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p>当生成器函数执行到 <code>yield</code> 语句时，它会生成一个值并暂停执行。此时，生成器的状态会被保存下来，包括局部变量和堆栈信息等。</p></li><li><p>调用生成器对象的 <code>__next__()</code> 方法（或者在 for 循环中迭代）会使生成器恢复执行，直到遇到下一个 <code>yield</code> 语句或函数结束。</p></li><li><p>如果生成器函数中没有更多的 <code>yield</code> 语句或已经执行完毕，再次调用 <code>__next__()</code> 方法会引发 <code>StopIteration</code> 异常。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python yield函数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
      <tag>yield</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python常见函数之生成式</title>
    <link href="/2024/06/28/python%E7%94%9F%E6%88%90%E5%BC%8F/"/>
    <url>/2024/06/28/python%E7%94%9F%E6%88%90%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Python常见函数之生成式"><a href="#Python常见函数之生成式" class="headerlink" title="Python常见函数之生成式"></a>Python常见函数之生成式</h1><p>在Python中，生成式（Generator Expressions）是一种简洁的创建迭代器的方式，它们类似于列表推导式（List Comprehensions），但是生成式返回的是一个迭代器，而不是一个列表。这意味着生成式只会在迭代时生成值，而不是一次性生成所有值，从而节省了内存。</p><p>生成式的基本语法是使用圆括号 <code>()</code> 而不是方括号 <code>[]</code> 或花括号 <code>&#123;&#125;</code>（对于集合或字典推导式）。</p><p>下面是一些生成式的示例：</p><ol><li>创建一个生成偶数（从0到18）的生成式：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">even_numbers = (i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">19</span>) <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> even_numbers:<br>    <span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><ol start="2"><li>创建一个从字符串中提取大写字母的生成式：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">text = <span class="hljs-string">&quot;Hello, World!&quot;</span><br>uppercase_letters = (char <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> text <span class="hljs-keyword">if</span> char.isupper())<br><span class="hljs-keyword">for</span> letter <span class="hljs-keyword">in</span> uppercase_letters:<br>    <span class="hljs-built_in">print</span>(letter)<br></code></pre></td></tr></table></figure><ol start="3"><li>创建一个生成斐波那契数列的生成式（注意：这只是一个简单的示例，因为生成式本身并不适合生成无限序列，但我们可以限制其长度）：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fibonacci</span>(<span class="hljs-params">n</span>):<br>    a, b = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">yield</span> a<br>        a, b = b, a + b<br><br>fib_sequence = fibonacci(<span class="hljs-number">10</span>)  <span class="hljs-comment"># 创建一个生成前10个斐波那契数的生成器</span><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> fib_sequence:<br>    <span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><p>在这个斐波那契数列的例子中，我们实际上使用了一个生成器函数（通过<code>yield</code>关键字定义），但你也可以将其视为一个更复杂的生成式。在大多数情况下，如果你需要生成一个复杂的、可能是无限的序列，那么使用生成器函数会更为合适。</p><p>总的来说，生成式是Python中一种非常强大且内存高效的工具，用于在迭代时动态生成值。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 生成式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>窗外</title>
    <link href="/2024/06/27/%E7%AA%97%E5%A4%96/"/>
    <url>/2024/06/27/%E7%AA%97%E5%A4%96/</url>
    
    <content type="html"><![CDATA[<h1 id="窗外"><a href="#窗外" class="headerlink" title="窗外"></a>窗外</h1><p>因为我的工位挨着窗口</p><p>累了就会转头看一下窗外的景色</p><p>有形形色色的行人走来走去</p><p>心里想大家都一样吧</p><p>嗯！大家都一样！</p><p>转过头</p><p>不还得过这操蛋的日子！</p><img src="/2024/06/27/%E7%AA%97%E5%A4%96/%E6%93%8D%E8%9B%8B.jpeg" class="">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
      <category>2024年随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>随笔</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python常见函数之reduce函数用法</title>
    <link href="/2024/06/27/reduce%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/"/>
    <url>/2024/06/27/reduce%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Python常见函数之reduce函数用法"><a href="#Python常见函数之reduce函数用法" class="headerlink" title="Python常见函数之reduce函数用法"></a>Python常见函数之reduce函数用法</h1><p>可能突然提到reduce函数你觉得不认识，但是给你这么一个场景，假如我要你实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">str_to_number</span>(<span class="hljs-params">order</span>):<br>    digits = &#123;<span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;3&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;4&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;5&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;6&#x27;</span>: <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;7&#x27;</span>: <span class="hljs-number">7</span>, <span class="hljs-string">&#x27;8&#x27;</span>: <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;9&#x27;</span>: <span class="hljs-number">9</span>&#125;<br>    <span class="hljs-keyword">return</span> digits[order]<br></code></pre></td></tr></table></figure><p>我想让你利用上面的函数给我返回一个 12345</p><p>有人说可以啊 弄个列表每次传递一个对应的key获取value 然后append到列表里面。确实可以但是有点过于麻烦了，那么今天介绍的这个reduce函数绝效率嘎嘎的！</p><h2 id="reduce函数"><a href="#reduce函数" class="headerlink" title="reduce函数"></a>reduce函数</h2><p>reduce把一个函数作用在一个序列[x1, x2, x3, …]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)<br></code></pre></td></tr></table></figure><p>这么看可能不明白，下面让我来举个例子！</p><p>对一个序列求和，就可以用reduce实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> a + b<br><br><span class="hljs-built_in">print</span>(reduce(add, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])) <span class="hljs-comment"># 15</span><br></code></pre></td></tr></table></figure><p>这就实现了将 1,2,3,4,5 利用add 函数求和</p><p>亦或者 我们可以实现 将输入的内容按照整数输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> a * <span class="hljs-number">10</span> + b<br><br><span class="hljs-built_in">print</span>(reduce(fn, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]))  <span class="hljs-comment"># 12345</span><br></code></pre></td></tr></table></figure><p>这下应能看明白里面的奥妙了吧！</p><p>应用到最开始的那个问题那么我们就可以这么来做</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">str_to_number</span>(<span class="hljs-params">order</span>):<br>    digits = &#123;<span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;3&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;4&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;5&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;6&#x27;</span>: <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;7&#x27;</span>: <span class="hljs-number">7</span>, <span class="hljs-string">&#x27;8&#x27;</span>: <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;9&#x27;</span>: <span class="hljs-number">9</span>&#125;<br>    <span class="hljs-keyword">return</span> digits[order]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">str_to_number_reduce</span>(<span class="hljs-params">order</span>):<br>    <span class="hljs-keyword">return</span> reduce(<span class="hljs-keyword">lambda</span> x, y: x * <span class="hljs-number">10</span> + y, <span class="hljs-built_in">map</span>(str_to_number, order))<br><br><span class="hljs-built_in">print</span>(str_to_number_reduce([<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>])) <span class="hljs-comment"># 12345</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python reduce函数用法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python常见函数之函数固定形参</title>
    <link href="/2024/06/27/python%E5%87%BD%E6%95%B0%E5%9B%BA%E5%AE%9A%E5%BD%A2%E5%8F%82/"/>
    <url>/2024/06/27/python%E5%87%BD%E6%95%B0%E5%9B%BA%E5%AE%9A%E5%BD%A2%E5%8F%82/</url>
    
    <content type="html"><![CDATA[<h1 id="Python常见函数之固定形参"><a href="#Python常见函数之固定形参" class="headerlink" title="Python常见函数之固定形参"></a>Python常见函数之固定形参</h1><p>如果有这样一个函数 add(a, b), 此时你进行调用的时候肯定知道需要传递两个形参 比如 add(1,2)， 但是如果我只想实现1的加法怎么办，有人说可以啊 每次都传递add(1,x) 就行但是这样可能还是会让别人误解！</p><p>那么， 如果我这样只需要传递add(2)或add(5) 就可以实现刚刚的算法，那么这样就算是将我们其中一个参数固定了，那么一起来看看怎么实现吧！</p><h2 id="functools-partial"><a href="#functools-partial" class="headerlink" title="functools.partial"></a>functools.partial</h2><p>partial用于部分应用一个函数，它基于一个函数创建一个可调用对象，把原函数的某些参数固定，调用时只需要传递未固定的参数即可。</p><h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> functools<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-built_in">print</span>(a + b)<br><br><br>add = functools.partial(add, <span class="hljs-number">1</span>)<br>add(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 输出：3</span><br></code></pre></td></tr></table></figure><p>add函数原本接收两个参数a和b，经过partial包装之后，a参数的值被固定为了1，新的add对象（注意此处add已经是一个可调用对象，而非函数，下文分析源码会看到）只需要接收一个参数即可。</p><p>通俗点说：就是把原函数的部分参数固定了初始值，新的调用只需要传递其它参数。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 函数固定形参</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LocustFile编写</title>
    <link href="/2024/06/27/locustfile%E7%BC%96%E5%86%99/"/>
    <url>/2024/06/27/locustfile%E7%BC%96%E5%86%99/</url>
    
    <content type="html"><![CDATA[<h1 id="LocustFile编写"><a href="#LocustFile编写" class="headerlink" title="LocustFile编写"></a>LocustFile编写</h1><p>编写LocustFile 可以使得我们的性能测试功能更加强大实现我们自定义的测试路径及判断错误等方法！</p><h2 id="LocustFile-Demo"><a href="#LocustFile-Demo" class="headerlink" title="LocustFile Demo"></a>LocustFile Demo</h2><p>来自 LousctFile 官网例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> locust <span class="hljs-keyword">import</span> HttpUser, task, between<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">QuickstartUser</span>(<span class="hljs-title class_ inherited__">HttpUser</span>):<br>    wait_time = between(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>)<br><br><span class="hljs-meta">    @task</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>(<span class="hljs-params">self</span>):<br>        self.client.get(<span class="hljs-string">&quot;/hello&quot;</span>)<br>        self.client.get(<span class="hljs-string">&quot;/world&quot;</span>)<br><br><span class="hljs-meta">    @task(<span class="hljs-params"><span class="hljs-number">3</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">view_items</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> item_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>            self.client.get(<span class="hljs-string">f&quot;/item?id=<span class="hljs-subst">&#123;item_id&#125;</span>&quot;</span>, name=<span class="hljs-string">&quot;/item&quot;</span>)<br>            time.sleep(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">on_start</span>(<span class="hljs-params">self</span>):<br>        self.client.post(<span class="hljs-string">&quot;/login&quot;</span>, json=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;bar&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><p>这里我想还是采用官网的例子介绍，为了防止我讲的不够清晰 大家也可以访问下面的链接去官网查看</p><p><a href="https://docs.locust.io/en/stable/writing-a-locustfile.html">https://docs.locust.io/en/stable/writing-a-locustfile.html</a></p><h2 id="解释（我的理解）"><a href="#解释（我的理解）" class="headerlink" title="解释（我的理解）"></a>解释（我的理解）</h2><p>其实从中可以看到这个案例和我们平常写的类好像没什么区别，除了继承了<font color=green >HttpUser</font>,以及用例<font color=green >@task</font> 装饰器</p><p>那么首先来看一下具体实现了什么功能呢？</p><h3 id="on-start"><a href="#on-start" class="headerlink" title="on_start()"></a>on_start()</h3><p>这个类实现了一个性能测试脚本，在每个模拟用户启动时，都会调用此名称的方法 会先运行 <font color=green >on_start</font>这个函数,然后进行了请求这里的host 可以在shell中指定也可以在web ui的那个界面中输入，可以看到进行了一个post请求，路径是 &#x2F;login, 请求体是一个json对象</p><p>然后会在继续执行 这里的<font color=green >@task</font> 着重讲一下</p><h3 id="task-装饰器"><a href="#task-装饰器" class="headerlink" title="task 装饰器"></a>task 装饰器</h3><p>@task 装饰器 表明当前方法是一个任务</p><p>@task 是locust文件的核心。对于每个正在运行的用户，Locust 都会创建一个greenlet（协程或“微线程”），然后进行请求，要注意此时不是并发请求，是在&#x2F;hello 响应返回后才会继续请求&#x2F;world</p><p>@task(3) 其中3是指权重，虽然程序运行是随机选择任务单是你给予了更大的权重的话运行的次数会更加多</p><h3 id="wait-time"><a href="#wait-time" class="headerlink" title="wait_time"></a>wait_time</h3><p>wait_time 方法在每次任务执行后引入延迟。如果没有指定wait_time，则下一个任务将在上一个任务完成后立即执行。</p><p>有四个函数 分别是：constant、 bettwen、 constant_throughput、constant_pacing</p><p>constant: 在固定的时间内</p><p>让每个用户每次执行固定的时间 1秒：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">wait_time = constant(<span class="hljs-number">0.5</span>, <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><p>bettwen: 在最小值和最大值之间的随机时间</p><p>让每个用户在每次执行任务之间等待 1 到 4 :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">wait_time = between(<span class="hljs-number">0.5</span>, <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><p>constant_throughput：返回一个跟踪任务运行时间的函数，每次调用时，它将返回一个等待时间，该等待时间将尝试使每秒执行的任务运行次数等于 task_runs_per_second 参数指定的时间</p><p>也就是说：以恒定的速率执行任务。它允许用户设置每秒或每分钟需要执行的任务数，以确保性能测试的稳定性。</p><p>应用场景：</p><pre><code class="hljs">在性能测试中，可能需要模拟不同的用户行为，如登录、搜索、购买等。constant_throughput 可以确保这些任务以恒定的速率执行，从而更准确地评估系统的性能和稳定性。在生产环境中，有时需要根据客户的需求设置应用的吞吐量。constant_throughput 可以帮助确保应用能够满足用户的需求，同时保持系统的稳定性。</code></pre><p>也是 constant_pacing 的倒数</p><p>无论任务执行时间如何，任务将始终每 10 秒执行一次：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">wait_time = constant_throughput(<span class="hljs-number">0.1</span>)<br></code></pre></td></tr></table></figure><p>constant_pacing：返回一个跟踪任务运行时间的函数，每次调用时它将返回一个等待时间，该等待时间将尝试使任务执行之间的总时间等于 wait_time 参数指定的时间。</p><p>应用场景：</p><p>   模拟真实用户行为：</p><pre><code class="hljs">当进行性能测试时，有时需要模拟真实用户的操作行为。这些用户行为可能不是均匀分布的，但某些特定行为（如定期查询、定时任务等）需要按照固定的时间间隔来执行。使用 constant_pacing 可以确保这些任务按照预定的时间间隔执行，从而更准确地模拟真实用户的行为。</code></pre><p>  系统稳定性测试：</p><pre><code class="hljs">在测试系统的稳定性时，可能需要长时间运行任务，并观察系统在不同负载下的表现。使用 constant_pacing 可以确保任务以恒定的间隔执行，从而持续向系统施加稳定的负载，帮助发现潜在的稳定性和性能问题。</code></pre><p>  资源分配和限制：</p><pre><code class="hljs">在某些场景下，可能需要限制系统资源的使用，以确保不会超出特定的限制。例如，在测试一个API接口时，可能需要限制每分钟的请求数以避免对后端服务造成过大的压力。虽然 constant_throughput 可以用来控制每秒的请求数，但 constant_pacing 可以提供更细粒度的控制，确保请求按照特定的时间间隔发送，从而更有效地管理资源使用。</code></pre><p>  定时任务的性能测试：</p><pre><code class="hljs">许多系统都包含定时任务，这些任务需要按照预定的时间间隔执行。在进行这些定时任务的性能测试时，可以使用 constant_pacing 来模拟定时任务的执行间隔，并评估系统在不同负载下的性能表现。</code></pre><p>  实时数据收集和处理：</p><p>   对于需要实时收集和处理数据的系统（如监控系统、日志分析系统等），可能需要按照固定的时间间隔来执行数据收集和处理任务。使用 </p><p>   constant_pacing 可以确保这些任务按照预定的时间间隔执行，从而确保数据的准确性和实时性。</p><p>总的来说，constant_pacing 适用于那些需要精确控制任务执行间隔的场景，无论是在性能测试、资源分配还是实时数据处理中都可以发挥其独特的作用。</p><p>可以理解为：就像一个定时器一样 他不关心你具体返回了没有 到了点就要执行</p><p>无论任务执行时间如何，任务将始终每 10 秒执行一次：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">wait_time = constant_pacing(<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><h3 id="HttpUser"><a href="#HttpUser" class="headerlink" title="HttpUser"></a>HttpUser</h3><p> HttpUser每个用户提供一个client属性，即 的一个实例HttpSession，可用于向我们想要加载测试的目标系统发出 HTTP 请求。</p><p> HttpUser里面也是封装了一系列的请求方式，例如 POST, GET , DELETE, PUT 等。</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Locust</category>
      
      <category>Locust File编写</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Locust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Locust 入门安装及界面介绍</title>
    <link href="/2024/06/27/locust%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/06/27/locust%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Locust-入门安装及界面介绍"><a href="#Locust-入门安装及界面介绍" class="headerlink" title="Locust 入门安装及界面介绍"></a>Locust 入门安装及界面介绍</h1><h2 id="什么是-Locust？"><a href="#什么是-Locust？" class="headerlink" title="什么是 Locust？"></a>什么是 Locust？</h2><p>Locust 是一款针对 HTTP 和其他协议的开源性能&#x2F;负载测试工具， 相比于Jmeter 或者 LoadRunner 来说相对更加轻便，在单机下的性能更加强悍！</p><p>Locust 测试可通过命令行或基于 Web 的 UI 运行。可以实时查看吞吐量、响应时间和错误，并&#x2F;或导出以供日后分析。</p><p>也可以将常规 Python 库导入到测试中，借助 Locust 的可插入式架构，它可以无限扩展。与使用大多数其他工具不同，您的测试设计永远不会受到 GUI 或特定领域语言的限制。</p><p>他之所以性能强悍是因为Locust 可轻松在多台机器上分布运行负载测试。它基于事件（使用gevent），这使得单个进程可以处理数千个并发用户。虽然可能还有其他工具能够在给定硬件上每秒处理更多请求，但 Locust 每个用户的低开销使其非常适合测试高度并发的工作负载。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip3 install locust<br></code></pre></td></tr></table></figure><h2 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">locust -V<br>locust <span class="hljs-number">2.29</span><span class="hljs-number">.1</span> <span class="hljs-keyword">from</span> /usr/local/lib/python3<span class="hljs-number">.10</span>/site-packages/locust (python <span class="hljs-number">3.10</span><span class="hljs-number">.6</span>)<br></code></pre></td></tr></table></figure><h2 id="locust-的启动"><a href="#locust-的启动" class="headerlink" title="locust 的启动"></a>locust 的启动</h2><p>可以在命令行中执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">locust<br></code></pre></td></tr></table></figure><p>运行成功可以看到</p><p>打开 <a href="http://localhost:8089/">http://localhost:8089/</a></p><p>可以看到</p><img src="/2024/06/27/locust%E5%AD%A6%E4%B9%A0/locust%E7%95%8C%E9%9D%A2.png" class=""><p>此时就已经启动成功了！</p><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>界面中的 Number of users：用户数量也就是你并发的用户量</p><p>界面中的 Spawn rate：用户量的生成速率按秒</p><p>界面中的 Host：主机地址 也就是域名地址</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Locust</category>
      
      <category>Locust 介绍</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Locust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试题目之SQL面试题目之可以举一反三的SQL问题</title>
    <link href="/2024/06/27/SQL%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE/"/>
    <url>/2024/06/27/SQL%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="面试题目之SQL面试题目可以举一反三的SQL问题"><a href="#面试题目之SQL面试题目可以举一反三的SQL问题" class="headerlink" title="面试题目之SQL面试题目可以举一反三的SQL问题"></a>面试题目之SQL面试题目可以举一反三的SQL问题</h1><h1 id="经典的sql题目可以举一反三"><a href="#经典的sql题目可以举一反三" class="headerlink" title="经典的sql题目可以举一反三"></a>经典的sql题目可以举一反三</h1><p>表结构：</p><ul><li>学生表student(id,name)</li><li>课程表course(id,name)</li><li>学生成绩表student_course(sid,cid,score)</li></ul><h2 id="编写创建表的sql"><a href="#编写创建表的sql" class="headerlink" title="编写创建表的sql"></a>编写创建表的sql</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student( id <span class="hljs-type">int</span> unsigned <span class="hljs-keyword">primary</span> key auto_increment, <br>name <span class="hljs-type">char</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> ); <br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student(name) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;张三&#x27;</span>),(<span class="hljs-string">&#x27;李四&#x27;</span>); <br> <br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> course( id <span class="hljs-type">int</span> unsigned <span class="hljs-keyword">primary</span> key auto_increment, name <span class="hljs-type">char</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> ); <br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> course(name) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;语文&#x27;</span>),(<span class="hljs-string">&#x27;数学&#x27;</span>);  <br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student_course( sid <span class="hljs-type">int</span> unsigned, cid <span class="hljs-type">int</span> unsigned, score <span class="hljs-type">int</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>, <br><span class="hljs-keyword">foreign</span> key (sid) <span class="hljs-keyword">references</span> student(id), <span class="hljs-keyword">foreign</span> key (cid) <span class="hljs-keyword">references</span> course(id), <span class="hljs-keyword">primary</span> key(sid, cid) ); <br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student_course <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">90</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">90</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">70</span>);<br></code></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="查询student表中重名的学生，结果包含id和name，按name-id升序"><a href="#查询student表中重名的学生，结果包含id和name，按name-id升序" class="headerlink" title="查询student表中重名的学生，结果包含id和name，按name,id升序"></a>查询student表中重名的学生，结果包含id和name，按name,id升序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id,name<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> name <span class="hljs-keyword">in</span> (<br><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> student <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> name <span class="hljs-keyword">having</span>(<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>)<br>) <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> name;<br></code></pre></td></tr></table></figure><p>我们经常需要查询某一列重复的行，一般通过group by(有重复的列)然后取count&gt;1的值。 关系型数据库有他的局限性， 有些看似简单的查询写出来的sql很复杂，而且效率也会很低。</p><h3 id="在student-course表中查询平均分不及格的学生，列出学生id和平均分"><a href="#在student-course表中查询平均分不及格的学生，列出学生id和平均分" class="headerlink" title="在student_course表中查询平均分不及格的学生，列出学生id和平均分"></a>在student_course表中查询平均分不及格的学生，列出学生id和平均分</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sid,<span class="hljs-built_in">avg</span>(score) <span class="hljs-keyword">as</span> avg_score<br><span class="hljs-keyword">from</span> student_course<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sid <span class="hljs-keyword">having</span>(avg_score<span class="hljs-operator">&lt;</span><span class="hljs-number">60</span>);<br></code></pre></td></tr></table></figure><p>group by和having是最常考的 where子句中不能用聚集函数作为条件表达式，但是having短语可以，where和having的区别在于对用对象不同，where作用于记录，having作用于组。</p><h3 id="在student-course表中查询每门课成绩都不低于80的学生id"><a href="#在student-course表中查询每门课成绩都不低于80的学生id" class="headerlink" title="在student_course表中查询每门课成绩都不低于80的学生id"></a>在student_course表中查询每门课成绩都不低于80的学生id</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> sid<br><span class="hljs-keyword">from</span> student_course<br><span class="hljs-keyword">where</span> sid <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<br><span class="hljs-keyword">select</span> sid <span class="hljs-keyword">from</span> student_course<br><span class="hljs-keyword">where</span> score <span class="hljs-operator">&lt;</span> <span class="hljs-number">80</span>);<br></code></pre></td></tr></table></figure><p>用到反向思想，其实就是数理逻辑中的∀x:P和¬∃x:¬P是等价的。</p><h3 id="查询每个学生的总成绩，结果列出学生姓名和总成绩-如果使用下面的sql会过滤掉没有成绩的人"><a href="#查询每个学生的总成绩，结果列出学生姓名和总成绩-如果使用下面的sql会过滤掉没有成绩的人" class="headerlink" title="查询每个学生的总成绩，结果列出学生姓名和总成绩 如果使用下面的sql会过滤掉没有成绩的人"></a>查询每个学生的总成绩，结果列出学生姓名和总成绩 如果使用下面的sql会过滤掉没有成绩的人</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name,<span class="hljs-built_in">sum</span>(score) total<br><span class="hljs-keyword">from</span> student,student_course<br><span class="hljs-keyword">where</span> student.id<span class="hljs-operator">=</span>student_course.sid<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sid;<br></code></pre></td></tr></table></figure><p>更保险的做法应该是使用 左外连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name,<span class="hljs-built_in">sum</span>(score)<br><span class="hljs-keyword">from</span> student <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> student_course<br><span class="hljs-keyword">on</span> student.id<span class="hljs-operator">=</span>student_course.sid<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sid;<br></code></pre></td></tr></table></figure><h3 id="总成绩最高的学生，结果列出学生id和总成绩-下面的sql效率很低，因为要重复计算所有的总成绩。"><a href="#总成绩最高的学生，结果列出学生id和总成绩-下面的sql效率很低，因为要重复计算所有的总成绩。" class="headerlink" title="总成绩最高的学生，结果列出学生id和总成绩 下面的sql效率很低，因为要重复计算所有的总成绩。"></a>总成绩最高的学生，结果列出学生id和总成绩 下面的sql效率很低，因为要重复计算所有的总成绩。</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sid,<span class="hljs-built_in">sum</span>(score) <span class="hljs-keyword">as</span> sum_score<br><span class="hljs-keyword">from</span> student_course <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sid <span class="hljs-keyword">having</span> sum_score<span class="hljs-operator">&gt;=</span><span class="hljs-keyword">all</span><br>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(score) <span class="hljs-keyword">from</span> student_course <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sid);<br></code></pre></td></tr></table></figure><p>因为order by中可以使用聚集函数，最简单的方法是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sid,<span class="hljs-built_in">sum</span>(score) <span class="hljs-keyword">as</span> sum_score<br><span class="hljs-keyword">from</span> student_course <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sid<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sum_score <span class="hljs-keyword">desc</span> limit <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>同理可以查总成绩的前三名。</p>]]></content>
    
    
    <categories>
      
      <category>面试题目搜集</category>
      
      <category>SQL面试题目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试题目搜集之Python 算法题目动态规划问题</title>
    <link href="/2024/06/27/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E6%90%9C%E9%9B%86/"/>
    <url>/2024/06/27/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E6%90%9C%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="面试题目搜集之Python-算法题目动态规划问题"><a href="#面试题目搜集之Python-算法题目动态规划问题" class="headerlink" title="面试题目搜集之Python 算法题目动态规划问题"></a>面试题目搜集之Python 算法题目动态规划问题</h1><h2 id="来自某大厂"><a href="#来自某大厂" class="headerlink" title="来自某大厂"></a>来自某大厂</h2><p>一个机器人人位于一个 m x n 网格的左上角（起始点在下图中标记为“Start”），机器人每次只能向下或者向右移动一步，机器人试图达到网格的右下角(在下图中标记为“Finish”),问总共有多少条不同的路径？</p><h2 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h2><p>这是一个经典的动态规划问题。我们可以定义一个二维数组dp，其中dp[i][j]表示从左上角到达(i, j)这个格子的不同路径数量。</p><p>由于机器人只能向右或向下移动，因此到达(i, j)的路径数量等于到达其上方格子(i-1, j)的路径数量加上到达其左方格子(i, j-1)的路径数量。</p><p>（i &#x3D; 0）和第一列（j &#x3D; 0）的格子，由于它们只能从一个方向（分别是左方和上方）到达，因此路径数量都是1。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">uniquePaths</span>(<span class="hljs-params">self, m: <span class="hljs-built_in">int</span>, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        result = [[<span class="hljs-number">1</span>] * m <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>        <span class="hljs-keyword">for</span> index1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n):<br>            <span class="hljs-keyword">for</span> index2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,m):<br>                result[index1][index2] = result[index1 - <span class="hljs-number">1</span>][index2] + result[index1][index2 - <span class="hljs-number">1</span>]<br>        output = result[-<span class="hljs-number">1</span>][-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">return</span> output<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    re = Solution()<br>    m=<span class="hljs-number">2</span><br>    n=<span class="hljs-number">3</span><br>    result=re.uniquePaths(m,n)<br>    <span class="hljs-built_in">print</span>(result)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>面试题目搜集</category>
      
      <category>Python 算法题目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python常见函数之RSA算法加密</title>
    <link href="/2024/06/27/RSA%E5%8A%A0%E5%AF%86/"/>
    <url>/2024/06/27/RSA%E5%8A%A0%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Python常见函数之RSA加密"><a href="#Python常见函数之RSA加密" class="headerlink" title="Python常见函数之RSA加密"></a>Python常见函数之RSA加密</h1><p>来自维基百科：RSA加密算法是一种非对称加密算法，在公开密钥加密和电子商业中被广泛使用。RSA是由罗纳德·李维斯特、阿迪·萨莫尔和伦纳德·阿德曼在1977年一起提出的。当时他们三人都在麻省理工学院工作。RSA 就是他们三人姓氏开头字母拼在一起组成的。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> PKCS1_v1_5 <span class="hljs-keyword">as</span> Cipher_pkcs1_v1_5<br><span class="hljs-keyword">from</span> Crypto.Signature <span class="hljs-keyword">import</span> PKCS1_v1_5<br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><span class="hljs-keyword">from</span> Crypto.Hash <span class="hljs-keyword">import</span> SHA<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> Crypto<br><span class="hljs-keyword">import</span> secrets<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rsa_long_encrypt</span>(<span class="hljs-params">pub_key_str, msg</span>):<br>    msg = msg.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    length = <span class="hljs-built_in">len</span>(msg)<br>    default_length = <span class="hljs-number">117</span><br>    <span class="hljs-comment">#公钥加密</span><br>    pubobj = Cipher_pkcs1_v1_5.new(RSA.importKey(pub_key_str))<br>    <span class="hljs-comment">#长度不用分段</span><br>    <span class="hljs-keyword">if</span> length &lt; default_length:<br>        <span class="hljs-keyword">return</span> base64.b64encode(pubobj.encrypt(msg))<br>    <span class="hljs-comment">#需要分段</span><br>    offset = <span class="hljs-number">0</span><br>    res = []<br>    <span class="hljs-keyword">while</span> length - offset &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> length - offset &gt; default_length:<br>            res.append(pubobj.encrypt(msg[offset:offset+default_length]))<br>        <span class="hljs-keyword">else</span>:<br>            res.append(pubobj.encrypt(msg[offset:]))<br>        offset += default_length<br>    byte_data = <span class="hljs-string">b&#x27;&#x27;</span>.join(res)<br>    <span class="hljs-built_in">print</span>(base64.b64encode(byte_data))<br>    <span class="hljs-keyword">return</span> base64.b64encode(byte_data)<br><br>publickey = <span class="hljs-string">&#x27;your publick key&#x27;</span><br>public_key = <span class="hljs-string">&#x27;-----BEGIN PUBLIC KEY-----\n&#x27;</span>+ publickey +<span class="hljs-string">&#x27;\n-----END PUBLIC KEY-----&#x27;</span><br><br>data = &#123;<br>    <span class="hljs-string">&quot;payAmount&quot;</span>: <span class="hljs-number">1000000</span>,<br>    <span class="hljs-string">&quot;payChId&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;bankAssetId&quot;</span>: <span class="hljs-number">1001</span><br>&#125;<br><br>first = secrets.token_bytes(<span class="hljs-number">16</span>)<br>result = base64.b64encode(first).decode()<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#password = &#x27;password=&#x27;+result</span><br>password=<span class="hljs-string">&#x27;password=WBAPfpP5ph2MrWSOkznJGA==&#x27;</span><br><span class="hljs-built_in">print</span>(password)<br>infor = json.dumps(data)<br><span class="hljs-built_in">print</span>(infor)<br>infor=rsa_long_encrypt(public_key,password)<br><span class="hljs-built_in">print</span>(infor)<br><span class="hljs-built_in">print</span>(infor.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python RSA算法加密</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
      <tag>RSA算法加密</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fiddler之过滤功能</title>
    <link href="/2024/06/27/fillder%E8%BF%87%E6%BB%A4%E5%8A%9F%E8%83%BD/"/>
    <url>/2024/06/27/fillder%E8%BF%87%E6%BB%A4%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="Fillder过滤功能"><a href="#Fillder过滤功能" class="headerlink" title="Fillder过滤功能"></a>Fillder过滤功能</h1><p>Fillder 支持过滤HTTP请求，也可以通过标记不同的sessions 赋予不同的颜色进行区分。</p><h2 id="过滤sessions"><a href="#过滤sessions" class="headerlink" title="过滤sessions"></a>过滤sessions</h2><p>我们可以通过Find Sessions去发现我们想要的sessions会以黄色高亮显示，然后可以进行保存Fiddler中保存包，<br>选择你想保存的会话，然后单击File-&gt;Save-&gt;Selected Sessions，保存后的文件后缀是.saz。</p><p>文件中会保存完整的HTTP请求和HTTP响应，双击.saz文件，或者单击Fiddler菜单栏中的File-&gt;Load Archive,就能打开.saz文件。</p><h2 id="Fiddler中编辑会话"><a href="#Fiddler中编辑会话" class="headerlink" title="Fiddler中编辑会话"></a>Fiddler中编辑会话</h2><p>默认的情况下，Fiddler中的session是不可以修改的，选择一个session,用鼠标右键选择“Unlock For Editing”（快捷键是[F12]),这样就可以在Inspectors的Raw模式下编辑HTTP请求响应</p><h2 id="过滤会话"><a href="#过滤会话" class="headerlink" title="过滤会话"></a>过滤会话</h2><p>每次启动Fiddler，打开一个网页，都能看到十几个会话，看得人眼花缭乱，我们可以使用fiddler功能来过滤。<br>在Fiddler中找到Filters选项卡，选中”Use Filters”，就可以启动过滤功能。</p><img src="/2024/06/27/fillder%E8%BF%87%E6%BB%A4%E5%8A%9F%E8%83%BD/%E8%BF%87%E6%BB%A4.png" class=""><p>Filters的Actions中，我们可以保存当前的过滤设置，也可以加载已经保存好的过滤设置。</p><img src="/2024/06/27/fillder%E8%BF%87%E6%BB%A4%E5%8A%9F%E8%83%BD/%E4%BF%9D%E5%AD%98%E8%BF%87%E6%BB%A4.png" class=""><h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><p>快速帮助我们选择session的快捷键</p><table><thead><tr><th>快捷键</th><th>用途</th></tr></thead><tbody><tr><td>CTRL+X</td><td>删除所有的Session</td></tr><tr><td>CTRL+A</td><td>选择所有的Session</td></tr><tr><td>ESC</td><td>不选择任何的Session</td></tr><tr><td>CTRL+I</td><td>反选Session</td></tr><tr><td>Delete</td><td>删除选择的Session</td></tr><tr><td>Shift+Delete</td><td>删除未选择的Session</td></tr><tr><td>R</td><td>重放选择的Session（可以重放多个Session）</td></tr><tr><td>SHIFT+R</td><td>多次重放选择的Session(随后会提示你输入，重放几次)</td></tr><tr><td>U</td><td>无条件地重放选择的Session（不会发送IF-Modified-Since和IF-None-Match Headers)</td></tr><tr><td>SHIFT+U</td><td>无条件的重放选择的Session（随后会提示你输入，重放几次)</td></tr><tr><td>P</td><td>选择“当前Seesion”的”父Session”（这个功能取决于Referer Header)</td></tr><tr><td>C</td><td>选择“当前Session”的”子Session”</td></tr><tr><td>D</td><td>选择“重复的Session”(有相同的URL和相同的method）</td></tr><tr><td>BackSpace或鼠标上的”Back”</td><td>选择“上次选择的Session”</td></tr><tr><td>Insert</td><td></td></tr><tr><td>CTRL+1CTRL+2CTRL+3CTRL+4CTRL+5CTRL+6</td><td>用粗体和颜色标记选择的Session</td></tr><tr><td>M</td><td>给选择的Session添加注释</td></tr></tbody></table><h2 id="QuickExec命令行的使用"><a href="#QuickExec命令行的使用" class="headerlink" title="QuickExec命令行的使用"></a>QuickExec命令行的使用</h2><p>Fiddler的左下角有一个命令行工具叫做QuickExec,允许你直接输入命令</p><img src="/2024/06/27/fillder%E8%BF%87%E6%BB%A4%E5%8A%9F%E8%83%BD/quickseck.png" class=""><p>常见命令如下：</p><p>help: 大力官方的使用页面的介绍，所有的命令都会列出来</p><p>Cls: 清屏（CTRL+X）快捷键也可以清屏)</p><p>Select:选择会话的命令</p><p>?.png:用来选择.png后缀的图片</p><p>Bpu:捕获request</p><p>Urlreplace:替换掉host</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Fillder</category>
      
      <category>Fillder 过滤功能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Fillder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fillder的Decode/Encode小工具</title>
    <link href="/2024/06/27/fillder%E8%A7%A3%E7%A0%81%E5%B7%A5%E5%85%B7/"/>
    <url>/2024/06/27/fillder%E8%A7%A3%E7%A0%81%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="Fillder的Decode-Encode小工具"><a href="#Fillder的Decode-Encode小工具" class="headerlink" title="Fillder的Decode&#x2F;Encode小工具"></a>Fillder的Decode&#x2F;Encode小工具</h1><p>可以通过单击工具栏中的”TextWizard”，就可以启动TextWizard小工具，可以支持很多不同的算法</p><img src="/2024/06/27/fillder%E8%A7%A3%E7%A0%81%E5%B7%A5%E5%85%B7/%E8%A7%A3%E7%A0%81.png" class="">]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Fillder</category>
      
      <category>Fillder 的Decode/Encode小工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Fillder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fillder断点修改HTTP报文</title>
    <link href="/2024/06/27/fillder%E6%96%AD%E7%82%B9%E4%BF%AE%E6%94%B9HTTP%E6%8A%A5%E6%96%87/"/>
    <url>/2024/06/27/fillder%E6%96%AD%E7%82%B9%E4%BF%AE%E6%94%B9HTTP%E6%8A%A5%E6%96%87/</url>
    
    <content type="html"><![CDATA[<h1 id="Fillder-断点修改HTTP报文"><a href="#Fillder-断点修改HTTP报文" class="headerlink" title="Fillder 断点修改HTTP报文"></a>Fillder 断点修改HTTP报文</h1><p>Fiddler可以修改任何HTTP请求的信息。</p><h2 id="全局断点"><a href="#全局断点" class="headerlink" title="全局断点"></a>全局断点</h2><p>启动Fiddler，单击菜单栏种的Rules-&gt;Automatics Breakpoint-&gt;Before Requests，或者使用快捷键【F11】,这种方法会拦截所有的对话。</p><img src="/2024/06/27/fillder%E6%96%AD%E7%82%B9%E4%BF%AE%E6%94%B9HTTP%E6%8A%A5%E6%96%87/%E5%85%A8%E5%B1%80%E6%96%AD%E7%82%B9.png" class=""><p>想要取消全局断点，可以单击Rules-&gt;Automatic Breakpoint -&gt; Disabled，或者快捷键【shift+F11】。</p><h2 id="单个断点"><a href="#单个断点" class="headerlink" title="单个断点"></a>单个断点</h2><p>已知某个请求URL地址，这个时候只需要针对一个请求打断点调试，其他的请求不拦截。</p><p>在fiddler 左下角的QuickExec命令中输入命令” bpu  拦截的网址“就可以实现拦截效果,取修改拦截的信息。</p><img src="/2024/06/27/fillder%E6%96%AD%E7%82%B9%E4%BF%AE%E6%94%B9HTTP%E6%8A%A5%E6%96%87/%E5%8D%95%E4%B8%AA%E6%96%AD%E7%82%B9.png" class=""><h2 id="Fiddler修改HTTP请求"><a href="#Fiddler修改HTTP请求" class="headerlink" title="Fiddler修改HTTP请求"></a>Fiddler修改HTTP请求</h2><img src="/2024/06/27/fillder%E6%96%AD%E7%82%B9%E4%BF%AE%E6%94%B9HTTP%E6%8A%A5%E6%96%87/%E4%BF%AE%E6%94%B9HTTP%E6%8A%A5%E6%96%87.png" class=""><p>如果想继续拦截可以点击黄色按钮”Break on Response”这个按钮，会继续拦截这个HTTP请求的响应。</p><p>Fiddler中设置断点修改HTTP响应 用法同上述全局断点， 单个断点<br> <br>第一种是全局断点，启动fiddler，单击Rulers-&gt;Automatic Breakpoint-&gt;After Response这种方法会中断所有的会话。<br>想要取消断点 ，可以单击Rules-&gt;Automatic Breakpoint-&gt;Disabled。<br>第二种是单个断点，在命令行“bpafter <a href="http://www.baidu.com”/">www.baidu.com”</a> 这种方法只会中断<a href="http://www.baidu.com./">www.baidu.com。</a><br>想要消除单个断点，可以在命令行中输入命令”bpafter”。</p><h2 id="伪造Referer"><a href="#伪造Referer" class="headerlink" title="伪造Referer"></a>伪造Referer</h2><img src="/2024/06/27/fillder%E6%96%AD%E7%82%B9%E4%BF%AE%E6%94%B9HTTP%E6%8A%A5%E6%96%87/%E4%BF%AE%E6%94%B9refer.png" class=""><p>拦截后我们可以在Raw中写入Refere：ww.dddddr.cn就可以 </p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Fillder</category>
      
      <category>Fillder 断点修改HTTP报文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Fillder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fillder简单的性能测试</title>
    <link href="/2024/06/27/fillder%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <url>/2024/06/27/fillder%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Fillder-简单的性能测试"><a href="#Fillder-简单的性能测试" class="headerlink" title="Fillder 简单的性能测试"></a>Fillder 简单的性能测试</h1><h2 id="通过查看statistics面板查看"><a href="#通过查看statistics面板查看" class="headerlink" title="通过查看statistics面板查看"></a>通过查看statistics面板查看</h2><img src="/2024/06/27/fillder%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/fillder%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95.png" class=""><p>我们打开一个网页的请求，通过查看Statistics面板可以清楚的看到每个HTTP请求的响应时间。</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Fillder</category>
      
      <category>Fillder 简单的性能测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Fillder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python常见函数之 python时间戳</title>
    <link href="/2024/06/27/python%E6%97%B6%E9%97%B4%E6%88%B3/"/>
    <url>/2024/06/27/python%E6%97%B6%E9%97%B4%E6%88%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="Python常见函数之-Python-时间戳"><a href="#Python常见函数之-Python-时间戳" class="headerlink" title="Python常见函数之 Python 时间戳"></a>Python常见函数之 Python 时间戳</h1><p>来自百度百科： 时间戳，是指用户应用数字签名技术时，产生的涵盖原始文件信息、签名时间、签名参数等信息。 其主要目的是在于，能够通过一定的技术手段认证数据产生的时间，从而得知这段数据在产生之后，是否有被篡改。</p><p>个人目前接触到使用领域：在做全球化产品的时候依赖于时间戳在不同时区进行展示</p><h2 id="time-时间戳等相关转换"><a href="#time-时间戳等相关转换" class="headerlink" title="time 时间戳等相关转换"></a>time 时间戳等相关转换</h2><h3 id="datetime与时间戳格式相互转换"><a href="#datetime与时间戳格式相互转换" class="headerlink" title="datetime与时间戳格式相互转换"></a>datetime与时间戳格式相互转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 将datetime转换为unix时间戳</span><br>dtime = datetime.date.today()<br>unix_time = time.mktime(dtime.timetuple())<br><span class="hljs-built_in">print</span>(dtime, unix_time)   <span class="hljs-comment"># 2019-09-02 1567353600.0</span><br><br><span class="hljs-comment"># 将unix时间戳转换成datetime</span><br>dtime2 = datetime.datetime.fromtimestamp(unix_time)<br><span class="hljs-built_in">print</span>(dtime2)<br><span class="hljs-number">1234567891011</span><br></code></pre></td></tr></table></figure><h3 id="根据时间差获得时间"><a href="#根据时间差获得时间" class="headerlink" title="根据时间差获得时间"></a>根据时间差获得时间</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">yestoday = datetime.date.today() + datetime.timedelta(days=-<span class="hljs-number">1</span>)  <span class="hljs-comment"># days=-1，代表昨天，-2代表前天，1代表明天...</span><br></code></pre></td></tr></table></figure><h3 id="datetime-格式与字符串格式的相互转换"><a href="#datetime-格式与字符串格式的相互转换" class="headerlink" title="datetime 格式与字符串格式的相互转换"></a>datetime 格式与字符串格式的相互转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># datetime 格式与字符串格式的相互转换</span><br>today_str =datetime.date.today().strftime(<span class="hljs-string">&quot;%Y-%m-%d&quot;</span>)  <span class="hljs-comment"># 转换为字符串</span><br>today_datetime = datetime.datetime.strptime(<span class="hljs-string">&quot;2019-09-01 00:00:00&quot;</span>, <span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)  <span class="hljs-comment"># 转换为datetime</span><br><span class="hljs-built_in">print</span>(today_str,<span class="hljs-built_in">type</span>(today_str)) <br><span class="hljs-built_in">print</span>(today_datetime,<span class="hljs-built_in">type</span>(today_datetime))<br><span class="hljs-number">12345</span><br></code></pre></td></tr></table></figure><h3 id="定时时间表"><a href="#定时时间表" class="headerlink" title="定时时间表"></a>定时时间表</h3><p>比如获得24个小时的列表（以下是每隔半个小时）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_time_list</span>(<span class="hljs-params">self</span>):<br>     start_time = datetime.datetime.strptime(<span class="hljs-string">&quot;2019-08-28 14:00:00&quot;</span>, <span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)<br>     unix_start_time = time.mktime(start_time.timetuple())  <span class="hljs-comment"># 转换成时间戳</span><br>     un_timelist = [(unix_start_time+i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">86400</span>+<span class="hljs-number">1</span>, <span class="hljs-number">1800</span>)]  <br>     timelist = [datetime.datetime.fromtimestamp(un_time) <span class="hljs-keyword">for</span> un_time <span class="hljs-keyword">in</span> un_timelist]  <span class="hljs-comment"># 再转换成datetime格式</span><br>     <span class="hljs-keyword">return</span> timelist<br></code></pre></td></tr></table></figure><h3 id="各个级别的时间戳获取"><a href="#各个级别的时间戳获取" class="headerlink" title="各个级别的时间戳获取"></a>各个级别的时间戳获取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> datetime<br><br>original=time.time()   <span class="hljs-comment"># 原始时间戳</span><br>Secondlevel =<span class="hljs-built_in">int</span>(original)       <span class="hljs-comment"># 秒级别时间戳</span><br>millisecondlevel=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">round</span>(original*<span class="hljs-number">1000</span>)   <span class="hljs-comment"># 毫秒级别时间戳</span><br>microsecondlevel=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">round</span>(original*<span class="hljs-number">1000000</span>)  <span class="hljs-comment"># 微秒级别时间戳</span><br></code></pre></td></tr></table></figure><h3 id="毫秒级别时间戳转换时间"><a href="#毫秒级别时间戳转换时间" class="headerlink" title="毫秒级别时间戳转换时间"></a>毫秒级别时间戳转换时间</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timeStamp</span>(<span class="hljs-params">timeNum</span>):<br>    timeStamp = <span class="hljs-built_in">float</span>(timeNum / <span class="hljs-number">1000</span>)<br>    timeArray = time.localtime(timeStamp)<br>    otherStyleTime = time.strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, timeArray)<br>    <span class="hljs-built_in">print</span>(otherStyleTime)<br><br><br>timeStamp(<span class="hljs-number">1622674800000</span>)  <span class="hljs-comment"># 2021-06-02 23:00:00</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 时间戳函数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
      <tag>python 时间戳</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024年第二次在北京参加油车摇号</title>
    <link href="/2024/06/27/%E9%9A%8F%E7%AC%94/"/>
    <url>/2024/06/27/%E9%9A%8F%E7%AC%94/</url>
    
    <content type="html"><![CDATA[<h1 id="2024年第二次在北京参加油车摇号"><a href="#2024年第二次在北京参加油车摇号" class="headerlink" title="2024年第二次在北京参加油车摇号"></a>2024年第二次在北京参加油车摇号</h1><p>我是从2023年才满足了参加北京摇号的资格，两次结果可能不用想也知道没中，看着北京摇号贴吧哪些人在疯狂吐槽这些摇号政策，我心里只想哎，这破京牌有啥用！</p><p>然后转头就许愿 2024下半年让我中！😂😂😂</p><img src="/2024/06/27/%E9%9A%8F%E7%AC%94/%E4%B8%AD%E7%AD%BE.jpeg" class="">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
      <category>2024年随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>随笔</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python常见函数之 is和==的区别</title>
    <link href="/2024/06/27/is%E5%92%8C==%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2024/06/27/is%E5%92%8C==%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="python-常见函数之-is-与-的区别"><a href="#python-常见函数之-is-与-的区别" class="headerlink" title="python 常见函数之 is 与 &#x3D;&#x3D; 的区别"></a>python 常见函数之 is 与 &#x3D;&#x3D; 的区别</h1><h2 id="is"><a href="#is" class="headerlink" title="is"></a>is</h2><p>is 比较 id()</p><h2 id=""><a href="#" class="headerlink" title="&#x3D;&#x3D;"></a>&#x3D;&#x3D;</h2><p>&#x3D;&#x3D; 比较 变量值</p><h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># is, 本质 id(a) 与 id(b) 比较</span><br><span class="hljs-comment"># = 右边为对象时，表示生成新对象 </span><br><br>a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>] <br>b = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>] <br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)   <span class="hljs-comment"># False, 说明 id 不同</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a), <span class="hljs-built_in">id</span>(b))<br><span class="hljs-built_in">print</span>(a == b)   <span class="hljs-comment"># True, 值相同，内部 __eq__ 魔法函数</span><br><br><span class="hljs-comment"># 小整数、小字符串 全局唯一 intern机制</span><br><br>a1 = <span class="hljs-number">1</span> a2 = <span class="hljs-number">1</span> <br><span class="hljs-built_in">print</span>(a1 <span class="hljs-keyword">is</span> a2)     <span class="hljs-comment"># True  </span><br>s1 = <span class="hljs-string">&#x27;abc&#x27;</span> <br>s2 = <span class="hljs-string">&#x27;abc&#x27;</span> <br><span class="hljs-built_in">print</span>(s1 <span class="hljs-keyword">is</span> s2)     <span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># 类</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>:    <br>    <span class="hljs-keyword">pass</span>   <br><br><span class="hljs-comment"># People 全局唯一 </span><br>person = People() <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(person) <span class="hljs-keyword">is</span> People)   <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python is和==的区别</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python常见函数之 isinstance和type的区别</title>
    <link href="/2024/06/27/isinstance%E5%92%8Ctype%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2024/06/27/isinstance%E5%92%8Ctype%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="python常见函数之-isinstance和type的区别"><a href="#python常见函数之-isinstance和type的区别" class="headerlink" title="python常见函数之 isinstance和type的区别"></a>python常见函数之 isinstance和type的区别</h1><h2 id="isinstance"><a href="#isinstance" class="headerlink" title="isinstance"></a>isinstance</h2><p>isinstance 会去查找继承链</p><h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><p>type 只判断变量的内存地址</p><h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-keyword">pass</span><br><br>b = B()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(b, B)) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(b, A)) <span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># is 判断 id 的意思</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(b) <span class="hljs-keyword">is</span> B) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(b) <span class="hljs-keyword">is</span> A)     <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python isinstance和type的区别</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jmeter 切换语言</title>
    <link href="/2024/06/26/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7JMETER/"/>
    <url>/2024/06/26/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7JMETER/</url>
    
    <content type="html"><![CDATA[<h1 id="Jmeter-介绍"><a href="#Jmeter-介绍" class="headerlink" title="Jmeter 介绍"></a>Jmeter 介绍</h1><p>Jmeter 是一款优秀的性能测试工具，是通过java开发，这里简单的安装过程不在介绍，主要介绍一下使用技巧。</p><h2 id="切换语言"><a href="#切换语言" class="headerlink" title="切换语言"></a>切换语言</h2><p>可以通过单击options-&gt;Choose Language来选择语言</p><img src="/2024/06/26/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7JMETER/Jmeter%E5%88%87%E6%8D%A2%E8%AF%AD%E8%A8%80.png" class="">]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Jmeter</category>
      
      <category>Jmeter 切换语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Jmeter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fiddler之面板信息介绍</title>
    <link href="/2024/06/26/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7Fiddler/"/>
    <url>/2024/06/26/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7Fiddler/</url>
    
    <content type="html"><![CDATA[<h1 id="Fillder"><a href="#Fillder" class="headerlink" title="Fillder"></a>Fillder</h1><p>Fillder是一款优秀的抓包软件，不管是在windows，linux， mac下都可以使用！关于基本的安装这边就跳过了，下面我们主要来看一下使用过程中的一些技巧</p><h2 id="Fillder-面板信息组成"><a href="#Fillder-面板信息组成" class="headerlink" title="Fillder 面板信息组成"></a>Fillder 面板信息组成</h2><img src="/2024/06/26/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7Fiddler/fillder%E9%9D%A2%E6%9D%BF%E7%BB%84%E6%88%90%E4%BF%A1%E6%81%AF.png" class=""><h3 id="HTTP报文总体介绍"><a href="#HTTP报文总体介绍" class="headerlink" title="HTTP报文总体介绍"></a>HTTP报文总体介绍</h3><p>HTTP协议报文的结构</p><p>HTTP报文分2个：一个是HTTP请求报文，一个是HTTP响应报文</p><p>HTTP请求报文分为3部分：第一部分叫其实行(Request line),第二部分叫首部（Request Header),第三部分叫主体(Body)</p><p>第一行中Method表示请求方法，比如“POST”或者“GET”现在使用的HTTP协议版本是1.1</p><p>第二部分是首部（Header)</p><p>第三部分是body</p><p>特别要注意，Header与Body之间有一个空行</p><h3 id="Fillder-请求界面"><a href="#Fillder-请求界面" class="headerlink" title="Fillder 请求界面"></a>Fillder 请求界面</h3><img src="/2024/06/26/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7Fiddler/fillder%E8%AF%B7%E6%B1%82%E7%95%8C%E9%9D%A2.png" class=""><h3 id="Fillder-响应界面"><a href="#Fillder-响应界面" class="headerlink" title="Fillder 响应界面"></a>Fillder 响应界面</h3><img src="/2024/06/26/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7Fiddler/fillder%E5%93%8D%E5%BA%94%E7%95%8C%E9%9D%A2.png" class=""><h3 id="HTTP协议请求方法和状态码"><a href="#HTTP协议请求方法和状态码" class="headerlink" title="HTTP协议请求方法和状态码"></a>HTTP协议请求方法和状态码</h3><p>HTTP协议定义了很多与服务器交互的方法，最基本有5种，分别是GET HEAD POST PUT DELETE。对应的就是查改增删的4个操作，最常见的是POST和GET，GET一般用于获取&#x2F;查询资源信息，而POST一般用于更新资源信息。</p><p>GET和POST方法的区别</p><p>GET提交的数据会放在URL之后，以问号（？）分割URL和传输数据，参数之间以&amp;相连，而POST是把提交的数据放在HTTP包的Body中</p><p>GET提交数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据大小没有限制</p><p>GET方式需要使用Request.QueryString来取得变量的值，而POST方法通过Request.Form来获取变量的值</p><p>GET方式提交数据会带来安全问题，比如登录一个页面通过GET的方式提交数据时候，用户名和密码都会显示在URL中，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码</p><h3 id="HTTP-报文响应介绍"><a href="#HTTP-报文响应介绍" class="headerlink" title="HTTP 报文响应介绍"></a>HTTP 报文响应介绍</h3><p>Response消息的结构和Request消息的结构基本一样，同样也分为3部分；第一部分叫响应行（Response Line)，第二部分叫响应首部（Response Header)，第三部分是主体(Body)</p><p>第一部分是起始行，有状态码和状态码消息</p><p>第二部分是首部，</p><p>第三部分是主体</p><p>特别注意 Header首部和Body(主体)之间有一个空行</p><h4 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h4><table><thead><tr><th>状态码</th><th>已定义范围</th><th>分类</th></tr></thead><tbody><tr><td>1XX</td><td>100-101</td><td>信息提示：表示请求已成功接收、继续处理</td></tr><tr><td>2XX</td><td>200-206</td><td>成功、表示请求已被成功接收，理解、接受</td></tr><tr><td>3XX</td><td>300-305</td><td>重定向，完成请求，必须进行更进一步的处理</td></tr><tr><td>4XX</td><td>400-415</td><td>客户端错误，请求有语法错误或者无法实现请求</td></tr><tr><td>5XX</td><td>500-505</td><td>服务器错误，服务器未能实现合法的请求</td></tr></tbody></table><h4 id="HTTP-协议Header介绍"><a href="#HTTP-协议Header介绍" class="headerlink" title="HTTP 协议Header介绍"></a>HTTP 协议Header介绍</h4><p>Header的语法格式是”key:value”，一行一个Header。每一个Header都有特殊的作用，在Finddler中可以查看完整的Header。</p><p>Fiddler能方便的查看HTTP请求Header,选中一个HTTP请求，单击Inspectors tab–&gt;Request tab–&gt;Headers</p><h4 id="Cache相关的Header"><a href="#Cache相关的Header" class="headerlink" title="Cache相关的Header"></a>Cache相关的Header</h4><h5 id="COOKIE"><a href="#COOKIE" class="headerlink" title="COOKIE"></a>COOKIE</h5><p>Cookie是一种HTTP Header,是HTTP中非常重要的内容，它由key&#x3D;&#x3D;value形式组成</p><p>Accept</p><p>Accept表示浏览器客户端可以接受的媒体类型</p><p>例如 Accept:text&#x2F;html代表浏览器可以接受服务器返回html，也就是我们通常说的html文档。</p><p>通配符&#x2F;*代表任意类型，\<em>&#x2F;\</em>表示可以接受任何类型。</p><h5 id="Accept-Encoding"><a href="#Accept-Encoding" class="headerlink" title="Accept-Encoding"></a>Accept-Encoding</h5><p>Accept-Encoding跟压缩有关，浏览器发送HTTP请求给web服务器，HTTP请求中的Header有Accept-Encoding:gizp,deflate(告诉服务器，浏览器支持gizp压缩)</p><h5 id="Accept-Language"><a href="#Accept-Language" class="headerlink" title="Accept-Language"></a>Accept-Language</h5><p>Accept-Language的作用是声明自己接受的语言</p><p>也就是编码格式 UTF-8 GB2312 ZH-CN</p><h5 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent"></a>User-Agent</h5><p>Use-Agent的作用是浏览器用来告诉服务器，客户端使用的操作系统及版本，CPU类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件</p><p>修改User-Agent可以伪装不同的客户端</p><img src="/2024/06/26/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7Fiddler/fillder%E4%BF%AE%E6%94%B9Useragent.png" class=""><p>单击Rules-&gt;User-Agents然后可以选择我们想要切换的系统</p><h5 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h5><p>HTTP协议头中的Refer主要来让服务器来判断来源页面，即用户是从哪个页面过来的网站通常用来统计用户的来源，看用户是从搜索页面来的，还是从其他网站链接过来的，或是从书签等访问过来的，以便合理的定位网站</p><p>Referer有时也被用作防盗链，即下载时候判断来源地址是不是在网站域名之内，否则就不能下载或显示</p><h5 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h5><p>从HTTP1.1起，系统默认开启了Connection:Keep-Alive，保持连接特性</p><h5 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h5><p>主要是指定被请求的主机端口号，它通常从HTTP URL中提取出来</p><p>Web网页抓包和fiddler修改包</p><p>通过fiddler可以修改数据伪造数据</p><p>第一个HTTP请求是获取页面布局的HTML 也叫做“父请求”</p><p>随后的HTTP请求会根据之前页面的请求去再次请求，叫做“子请求”</p><img src="/2024/06/26/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7Fiddler/%E7%88%B6%E5%AD%90%E8%AF%B7%E6%B1%82.png" class=""><p>选中我们的第一个父请求然后右击选择seletc–&gt;Child Request 就可以找到对应的子</p><p>找父请求的话我们选中子子请求右击选择select-&gt;Parent Request就可以找到对应的父请求。</p><p>查找相同的请求，右击选择select–&gt;Duplicate Requests就可以选中了相同的请求了。</p>]]></content>
    
    
    <categories>
      
      <category>测试开发工具/框架</category>
      
      <category>Fillder</category>
      
      <category>Fillder 面板信息介绍</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Fillder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python常见函数之 Python 切片操作详解</title>
    <link href="/2024/06/25/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2024/06/25/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Python常见函数之-Python-切片操作详解"><a href="#Python常见函数之-Python-切片操作详解" class="headerlink" title="Python常见函数之 Python 切片操作详解"></a>Python常见函数之 Python 切片操作详解</h1><p>在 Python 中，切片（slicing）是一种强大的工具，它允许我们访问序列类型（如列表、元组、字符串等）中的一部分元素。切片的基本语法是 <code>[start:stop:step]</code>，其中 <code>start</code> 是起始索引（包含），<code>stop</code> 是结束索引（不包含），<code>step</code> 是步长。  </p><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><p>第一个数字 start 表示切片开始位置，默认 0</p><p>第二个数字 end 表示切片截止(但不包含)位置，默认列表长度</p><p>第三个数字 step 表示切片的步骤，默认为 1</p><p>当 start 为 0 时可以省略</p><p>当 end 为列表长度时可以省略</p><p>当 step 为 1 时可以省略，并且省略步长时可以同时省略最后一个冒号</p><p>当 step 为负数时，表示反向切片，这时 start 应该比 end 的值要大才行</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python">a_list = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>, <span class="hljs-number">17</span>]<br><br>a_list[::]      <span class="hljs-comment"># 返回包含原列表中所有元素的新列表</span><br><br>a_list[::-<span class="hljs-number">1</span>]    <span class="hljs-comment"># 返回包含原列表中所有元素的逆向新列表</span><br><br>a_list[::<span class="hljs-number">2</span>]     <span class="hljs-comment"># 隔一个元素取一个，获取偶数位置的元素</span><br><br>a_list[<span class="hljs-number">1</span>::<span class="hljs-number">2</span>]    <span class="hljs-comment"># 隔一个元素取一个，获取奇数位置的元素</span><br><br>a_list[<span class="hljs-number">3</span>:<span class="hljs-number">6</span>]     <span class="hljs-comment"># 指定切片的开始和结束位置</span><br><br>a_list[<span class="hljs-number">0</span>:<span class="hljs-number">100</span>]   <span class="hljs-comment"># 切片结束位置大于列表长度是，从列表尾部截断</span><br><br>a_list[<span class="hljs-number">100</span>:]    <span class="hljs-comment"># 切片开始位置大于列表长度时，返回空列表</span><br><br><br><br>a_list[<span class="hljs-built_in">len</span>(a_list):<span class="hljs-number">0</span>] = [<span class="hljs-number">9</span>]     <span class="hljs-comment"># 在列表尾部增加元素</span><br><br>a_list[:<span class="hljs-number">0</span>] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]             <span class="hljs-comment"># 在列表头部增加元素</span><br><br>a_list[<span class="hljs-number">3</span>:<span class="hljs-number">3</span>] = [<span class="hljs-number">100</span>]             <span class="hljs-comment"># 在列表中间位置插入元素</span><br><br>a_list[:<span class="hljs-number">2</span>] = [<span class="hljs-number">100</span>, <span class="hljs-number">200</span>]         <span class="hljs-comment"># 替换列表元素，等号两边长度相等</span><br><br>a_list[<span class="hljs-number">3</span>:] = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]          <span class="hljs-comment"># 替换列表元素，等号两边长度可以不相等</span><br><br>a_list[:<span class="hljs-number">3</span>] = []                 <span class="hljs-comment"># 删除列表中前 3 个元素</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python 常见函数</category>
      
      <category>Python 常见切片操作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
